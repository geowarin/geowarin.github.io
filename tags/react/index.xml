<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>react on Geowarin</title><link>https://geowarin.github.io/tags/react/</link><description>Recent content in react on Geowarin</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 25 Feb 2018 11:33:45 +0100</lastBuildDate><atom:link href="https://geowarin.github.io/tags/react/index.xml" rel="self" type="application/rss+xml"/><item><title>What I Did Wrong as a CTO</title><link>https://geowarin.github.io/what-i-did-wrong-as-a-cto/</link><pubDate>Sun, 25 Feb 2018 11:33:45 +0100</pubDate><guid>https://geowarin.github.io/what-i-did-wrong-as-a-cto/</guid><description>Being a CTO in a startup is much more than the technical side.
However, the technical decisions you make early with software, especially in a timed-constraint environment like a startup, tend to stick with you for the rest of the project.
In this article, I will be listing a few of the technical decisions I made.
Some of them felt right at all time, some of them I hope not to make again.</description></item><item><title>Consuming APIs with Redux, the Shasta way</title><link>https://geowarin.github.io/consuming-apis-with-redux-the-shasta-way/</link><pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/consuming-apis-with-redux-the-shasta-way/</guid><description>Since React is just the view layer of your front-end stack, the community had to provide the solutions for the remaining problems.
Right now there seems to be a consensus for the best libraries. The recommended stack is:
Building: Webpack and babel Managing your UI state: Redux and ImmutableJS Routing: React-router (ahem!) But there seems to be lots of options to connect Redux to your API.
Yesterday, I decided to see what Shasta had in store for us.</description></item><item><title>React freshness</title><link>https://geowarin.github.io/react-freshness/</link><pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/react-freshness/</guid><description>In the javascript community, some people have experienced javascript fatigue.
For me, this fatigue is two folds. First, you need to keep up to date with the frantic pace of redux, react-router and friends and make sure you will be able to migrate your code to the new major versions.
Second, Webpack configuration is not always straight-forward. I know a lot of people that really want to see what React is like and play with it without having to cope with a lot of configuration up-front.</description></item><item><title>Spring Boot and React hot loader</title><link>https://geowarin.github.io/spring-boot-and-react-hot-loader/</link><pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/spring-boot-and-react-hot-loader/</guid><description>When I develop web applications, I love using React. I&amp;rsquo;m also a Spring and groovy addict.
Those two stacks make me more productive. Can we have the best of both worlds?
I will show you step by step how I created this project. Feel free to fiddle with it and give me your feedback.
Goal My perfect stack on the backend is to use Spring boot and groovy. With the latest version of Spring boot, there is a new tool called dev-tools that will automatically reload the embedded server when you recompile your project.</description></item></channel></rss>