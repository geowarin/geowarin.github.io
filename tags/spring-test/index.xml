<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring-test on Geowarin</title><link>https://geowarin.github.io/tags/spring-test/</link><description>Recent content in spring-test on Geowarin</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 21 Jan 2013 15:25:11 +0000</lastBuildDate><atom:link href="https://geowarin.github.io/tags/spring-test/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Spring Data JPA in a Java SE environment and run tests with dbUnit</title><link>https://geowarin.github.io/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/</link><pubDate>Mon, 21 Jan 2013 15:25:11 +0000</pubDate><guid>https://geowarin.github.io/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/</guid><description>This blog post follows my previous articles on using hibernate as a standalone JPA provider and how to use spring in a Java SE environment.
In this post, I will show you how to use Spring Data JPA, a great project which improves your productivity by generating all CRUD operations for you. Then we will use springtestdbunit to run some very clean tests on our database with spring and dbUnit.</description></item><item><title>Using spring in a Java SE environment and implementing the chain of responsibility pattern</title><link>https://geowarin.github.io/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/</link><pubDate>Sun, 20 Jan 2013 19:31:56 +0000</pubDate><guid>https://geowarin.github.io/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/</guid><description>In this post I will show you how to use spring 3.0 Java based configuration in a Java SE environment, taking advantage of spring autowiring to implement the chain of responsibility design pattern with components and services in a simple project. We will also use spring&amp;rsquo;s PropertySourcesPlaceholderConfigurer to inject custom properties into our beans with the @Value annotation and test our application with spring-test.
Some fun in perspective ! Tag along.</description></item></channel></rss>