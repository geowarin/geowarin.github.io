<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>async on Geowarin</title><link>https://geowarin.github.io/tags/async/</link><description>Recent content in async on Geowarin</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 12 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://geowarin.github.io/tags/async/index.xml" rel="self" type="application/rss+xml"/><item><title>Completable futures with Spring async</title><link>https://geowarin.github.io/completable-futures-with-spring-async/</link><pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/completable-futures-with-spring-async/</guid><description>Since version 8, java has a way better abstraction than java.util.Future called CompletableFuture. This new API along with the lambdas enables new ways of reasoning with futures by composing, listening and joining them.
Futures are traditionally created by submitting tasks to an Executor. Spring allows declaring one or multiple executors and will submit any method annotated with @Async as tasks for those executors.
The big problem is that executors still return Futures and not CompletableFutures.</description></item></channel></rss>