<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>testing on Geowarin</title><link>https://geowarin.com/tags/testing/</link><description>Recent content in testing on Geowarin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 18 Feb 2022 12:50:57 +0100</lastBuildDate><atom:link href="https://geowarin.com/tags/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>What is a good unit test?</title><link>https://geowarin.com/what-is-a-good-unit-test/</link><pubDate>Fri, 18 Feb 2022 12:50:57 +0100</pubDate><guid>https://geowarin.com/what-is-a-good-unit-test/</guid><description>What constitutes good unit test might be a little more involved than you think. Let&amp;rsquo;s reflect on the practice to make sure that we test our applications as efficiently as possible.</description><content:encoded><![CDATA[<p>At my current job, during interviews, we like to ask this seemingly innocent question:
&ldquo;What is a good unit test?&rdquo;.</p>
<p>It turns out that it is a tricky questions. Let&rsquo;s try to reflect on the practice of testing to make sure that
we write our tests as efficiently as possible.</p>
<h2 id="what-is-a-unit">What is a Unit?</h2>
<p>Right from the start, we see that the definition of a <em>unit</em> is problematic.</p>
<p>Some people will argue that a unit is a function, a class, or even a package.
To me, this feels too restrictive.</p>
<p>For now, let&rsquo;s define a unit as:</p>
<blockquote>
<p>A non-trivial amount of code that does a non-trivial thing</p>
</blockquote>
<p>We will see if we can refine this definition as we reflect on the practice of unit-testing.</p>
<h2 id="what-is-good-about-tests">What is good about tests?</h2>
<p>Let&rsquo;s try to give some properties of &ldquo;good testing&rdquo; practices.</p>
<p>Here is what comes through my mind:</p>
<ul>
<li>Tests catch when the code breaks in unexpected ways</li>
<li>They help me design my code while I am writing it</li>
<li>They give me courage to change/refactor the code down the line</li>
<li>They provide tight feedback loops</li>
</ul>
<h3 id="they-catch-errors">They catch errors</h3>
<p>This is the most obvious advantage of writing tests.</p>
<p>Off-by-one errors, typos, or simply a misunderstanding of what the current code does might lead to a logical error.</p>
<p>We are human, we make mistakes.</p>
<h3 id="they-help-me-design-my-apis">They help me design my APIs</h3>
<p>Through experience, I have become a <a href="https://martinfowler.com/bliki/TestDrivenDevelopment.html">TDD</a> practitioner.
I find that I write code more efficiently when I&rsquo;m writing a test first.</p>
<p>Following TDD by the book would mean adhering to the Red / Green / Refactor mantra.</p>
<ul>
<li>ðŸ”´ Red : You write a failing test that highlights what your code is supposed to do next</li>
<li>ðŸŸ¢ Green: You write the minimum amount of code to make that test pass</li>
<li>ðŸ”µ Refactor: If necessary, you refactor your code (production or test)</li>
</ul>
<p>=&gt; Repeat until you code does what it is supposed to.</p>
<p>While I find this approach helpful, I do not follow it dogmatically.</p>
<p>What I take issue with is &ldquo;minimal code to make tests fail or pass&rdquo;.</p>
<p>If I think a portion of code is getting complicated, I would typically extract a function.</p>
<p>Then, I&rsquo;ll write a test that looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>test(<span style="color:#5af78e">&#39;it works&#39;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">const</span> output <span style="color:#ff6ac1">=</span> myFunction(some, input);
</span></span><span style="display:flex;"><span>    expect(output).toEqual(
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// what&#39;s the API?
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>    )
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>I make it compile by writing an empty function (that probably returns <code>null</code>).
I begin to write types for inputs and outputs.</p>
<p>I start to think about how different inputs change the output.</p>
<p>And then I start to think about edge cases.</p>
<p>If I come up with multiple things to keep in mind at the same time, I might write another test right away.
Then, I try my best to write code that works from the get-go.</p>
<p>Of course, by all means, write simpler test cases first. Then write more complicated ones so complexity
becomes easier to tackle.</p>
<div class='admonition note'>
    <span class="icon"></span>
    <p>Don&rsquo;t be dogmatic, be productive.</p>
</div>

<h3 id="they-give-me-courage-to-change-the-existing-code">They give me courage to change the existing code</h3>
<p>We all have heard or lived with <a href="https://martinfowler.com/bliki/TechnicalDebt.html">technical debt</a>.</p>
<p>Code ages and sometimes it does not age well.
We want to be able to refactor it to reflect our current understanding of the domain.</p>
<p>This must be done as often as necessary and, therefore, be as painless as possible.</p>
<h3 id="they-give-me-immediate-feedback">They give me immediate feedback</h3>
<p>Unit tests must be fast to run.</p>
<p>This is why some people oppose them to &ldquo;integration tests&rdquo; or &ldquo;end-to-end tests&rdquo;.</p>
<p>I would argue that you should thrive to make all kinds of tests fast.</p>
<p>The difference between those three kinds of tests might not be obvious and again, I think it comes down
to the definition of &ldquo;unit&rdquo;.</p>
<p>Let me propose the following definitions:</p>
<blockquote>
<p>Integration tests execute code that is &ldquo;off unit&rdquo;.</p>
</blockquote>
<blockquote>
<p>End-to-end tests are about user interactions. Through the UI we can interact with our product and assert what the UI shows.</p>
</blockquote>
<p>I would argue that, more importantly than speed, these kinds of tests differ by the maintenance effort they require.</p>
<p>Most people are familiar with the <a href="https://martinfowler.com/bliki/TestPyramid.html">test pyramid</a>, where the base
is wider and composed of unit tests, and the tip is narrower and composed of fewer &ldquo;high maintenance&rdquo; tests.</p>
<p>Following this practice you&rsquo;ll have mostly fast, easy to maintain, tests and a few high-maintenance and potentially
slower tests.</p>
<h2 id="is-there-such-a-thing-as-too-many-tests">Is there such a thing as too many tests?</h2>
<p><strong>Yes.</strong></p>
<div class='admonition note'>
    <span class="icon"></span>
    <p>One measure of good code is <em>high cohesion</em> and <em>low coupling</em>.</p>
</div>

<p>In other words, maximizing how easy it is to change the code.</p>
<p>Ideally, we want a minimal code change to break a minimal amount of tests.</p>
<p>Therefore, we should apply the same &ldquo;clean code&rdquo; principles to the tests as we apply to production code.</p>
<p>We should always Refactor/simplify/delete unnecessary tests.</p>
<p>See: <a href="https://essentials.xebia.com/maximize-cohesion-minimize-coupling/">Maximize cohesion Minimize coupling</a></p>
<h2 id="can-we-predict-the-future">Can we predict the future?</h2>
<p>Now that we talked about cohesion and coupling, we might propose a better definition for a &ldquo;unit&rdquo;:</p>
<blockquote>
<p>A Unit is an arbitrary amount of related code that we expect to change altogether</p>
</blockquote>
<p>All the nuance is in &ldquo;we expect&rdquo;. With our current knowledge of the domain, we expect some part of the code
to be expended in the future.</p>
<p>We might define some extensions points or make it easy to add behaviors by adding variables in an array, or a
configuration file.</p>
<p>If your predictions are wrong, you might have over-engineered your code. Conversely, you might have missed potential
abstractions that would have made your code easier to change.</p>
<p>I think the latter is definitely better (<a href="https://www.martinfowler.com/bliki/Yagni.html">YAGNI</a>).
If a portion of code is hard to change, we can refactor it until it&rsquo;s easy to change and then, make the change.</p>
<div class='admonition note'>
    <span class="icon"></span>
    <p>Over-engineering complicates testing.</p>
</div>

<h2 id="what-to-mockfakestub">What to mock/fake/stub?</h2>
<p>With a better definition of a &ldquo;unit&rdquo;, we may want to explore what should be tested and what should not.
And what the real difference between unit and integration tests is.</p>
<p>The usual candidates for mocking are:</p>
<ul>
<li>Database queries</li>
<li>Network in general</li>
<li>Code not directly under our responsibility</li>
</ul>
<p>My rule of thumb is:</p>
<div class='admonition note'>
    <span class="icon"></span>
    <p>Mock when it is inconvenient to call &ldquo;off-unit&rdquo; code.</p>
</div>

<p>Some mocking tools are <em>fragile</em> (using reflection, code instrumentation). They make it easy to couple your mocks
to implementation details and are prone to breaking.</p>
<div class='admonition warning'>
    <span class="icon"></span>
    <p>Remember that mocking couples the testing code to implementation details.</p>
</div>

<p>Favor simplicity. Write your code such as dependencies are hidden behind small interfaces or functions.</p>
<p>Then, they become simple to <strong>stub</strong>.</p>
<p>Mocking is a balancing act between:</p>
<ul>
<li>Maximizing speed</li>
<li>Minimizing coupling of the test code to implementation details</li>
<li>Convenience (tooling)</li>
</ul>
<p>You might find some cases where hitting a real database, for instance, is not that &ldquo;inconvenient&rdquo;.</p>
<p>If your unit tests automatically launch a PostgreSQL database in a container in 0.5 seconds, it might be a pretty good
tradeoff and reduce the overall amount of tests you write, as well as improve your confidence in your code.</p>
<p>See: <a href="https://martinfowler.com/articles/mocksArentStubs.html">Mocks Aren&rsquo;t Stubs</a></p>
<h2 id="conclusion">Conclusion</h2>
<p>Code always has good reasons to change.</p>
<p>Rigid definitions are not helpful because they might make us forget the most important:
tests are a tool that should make the code easier write and to change.</p>
<p>Keep that goal in mind and you&rsquo;ll write better code.</p>
<p>What about you? Do you agree with my analysis? How do you test your code?</p>
]]></content:encoded></item><item><title>Test your Java application with Groovy</title><link>https://geowarin.com/test-your-java-application-with-groovy/</link><pubDate>Wed, 20 Jan 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/test-your-java-application-with-groovy/</guid><description>You can write better tests for your Java application with Spock, Groovy and very little configuration</description><content:encoded><![CDATA[<p>I think Groovy is a wonderful language.
However, I would not advise a complete rewrite of your project in Groovy!</p>
<p>We can however use Groovy to test our Java code.</p>
<p>I&rsquo;m actually a big fan of this approach.
I&rsquo;ve been using it to test legacy applications written in Java.</p>
<p>I still couldn&rsquo;t use lambdas or fancy Java 8 features but all of a sudden,
my test code was more expressive.
I could take advantage closures, power asserts, the Spock DSL and Groovy simple syntax.
The best part: every library I used was a test dependency and never impacted
the actual code.</p>
<p>In this article I will show you how to add Groovy tests to
an existing Java application built either with Maven or Gradle.</p>
<p>The code source of a demo application using Maven and Spock is <a href="https://github.com/geowarin/groovy-tests">available on github</a>.</p>
<h2 id="why-groovy">Why groovy?</h2>
<p>Groovy is a dynamic language with optional typing. It means that you can
have the guarantees of a type system when it matters and the versatility of
duck typing when you know what your are doing.</p>
<p>Groovy removes all the verbosity from the Java syntax.
Some small examples:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span><span style="color:#78787e">// map literals
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>Map<span style="color:#ff6ac1">&lt;</span>String<span style="color:#ff6ac1">,</span> String<span style="color:#ff6ac1">&gt;</span> things <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">[</span><span style="color:#5af78e">&#39;hello&#39;</span><span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;world&#39;</span><span style="color:#ff6ac1">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">// Write to a file
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span><span style="color:#ff6ac1">new</span> <span style="color:#57c7ff">File</span><span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#34;hello.txt&#34;</span><span style="color:#ff6ac1">)</span> <span style="color:#ff6ac1">&lt;&lt;</span> <span style="color:#5af78e">&#39;Hello world!&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">// Add some numbers
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>BigInteger a <span style="color:#ff6ac1">=</span> <span style="color:#ff9f43">18</span>
</span></span><span style="display:flex;"><span>BigDecimal b <span style="color:#ff6ac1">=</span> <span style="color:#ff9f43">24</span>
</span></span><span style="display:flex;"><span><span style="color:#9aedfe">int</span> sum <span style="color:#ff6ac1">=</span> a <span style="color:#ff6ac1">+</span> b
</span></span><span style="display:flex;"><span>println <span style="color:#5af78e">&#34;$sum ${sum.class}&#34;</span> <span style="color:#78787e">// 42 class java.lang.Integer
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">// List literals
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>List<span style="color:#ff6ac1">&lt;</span>Number<span style="color:#ff6ac1">&gt;</span> numbers <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">[-</span><span style="color:#ff9f43">2</span><span style="color:#ff6ac1">,</span> <span style="color:#ff9f43">12</span><span style="color:#ff6ac1">,</span> <span style="color:#ff9f43">6</span><span style="color:#ff6ac1">,</span> <span style="color:#ff9f43">3</span><span style="color:#ff6ac1">]</span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">// Closures
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span><span style="color:#9aedfe">def</span> result <span style="color:#ff6ac1">=</span> numbers
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">.</span><span style="color:#57c7ff">findAll</span> <span style="color:#ff6ac1">{</span> it <span style="color:#ff6ac1">&gt;</span> <span style="color:#ff9f43">0</span> <span style="color:#ff6ac1">}</span> <span style="color:#78787e">// filter
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>        <span style="color:#ff6ac1">.</span><span style="color:#57c7ff">collect</span> <span style="color:#ff6ac1">{</span> it <span style="color:#ff6ac1">*</span> <span style="color:#ff9f43">2</span> <span style="color:#ff6ac1">}</span> <span style="color:#78787e">// map
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>        <span style="color:#ff6ac1">.</span><span style="color:#57c7ff">sum</span><span style="color:#ff6ac1">()</span> <span style="color:#78787e">// reduce
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">// template strings
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>println <span style="color:#5af78e">&#34;This answer to life, universe and everything: ${result}&#34;</span>
</span></span></code></pre></div><p>If you want a good introduction to groovy check out the <a href="http://www.groovy-lang.org/style-guide.html">groovy style guide</a>.</p>
<p>You can also watch the amazing <a href="http://www.infoq.com/presentations/groovy-for-java">Groovy for Java developers</a> presentation by Peter Ledbrook.</p>
<p>Another thing. Groovy let you access private class members.
Although this completely violates encapsulation, you will get away
with just a warning.</p>
<p>It is nice to have this kind of ability when you add tests to a legacy application before
refactoring it.</p>
<h2 id="why-spock">Why Spock?</h2>
<p>Spock is a wonderful test framework.</p>
<p>It combines the best features of other frameworks like JUnit, jMock, and RSpec
and let you write specifications with a nice <a href="https://fr.wikipedia.org/wiki/Behavior_driven_development">BDD</a> DSL.</p>
<p>It is fully compatible with JUnit so you can use all the stuff you like (rules for instance)
and much more!</p>
<p>It will also completely remove the need for a mocking framework like Mockito.</p>
<p>If you want to learn more about Spock read: <a href="https://code.google.com/p/spock/wiki/WhySpock">why spock</a> and <a href="http://spockframework.github.io/spock/docs/1.0/spock_primer.html">spock primer</a>.</p>
<p>I also found the <a href="https://github.com/spockframework/next-level-spock">next level spock repo</a>
interesting to look at.</p>
<h2 id="how">How?</h2>
<p>You are now ready to add Spock to your tool-belt. But how?</p>
<h3 id="with-maven">With Maven</h3>
<p>Add dependencies to Groovy and Spock:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;dependencies&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.codehaus.groovy<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;artifactId&gt;</span>groovy-all<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;version&gt;</span>2.4.4<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;scope&gt;</span>test<span style="color:#ff6ac1">&lt;/scope&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.spockframework<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;artifactId&gt;</span>spock-core<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;version&gt;</span>1.0-groovy-2.4<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;scope&gt;</span>test<span style="color:#ff6ac1">&lt;/scope&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/dependencies&gt;</span>
</span></span></code></pre></div><p>Now, you need to tell maven to compile the code contained in <code>src/test/groovy</code>.
We will use the <a href="https://github.com/groovy/GMavenPlus">gmavenplus</a> plugin for that.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;build&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;plugins&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;plugin&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.codehaus.gmavenplus<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;artifactId&gt;</span>gmavenplus-plugin<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;version&gt;</span>1.0<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;executions&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;execution&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;goals&gt;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#ff6ac1">&lt;goal&gt;</span>generateStubs<span style="color:#ff6ac1">&lt;/goal&gt;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#ff6ac1">&lt;goal&gt;</span>compile<span style="color:#ff6ac1">&lt;/goal&gt;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#ff6ac1">&lt;goal&gt;</span>testGenerateStubs<span style="color:#ff6ac1">&lt;/goal&gt;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#ff6ac1">&lt;goal&gt;</span>testCompile<span style="color:#ff6ac1">&lt;/goal&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;/goals&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;/execution&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;/executions&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;dependencies&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.codehaus.groovy<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;artifactId&gt;</span>groovy-all<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;version&gt;</span>2.4.4<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;scope&gt;</span>runtime<span style="color:#ff6ac1">&lt;/scope&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;/dependencies&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;/plugin&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">&lt;!-- Optional --&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;plugin&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.apache.maven.plugins<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;artifactId&gt;</span>maven-surefire-plugin<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;version&gt;</span>2.16<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;configuration&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;parallel&gt;</span>methods<span style="color:#ff6ac1">&lt;/parallel&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;threadCount&gt;</span>5<span style="color:#ff6ac1">&lt;/threadCount&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;includes&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;include&gt;</span>**/*Test.*<span style="color:#ff6ac1">&lt;/include&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;include&gt;</span>**/*Spec.*<span style="color:#ff6ac1">&lt;/include&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;/includes&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;excludes&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;exclude&gt;</span>**/Abstract*.java<span style="color:#ff6ac1">&lt;/exclude&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;/excludes&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;/configuration&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;/plugin&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/plugins&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/build&gt;</span>
</span></span></code></pre></div><p>By convention, Spock tests are called specifications and spec files end with
<code>*Spec.groovy</code>.
This is optional but we can enable that behavior by overriding the surefire default
configuration.</p>
<h3 id="with-gradle">With gradle</h3>
<p>Just apply the groovy plugin, included by default in Gradle.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>apply <span style="color:#ff5c57">plugin:</span> <span style="color:#5af78e">&#39;groovy&#39;</span>
</span></span></code></pre></div><p>Since the plugin extends the Java convention, it will automatically compile the
Java code contained in <code>src/main/java</code> and <code>src/test/java</code> as well as the
Groovy code contained in <code>src/main/groovy</code> and <code>src/test/groovy</code>.</p>
<h2 id="your-first-spock-specification">Your first Spock specification</h2>
<p>Place this little specification in <code>src/test/groovy</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> spock.lang.Specification
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> spock.lang.Unroll
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MySpec</span> <span style="color:#ff5c57">extends</span> Specification <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Unroll</span>
</span></span><span style="display:flex;"><span>    <span style="color:#9aedfe">def</span> <span style="color:#5af78e">&#34;max(#a,#b) == #c&#34;</span><span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">expect:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// This class is in our Java code
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>        MyClass<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">max</span><span style="color:#ff6ac1">(</span>a<span style="color:#ff6ac1">,</span> b<span style="color:#ff6ac1">)</span> <span style="color:#ff6ac1">==</span> c
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">where:</span>
</span></span><span style="display:flex;"><span>        a  <span style="color:#ff6ac1">|</span> b   <span style="color:#ff6ac1">|</span> c
</span></span><span style="display:flex;"><span>        <span style="color:#ff9f43">1</span>  <span style="color:#ff6ac1">|</span> <span style="color:#ff9f43">2</span>   <span style="color:#ff6ac1">|</span> <span style="color:#ff9f43">2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff9f43">42</span> <span style="color:#ff6ac1">|</span> <span style="color:#ff6ac1">-</span><span style="color:#ff9f43">12</span> <span style="color:#ff6ac1">|</span> <span style="color:#ff9f43">42</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff9f43">42</span> <span style="color:#ff6ac1">|</span> <span style="color:#ff6ac1">-</span><span style="color:#ff9f43">12</span> <span style="color:#ff6ac1">|</span> <span style="color:#ff6ac1">-</span><span style="color:#ff9f43">42</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span></code></pre></div><p>Here is what it looks like in IntelliJ:</p>
<p><img loading="lazy" src="/assets/images/articles/2016-01-spock.png" alt="Spock test results"  title="Spock results"  />
</p>
<p>You can also verify that it works with maven by typing:</p>
<pre tabindex="0"><code>mvn test
</code></pre><p>You would get this result:</p>
<pre tabindex="0"><code>-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running MySpec
Tests run: 3, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.146 sec &lt;&lt;&lt; FAILURE! - in MySpec
max(42,-12) == -42(MySpec)  Time elapsed: 0.105 sec  &lt;&lt;&lt; FAILURE!
org.spockframework.runtime.SpockComparisonFailure: Condition not satisfied:

Math.max(a, b) == c
     |   |  |  |  |
     42  42 -12|  -42
               false

        at MySpec.max(#a,#b) == #c(MySpec.groovy:9)


Results :

Failed tests:
  MySpec.max(#a,#b) == #c:9 Condition not satisfied:

Math.max(a, b) == c
     |   |  |  |  |
     42  42 -12|  -42
               false


Tests run: 3, Failures: 1, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1.887 s
[INFO] Finished at: 2016-01-20T15:52:40+01:00
[INFO] Final Memory: 11M/309M
[INFO] ------------------------------------------------------------------------
</code></pre><h2 id="ide-integration">IDE integration</h2>
<p>Install the <a href="https://github.com/mycila/gmavenplus-intellij-plugin">gmavnen intelliJ plugin</a>
and the <a href="https://plugins.jetbrains.com/plugin/7114">spock plugin</a> for a better integration with your IDE.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Even if your whole codebase is in Java, your fellow developers will thank you
for bringing a breath of fresh air to your project with Groovy tests.</p>
<p>The configuration to get this working is very simple. You have no excuse
for not giving it a try!</p>
<p>As always, checkout the <a href="https://github.com/geowarin/groovy-tests">github repo</a> and tell me your thoughts.</p>
]]></content:encoded></item></channel></rss>