<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design pattern on Geowarin</title><link>https://geowarin.github.io/tags/design-pattern/</link><description>Recent content in design pattern on Geowarin</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 20 Jan 2013 19:31:56 +0000</lastBuildDate><atom:link href="https://geowarin.github.io/tags/design-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Using spring in a Java SE environment and implementing the chain of responsibility pattern</title><link>https://geowarin.github.io/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/</link><pubDate>Sun, 20 Jan 2013 19:31:56 +0000</pubDate><guid>https://geowarin.github.io/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/</guid><description>In this post I will show you how to use spring 3.0 Java based configuration in a Java SE environment, taking advantage of spring autowiring to implement the chain of responsibility design pattern with components and services in a simple project. We will also use spring&amp;rsquo;s PropertySourcesPlaceholderConfigurer to inject custom properties into our beans with the @Value annotation and test our application with spring-test.
Some fun in perspective ! Tag along.</description></item></channel></rss>