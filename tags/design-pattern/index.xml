<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Design Pattern on Geowarin</title><link>https://geowarin.com/tags/design-pattern/</link><description>Recent content in Design Pattern on Geowarin</description><generator>Hugo -- 0.138.0</generator><language>en</language><lastBuildDate>Sun, 20 Jan 2013 19:31:56 +0000</lastBuildDate><atom:link href="https://geowarin.com/tags/design-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Using spring in a Java SE environment and implementing the chain of responsibility pattern</title><link>https://geowarin.com/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/</link><pubDate>Sun, 20 Jan 2013 19:31:56 +0000</pubDate><guid>https://geowarin.com/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/</guid><description>Demonstration of how to set up spring in java SE and inject several implementations of the same interface</description><content:encoded><![CDATA[<p>In this post I will show you how to use spring 3.0 <a href="http://www.springsource.org/javaconfig">Java based configuration</a> in a Java SE environment, taking advantage of spring autowiring to implement the <a href="http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern">chain of responsibility </a>design pattern with components and services in a simple project. We will also use spring&rsquo;s <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.html">PropertySourcesPlaceholderConfigurer</a> to inject custom properties into our beans with the <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/beans/factory/annotation/Value.html">@Value</a> annotation and test our application with spring-test.</p>
<p>Some fun in perspective ! Tag along.</p>
<p>The source code of this application is available on my github : <a href="https://github.com/geowarin/spring-examples/tree/master/spring-standalone-chain">https://github.com/geowarin/spring-examples/tree/master/spring-standalone-chain</a></p>
<h2 id="java-configuration">Java configuration</h2>
<p>Starting from spring 3.0, it is possible to get rid of any XML configuration by providing a pure Java configuration. This is done by annotating your configuration classes with the <strong>@Configuration</strong> annotation and annotating your beans with <strong>@Bean</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ComponentScan</span>(basePackages <span style="color:#ff6ac1">=</span> {<span style="color:#5af78e">&#34;com.geowarin.spring.service&#34;</span>, <span style="color:#5af78e">&#34;com.geowarin.spring.component&#34;</span>})
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@PropertySource</span>(value <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;classpath:chain.properties&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SpringStandalonChainConfig</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> PropertySourcesPlaceholderConfigurer <span style="color:#57c7ff">propertySourcesPlaceholderConfigurer</span>() {
</span></span><span style="display:flex;"><span>		PropertySourcesPlaceholderConfigurer pspc <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> PropertySourcesPlaceholderConfigurer();
</span></span><span style="display:flex;"><span>		pspc.<span style="color:#57c7ff">setPlaceholderPrefix</span>(<span style="color:#5af78e">&#34;#{&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> pspc;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> MainBean <span style="color:#57c7ff">mainBean</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> MainBean();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Additional annotation for java configuration include <strong>@ComponentScan</strong> to specify packages in which your <strong>@Component</strong>, <strong>@Service</strong>, etc. beans are included and <strong>@PropertySource</strong> to include property files in your configuration.</p>
<p>Two thing here :</p>
<ol>
<li>I declare a <strong>MainBean</strong> which will act as an entry point for our application. This bean will benefit of spring autowiring</li>
<li>I declare a custom <strong>PropertySourcesPlaceholderConfigurer</strong> to enable the injection of properties annotated with @Value. I am customizing the prefix for usage of <a href="http://static.springsource.org/spring/docs/3.0.x/reference/expressions.html">spring Expression Language</a> to be able to use #{} expressions instead of default ${}</li>
</ol>
<p>Injection with <strong>@Value</strong> property is a very interesting alternative to the use of spring&rsquo;s Environment as it provides natural type inference.</p>
<p>For some people, the use of java configuration can be confusing because one cannot see at first glance where the config is located. What I usually do is keeping my configuration in a separate source folder. This can be achieved with maven and its build-helper plugin :</p>
<script src="https://gist.github.com/geowarin/4581500.js"></script>

<p>This approach is compatible with eclipse if you have m2e installed. In that case when you import a project using this plugin, eclipse will prompt you for the install of the build-helper connector.</p>
<h2 id="our-application-entry-point--the-mainbean">Our application entry point : the MainBean</h2>
<p>Here is the code of our <strong>MainBean</strong> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MainBean</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Qualifier</span>(<span style="color:#5af78e">&#34;doChain&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> ChainService service;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Value</span>(<span style="color:#5af78e">&#34;#{chain.compatibleWithFirst}&#34;</span>) <span style="color:#9aedfe">boolean</span> compatibleWithFirst;
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Value</span>(<span style="color:#5af78e">&#34;#{chain.compatibleWithSecond}&#34;</span>) <span style="color:#9aedfe">boolean</span> compatibleWithSecond;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(MainBean.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">start</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;property compatibleWithFirst=&#34;</span> <span style="color:#ff6ac1">+</span> compatibleWithFirst);
</span></span><span style="display:flex;"><span>		log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;property compatibleWithSecond=&#34;</span> <span style="color:#ff6ac1">+</span> compatibleWithSecond);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		ChainContext chainContext <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ChainContext(compatibleWithFirst, compatibleWithSecond);
</span></span><span style="display:flex;"><span>		service.<span style="color:#57c7ff">executeChain</span>(chainContext);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We are injecting our service into the bean with a custom qualifier which will enable us to provide several implementations of our service if we need it.</p>
<p>Note that the <strong>@Value</strong> annotation, our properties will automatically be casted to booleans, which is pretty cool. Here is our chain.properties file :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>chain.compatibleWithFirst<span style="color:#ff6ac1">=</span><span style="color:#ff5c57">false</span>
</span></span><span style="display:flex;"><span>chain.compatibleWithSecond<span style="color:#ff6ac1">=</span><span style="color:#ff5c57">true</span>
</span></span></code></pre></div><h2 id="the-chain--two-components-and-a-service">The Chain : Two components and a service</h2>
<p>The <strong>ChainContext</strong> class is a simple pojo we pass to our service to be handled by the chain of responsibility and enable us to test if our service successfully handled our case :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">ChainContext</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> <span style="color:#9aedfe">boolean</span> compatibleWithFirstElement;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> <span style="color:#9aedfe">boolean</span> compatibleWithSecondElement;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">boolean</span> handledByFirst;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">boolean</span> handledBySecond;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#57c7ff">ChainContext</span>(<span style="color:#9aedfe">boolean</span> compatibleWithFirstElement, <span style="color:#9aedfe">boolean</span> compatibleWithSecondElement) {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">compatibleWithFirstElement</span> <span style="color:#ff6ac1">=</span> compatibleWithFirstElement;
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">compatibleWithSecondElement</span> <span style="color:#ff6ac1">=</span> compatibleWithSecondElement;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Getters and setters ommited</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>ChainElement</strong> is a simple interface which will be implemented by two components : <strong>FirstChainElement</strong> and <strong>SecondChainElement</strong>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">interface</span> <span style="color:#f3f99d">ChainElement</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">boolean</span> <span style="color:#57c7ff">doChain</span>(ChainContext context);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here is the first element, the second one is essentially the same thing :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Order</span>(1)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">FirstChainElement</span> <span style="color:#ff5c57">implements</span> ChainElement {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(FirstChainElement.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">boolean</span> <span style="color:#57c7ff">doChain</span>(ChainContext context) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">if</span> (context.<span style="color:#57c7ff">isCompatibleWithFirstElement</span>()) {
</span></span><span style="display:flex;"><span>			log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;Handled by first&#34;</span>);
</span></span><span style="display:flex;"><span>			context.<span style="color:#57c7ff">setHandledByFirst</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>			<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">true</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">false</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The thing to note here is the use of the spring annotation <a href="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/core/annotation/Order.html">@Order</a> which will enable us to sort our list using spring&rsquo;s <a href="http://static.springsource.org/spring/docs/3.0.x/api/org/springframework/core/annotation/AnnotationAwareOrderComparator.html">AnnotationAwareOrderComparator</a>. Neat :)</p>
<p>And now the service :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Qualifier</span>(<span style="color:#5af78e">&#34;doChain&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DoChainService</span> <span style="color:#ff5c57">implements</span> ChainService {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> List<span style="color:#ff6ac1">&lt;</span>ChainElement<span style="color:#ff6ac1">&gt;</span> chain;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@PostConstruct</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">init</span>() {
</span></span><span style="display:flex;"><span>		Collections.<span style="color:#57c7ff">sort</span>(chain, AnnotationAwareOrderComparator.<span style="color:#57c7ff">INSTANCE</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">executeChain</span>(ChainContext context) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">for</span> (ChainElement chainElement : chain) {
</span></span><span style="display:flex;"><span>			<span style="color:#ff6ac1">if</span> (chainElement.<span style="color:#57c7ff">doChain</span>(context))
</span></span><span style="display:flex;"><span>				<span style="color:#ff6ac1">break</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Note that we use the same qualifier as our <strong>MainBean</strong> here. The main trick in this article is the usage of <strong>@Autowired</strong> to inject all the components implementing the <strong>ChainElement</strong> interface into a List.</p>
<h2 id="the-application-main-and-tests">The application main and tests</h2>
<p>That&rsquo;s it ! Now you can run your project with this main class :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SpringStandaloneChainApp</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> String CONFIG_PACKAGE <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;com.geowarin.spring.config&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">main</span>(String<span style="color:#ff6ac1">[]</span> args) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">try</span> (AnnotationConfigApplicationContext ctx <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> AnnotationConfigApplicationContext()) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			ctx.<span style="color:#57c7ff">scan</span>(CONFIG_PACKAGE);
</span></span><span style="display:flex;"><span>			ctx.<span style="color:#57c7ff">refresh</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			MainBean bean <span style="color:#ff6ac1">=</span> ctx.<span style="color:#57c7ff">getBean</span>(MainBean.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>			bean.<span style="color:#57c7ff">start</span>();
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And unit test the service with spring-test like that :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@RunWith</span>(SpringJUnit4ClassRunner.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ContextConfiguration</span>(classes <span style="color:#ff6ac1">=</span> { SpringStandalonChainConfig.<span style="color:#57c7ff">class</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">ChainServiceTest</span> <span style="color:#ff5c57">extends</span> TestCase {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> ChainService chainService;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testHandledByFirst</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		ChainContext chainContext <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ChainContext(<span style="color:#ff6ac1">true</span>, <span style="color:#ff6ac1">false</span>);
</span></span><span style="display:flex;"><span>		chainService.<span style="color:#57c7ff">executeChain</span>(chainContext);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertTrue</span>(chainContext.<span style="color:#57c7ff">isHandledByFirst</span>());
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertFalse</span>(chainContext.<span style="color:#57c7ff">isHandledBySecond</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testHandledBySecond</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		ChainContext chainContext <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ChainContext(<span style="color:#ff6ac1">false</span>, <span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>		chainService.<span style="color:#57c7ff">executeChain</span>(chainContext);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertFalse</span>(chainContext.<span style="color:#57c7ff">isHandledByFirst</span>());
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertTrue</span>(chainContext.<span style="color:#57c7ff">isHandledBySecond</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Spring is perfectly suitable for a Java SE Environment. Its new java configuration is very handy and powerful as long as you keep things tidy and make sure the configuration is not spread across the whole project.
Finally, let&rsquo;s note it is possible to inject all components or services implementing a given interface into a list with the `@Autowired annotation.</p>
]]></content:encoded></item></channel></rss>