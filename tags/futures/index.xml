<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>futures on Geowarin</title><link>https://geowarin.com/tags/futures/</link><description>Recent content in futures on Geowarin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 12 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://geowarin.com/tags/futures/index.xml" rel="self" type="application/rss+xml"/><item><title>Completable futures with Spring async</title><link>https://geowarin.com/completable-futures-with-spring-async/</link><pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/completable-futures-with-spring-async/</guid><description>Use Java 8 new CompletableFuture with Spring async</description><content:encoded><![CDATA[<p>Since version 8, java has a way better abstraction than <code>java.util.Future</code>
called <code>CompletableFuture</code>.
This new API along with the lambdas enables new ways of reasoning with futures
by composing, listening and joining them.</p>
<p>Futures are traditionally created by submitting tasks to an <code>Executor</code>.
Spring allows declaring one or multiple executors and will submit any method
annotated with <code>@Async</code> as tasks for those executors.</p>
<p>The big problem is that executors still return <code>Future</code>s and not <code>CompletableFuture</code>s.</p>
<p>We are going to create our own Executor to solve this problem.
Then we will study a solution to handle timeouts with those futures and
as a bonus, do a little bit of AOP to debug our threads.</p>
<p>You can see the resulting application <a href="https://github.com/geowarin/spring-completable">on my gihtub</a>.</p>
<h2 id="creating-an-executor-for-completablefutures">Creating an Executor for CompletableFutures</h2>
<p>If you try to return a <code>CompletableFuture</code> from an Async method in Spring,
you will get the following error:</p>
<pre tabindex="0"><code>Caused by: java.lang.ClassCastException: java.util.concurrent.FutureTask cannot be cast to java.util.concurrent.CompletableFuture
</code></pre><p>The idea is to use delegation to decorate an existing instance of <code>ExecutorService</code>.
We will implement the <code>ExecutorService</code> and use type covariance to return
<code>CompletableFuture</code>s instead of <code>Future</code>.</p>
<p>The following code has been greatly inspired by this <a href="http://binkley.blogspot.fr/2014/12/completablefuture-and-executorservice.html">blog post</a>. Many thanks to Brian Oxley!</p>
<p>So the first thing we need to do is to create a decorator for an executor service
and delegate every method to that service:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">static</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DelegatingExecutorService</span> <span style="color:#ff5c57">implements</span> ExecutorService {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> ExecutorService delegate;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">DelegatingExecutorService</span>(ExecutorService executorService) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">delegate</span> <span style="color:#ff6ac1">=</span> executorService;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> Future<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Callable<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> task) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> delegate.<span style="color:#57c7ff">submit</span>(task);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> Future<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Runnable task, T result) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> delegate.<span style="color:#57c7ff">submit</span>(task, result);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">// Override and delegate everything</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can create an interface that will extends <code>ExecutorService</code> and return
<code>CompletableFuture</code>s instead of <code>Future</code>s:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * DelegatingCompletableExecutorService {@code ExecutorService} to covariantly return {@code
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * CompletableFuture} in place of {@code Future}.
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">interface</span> <span style="color:#f3f99d">CompletableExecutorService</span> <span style="color:#ff5c57">extends</span> ExecutorService {
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * @return a completable future representing pending completion of the
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * task, never missing
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Callable<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> task);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * @return a completable future representing pending completion of the
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * task, never missing
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Runnable task, T result);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * @return a completable future representing pending completion of the
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * task, never missing
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> CompletableFuture<span style="color:#ff6ac1">&lt;?&gt;</span> submit(Runnable task);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can then implement this new interface using our decorator as a base:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">static</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DelegatingCompletableExecutorService</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">extends</span> DelegatingExecutorService
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">implements</span> CompletableExecutorService {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     DelegatingCompletableExecutorService(ExecutorService threads) {
</span></span><span style="display:flex;"><span>         <span style="color:#ff5c57">super</span>(threads);
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Callable<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> task) {
</span></span><span style="display:flex;"><span>         <span style="color:#ff5c57">final</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> cf <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> CompletableFuture<span style="color:#ff6ac1">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>         delegate.<span style="color:#57c7ff">submit</span>(() <span style="color:#ff6ac1">-&gt;</span> {
</span></span><span style="display:flex;"><span>             <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>                 cf.<span style="color:#57c7ff">complete</span>(task.<span style="color:#57c7ff">call</span>());
</span></span><span style="display:flex;"><span>             } <span style="color:#ff6ac1">catch</span> (CancellationException e) {
</span></span><span style="display:flex;"><span>                 cf.<span style="color:#57c7ff">cancel</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>             } <span style="color:#ff6ac1">catch</span> (Exception e) {
</span></span><span style="display:flex;"><span>                 cf.<span style="color:#57c7ff">completeExceptionally</span>(e);
</span></span><span style="display:flex;"><span>             }
</span></span><span style="display:flex;"><span>         });
</span></span><span style="display:flex;"><span>         <span style="color:#ff6ac1">return</span> cf;
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Runnable task, T result) {
</span></span><span style="display:flex;"><span>         <span style="color:#ff6ac1">return</span> submit(callable(task, result));
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> CompletableFuture<span style="color:#ff6ac1">&lt;?&gt;</span> submit(Runnable task) {
</span></span><span style="display:flex;"><span>         <span style="color:#ff6ac1">return</span> submit(callable(task));
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We also need to create an utility method to create a <code>CompletableExecutorService</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> CompletableExecutorService <span style="color:#57c7ff">completable</span>(ExecutorService delegate) {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> DelegatingCompletableExecutorService(delegate);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>See <a href="https://gist.github.com/geowarin/bc40acd46791aa114c30">this gist</a> for the final result.</p>
<h2 id="creating-an-async-service">Creating an async service</h2>
<p>To enable asynchronous methods in Spring, you will need this kind of configuration
class:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableAsync</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SpringAsyncConfig</span> <span style="color:#ff5c57">implements</span> AsyncConfigurer {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> <span style="color:#ff5c57">final</span> Log logger <span style="color:#ff6ac1">=</span> LogFactory.<span style="color:#57c7ff">getLog</span>(getClass());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> Executor <span style="color:#57c7ff">getAsyncExecutor</span>() {
</span></span><span style="display:flex;"><span>        ThreadFactory threadFactory <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ThreadFactoryBuilder().<span style="color:#57c7ff">setNameFormat</span>(<span style="color:#5af78e">&#34;async-%d&#34;</span>).<span style="color:#57c7ff">build</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> CompletableExecutors.<span style="color:#57c7ff">completable</span>(Executors.<span style="color:#57c7ff">newFixedThreadPool</span>(10, threadFactory));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> AsyncUncaughtExceptionHandler <span style="color:#57c7ff">getAsyncUncaughtExceptionHandler</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> (ex, method, params) <span style="color:#ff6ac1">-&gt;</span> logger.<span style="color:#57c7ff">error</span>(<span style="color:#5af78e">&#34;Uncaught async error&#34;</span>, ex);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>As you can see, we can specify which executor will handle our <code>@Async</code> methods.</p>
<p>We can now return <code>CompletableFuture</code>s from our services!</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">AsyncService</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> String<span style="color:#ff6ac1">[]</span> greetings <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> String<span style="color:#ff6ac1">[]</span>{
</span></span><span style="display:flex;"><span>            <span style="color:#5af78e">&#34;hallo&#34;</span>, <span style="color:#5af78e">&#34;hallo&#34;</span>, <span style="color:#5af78e">&#34;hej&#34;</span>, <span style="color:#5af78e">&#34;hej&#34;</span>, <span style="color:#5af78e">&#34;bonjour&#34;</span>, <span style="color:#5af78e">&#34;hola&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#5af78e">&#34;ciao&#34;</span>, <span style="color:#5af78e">&#34;shalom&#34;</span>, <span style="color:#5af78e">&#34;fáilte&#34;</span>, <span style="color:#5af78e">&#34;kaixo&#34;</span>, <span style="color:#5af78e">&#34;konnichiwa&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#5af78e">&#34;saluton&#34;</span>, <span style="color:#5af78e">&#34;päivää&#34;</span>, <span style="color:#5af78e">&#34;selamat pagi&#34;</span>, <span style="color:#5af78e">&#34;gut de&#34;</span>, <span style="color:#5af78e">&#34;olá&#34;</span>
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Async</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>String<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">asyncGreeting</span>() {
</span></span><span style="display:flex;"><span>        AsyncUtil.<span style="color:#57c7ff">randomSleep</span>(3000, TimeUnit.<span style="color:#57c7ff">MILLISECONDS</span>);
</span></span><span style="display:flex;"><span>        String result <span style="color:#ff6ac1">=</span> AsyncUtil.<span style="color:#57c7ff">getThreadName</span>() <span style="color:#ff6ac1">+</span> <span style="color:#5af78e">&#34; - &#34;</span> <span style="color:#ff6ac1">+</span> random(greetings);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> CompletableFuture.<span style="color:#57c7ff">completedFuture</span>(result);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@SafeVarargs</span> <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">final</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> T <span style="color:#57c7ff">random</span>(T... elements) {
</span></span><span style="display:flex;"><span>        LinkedList<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> greetings <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> LinkedList<span style="color:#ff6ac1">&lt;&gt;</span>(Arrays.<span style="color:#57c7ff">asList</span>(elements));
</span></span><span style="display:flex;"><span>        Collections.<span style="color:#57c7ff">shuffle</span>(greetings, ThreadLocalRandom.<span style="color:#57c7ff">current</span>());
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> greetings.<span style="color:#57c7ff">getFirst</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here is the <code>AsyncUtil</code> class in case you are wondering what&rsquo;s going on:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">AsyncUtil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">randomSleep</span>(<span style="color:#9aedfe">int</span> duration, TimeUnit timeUnit) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>            timeUnit.<span style="color:#57c7ff">sleep</span>(ThreadLocalRandom.<span style="color:#57c7ff">current</span>().<span style="color:#57c7ff">nextInt</span>(duration));
</span></span><span style="display:flex;"><span>        } <span style="color:#ff6ac1">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>            Throwables.<span style="color:#57c7ff">propagate</span>(e);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> String <span style="color:#57c7ff">getThreadName</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> Thread.<span style="color:#57c7ff">currentThread</span>().<span style="color:#57c7ff">getName</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Our service will say hello in a random language within 3 seconds of time.
How do we handle the result?</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">Runner</span> <span style="color:#ff5c57">implements</span> CommandLineRunner {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> AsyncService asyncService;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">run</span>(String... args) <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        IntStream.<span style="color:#57c7ff">rangeClosed</span>(1, 10)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">mapToObj</span>(__ <span style="color:#ff6ac1">-&gt;</span> asyncService.<span style="color:#57c7ff">asyncGreeting</span>().<span style="color:#57c7ff">exceptionally</span>(Throwable::getMessage))
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">forEach</span>(<span style="color:#ff6ac1">this</span>::printResult);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">printResult</span>(CompletableFuture<span style="color:#ff6ac1">&lt;</span>String<span style="color:#ff6ac1">&gt;</span> future) {
</span></span><span style="display:flex;"><span>        future.<span style="color:#57c7ff">thenRun</span>(() <span style="color:#ff6ac1">-&gt;</span> System.<span style="color:#57c7ff">out</span>.<span style="color:#57c7ff">println</span>(future.<span style="color:#57c7ff">join</span>()));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>My what a beauty! In the above class, we create a stream of ten elements
to call our async service ten times, make sure that we handle exceptions and
print each result on the console.</p>
<p>Please, notice that <strong>nothing is blocking</strong> in the above code.
The <code>join()</code> method will wait for a result but since we are calling it in a
callback after completion, we get a fully asynchronous code.</p>
<p>This code will produce the following output, printing each lines at different
timings:</p>
<pre tabindex="0"><code>async-7 - gut de
async-5 - konnichiwa
async-4 - hallo
async-2 - hallo
async-6 - saluton
async-1 - fáilte
async-9 - päivää
async-0 - hej
async-8 - hallo
async-3 - saluton
</code></pre><h2 id="handling-timeouts">Handling timeouts</h2>
<p>An interesting question with future is how to set a timeout and cancel them
if they run late.</p>
<p>My solution is to create another executor like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">static</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">TimeOutExecutorService</span> <span style="color:#ff5c57">extends</span> CompletableExecutors.<span style="color:#57c7ff">DelegatingCompletableExecutorService</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> Duration timeout;
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> ScheduledExecutorService schedulerExecutor;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    TimeOutExecutorService(ExecutorService delegate, Duration timeout) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">super</span>(delegate);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">timeout</span> <span style="color:#ff6ac1">=</span> timeout;
</span></span><span style="display:flex;"><span>        schedulerExecutor <span style="color:#ff6ac1">=</span> Executors.<span style="color:#57c7ff">newScheduledThreadPool</span>(1);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Callable<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> task) {
</span></span><span style="display:flex;"><span>        CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> cf <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> CompletableFuture<span style="color:#ff6ac1">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        Future<span style="color:#ff6ac1">&lt;?&gt;</span> future <span style="color:#ff6ac1">=</span> delegate.<span style="color:#57c7ff">submit</span>(() <span style="color:#ff6ac1">-&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>                cf.<span style="color:#57c7ff">complete</span>(task.<span style="color:#57c7ff">call</span>());
</span></span><span style="display:flex;"><span>            } <span style="color:#ff6ac1">catch</span> (CancellationException e) {
</span></span><span style="display:flex;"><span>                cf.<span style="color:#57c7ff">cancel</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>            } <span style="color:#ff6ac1">catch</span> (Throwable ex) {
</span></span><span style="display:flex;"><span>                cf.<span style="color:#57c7ff">completeExceptionally</span>(ex);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        schedulerExecutor.<span style="color:#57c7ff">schedule</span>(() <span style="color:#ff6ac1">-&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">if</span> (<span style="color:#ff6ac1">!</span>cf.<span style="color:#57c7ff">isDone</span>()) {
</span></span><span style="display:flex;"><span>                cf.<span style="color:#57c7ff">completeExceptionally</span>(<span style="color:#ff6ac1">new</span> TimeoutException(<span style="color:#5af78e">&#34;Timeout after &#34;</span> <span style="color:#ff6ac1">+</span> timeout));
</span></span><span style="display:flex;"><span>                future.<span style="color:#57c7ff">cancel</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }, timeout.<span style="color:#57c7ff">toMillis</span>(), TimeUnit.<span style="color:#57c7ff">MILLISECONDS</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> cf;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This implementation was inspired by <a href="http://stackoverflow.com/questions/23575067/timeout-with-default-value-in-java-8-completablefuture/24457111#24457111">a discussion</a> on stackoverflow.</p>
<p>We can now create a new executor as a Spring bean:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Bean</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;timed&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> Executor <span style="color:#57c7ff">timeoutExecutor</span>() {
</span></span><span style="display:flex;"><span>    ThreadFactory threadFactory <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ThreadFactoryBuilder().<span style="color:#57c7ff">setNameFormat</span>(<span style="color:#5af78e">&#34;timed-%d&#34;</span>).<span style="color:#57c7ff">build</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> TimedCompletables.<span style="color:#57c7ff">timed</span>(Executors.<span style="color:#57c7ff">newFixedThreadPool</span>(10, threadFactory), Duration.<span style="color:#57c7ff">ofSeconds</span>(2));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>An use it like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Async</span>(<span style="color:#5af78e">&#34;timed&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>String<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">asyncTimeoutGreeting</span>() {
</span></span><span style="display:flex;"><span>    AsyncUtil.<span style="color:#57c7ff">randomSleep</span>(3000, TimeUnit.<span style="color:#57c7ff">MILLISECONDS</span>);
</span></span><span style="display:flex;"><span>    String result <span style="color:#ff6ac1">=</span> AsyncUtil.<span style="color:#57c7ff">getThreadName</span>() <span style="color:#ff6ac1">+</span> <span style="color:#5af78e">&#34; - &#34;</span> <span style="color:#ff6ac1">+</span> random(greetings);
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> CompletableFuture.<span style="color:#57c7ff">completedFuture</span>(result);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now if we run the application again, about one third of the tasks will time out:</p>
<pre tabindex="0"><code>timed-4 - saluton
timed-3 - hallo
timed-7 - saluton
timed-8 - fáilte
timed-1 - saluton
timed-5 - hallo
Timeout after PT2S
Timeout after PT2S
Timeout after PT2S
Timeout after PT2S
</code></pre><h2 id="profiling-threads-with-aop">Profiling threads with AOP</h2>
<p>Let&rsquo;s add a dependency to <code>spring-boot-starter-aop</code> to automatically profile the
execution of our async methods:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Aspect</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">ServiceProfiler</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#ff9f43">@Pointcut</span>(<span style="color:#5af78e">&#34;execution(java.util.concurrent.CompletableFuture completable.service.*.*(..))&#34;</span>)
</span></span><span style="display:flex;"><span>   <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">serviceMethods</span>() {
</span></span><span style="display:flex;"><span>   }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#ff9f43">@Around</span>(<span style="color:#5af78e">&#34;serviceMethods()&#34;</span>)
</span></span><span style="display:flex;"><span>   <span style="color:#ff5c57">public</span> Object <span style="color:#57c7ff">profile</span>(ProceedingJoinPoint pjp) <span style="color:#ff5c57">throws</span> Throwable {
</span></span><span style="display:flex;"><span>       StopWatch stopWatch <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> StopWatch();
</span></span><span style="display:flex;"><span>       stopWatch.<span style="color:#57c7ff">start</span>();
</span></span><span style="display:flex;"><span>       Object output <span style="color:#ff6ac1">=</span> pjp.<span style="color:#57c7ff">proceed</span>();
</span></span><span style="display:flex;"><span>       stopWatch.<span style="color:#57c7ff">stop</span>();
</span></span><span style="display:flex;"><span>       <span style="color:#ff6ac1">if</span> (output <span style="color:#ff6ac1">instanceof</span> CompletableFuture) {
</span></span><span style="display:flex;"><span>           CompletableFuture future <span style="color:#ff6ac1">=</span> (CompletableFuture) output;
</span></span><span style="display:flex;"><span>           String debug <span style="color:#ff6ac1">=</span> String.<span style="color:#57c7ff">format</span>(<span style="color:#5af78e">&#34;(%d ms)&#34;</span>, stopWatch.<span style="color:#57c7ff">getTotalTimeMillis</span>());
</span></span><span style="display:flex;"><span>           future.<span style="color:#57c7ff">thenAccept</span>(o <span style="color:#ff6ac1">-&gt;</span> System.<span style="color:#57c7ff">out</span>.<span style="color:#57c7ff">println</span>(o <span style="color:#ff6ac1">+</span> <span style="color:#5af78e">&#34; - &#34;</span> <span style="color:#ff6ac1">+</span> debug));
</span></span><span style="display:flex;"><span>       }
</span></span><span style="display:flex;"><span>       <span style="color:#ff6ac1">return</span> output;
</span></span><span style="display:flex;"><span>   }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is a bit unnecessary but I used one of the callbacks of <code>CompletableFuture</code>
to display the profiling message :)</p>
<h2 id="conclusion">Conclusion</h2>
<p>Java 8 <code>CompletableFuture</code>s provide an awesome API to deal with async
tasks. Too bad that no Executor is able to create them without a bit of code
on our part.</p>
<p>I&rsquo;m not a concurrency expert so please tell me what you think of this solution
in the comments.</p>
]]></content:encoded></item></channel></rss>