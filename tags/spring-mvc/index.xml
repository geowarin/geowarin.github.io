<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Spring-Mvc on Geowarin</title><link>https://geowarin.com/tags/spring-mvc/</link><description>Recent content in Spring-Mvc on Geowarin</description><generator>Hugo -- 0.138.0</generator><language>en</language><lastBuildDate>Sat, 13 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://geowarin.com/tags/spring-mvc/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter 1 - Setting up a Spring web application in no time</title><link>https://geowarin.com/book/chapter-1-setting-up-a-spring-web-application-in-no-time.html</link><pubDate>Sun, 01 Mar 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-1-setting-up-a-spring-web-application-in-no-time.html</guid><description>In the first chapter, you will learn how to bootstrap your application effectively and how to leverage spring boot to get started with spring MVC in a couple of minutes</description><content:encoded><![CDATA[<p>I just finished writing the first chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a>.
That was a lot of fun. I enjoyed sharing the tips and tricks that I use when I bootstrap a Spring application.</p>
<p>In this first chapter, you will learn how to get started with spring MVC in a snap.</p>
<h2 id="know-thy-tools">Know thy tools</h2>
<p>Have you heard of <a href="https://spring.io/tools/sts">Spring Tool Suite</a>? Do you know <a href="http://start.spring.io/">start.spring.io</a>?
Did you know you could actually <em>curl</em> <a href="http://start.spring.io/">start.spring.io</a>?</p>
<p>You will learn all that and much more in this action-packed first chapter!</p>
<h2 id="the-power-of-spring-boot">The power of Spring Boot</h2>
<p>Did you know spring boot actually does a <strong>lot</strong> of things for us?</p>
<ol>
<li>Initializing the <em>DispatcherServlet</em> of Spring MVC</li>
<li>Setting up an encoding filter, which will enforce correct encoding of clients&rsquo; requests</li>
<li>Setting up a view resolver to tell Spring where to find our views</li>
<li>Configuring static resources locations (css, js)</li>
<li>Configuring supported locales and resource bundles</li>
<li>Configuring a multipart resolver for file uploads to work</li>
<li>Including tomcat or jetty to run our application on a web server</li>
<li>Setting up error pages (404, etc)</li>
</ol>
<p>The first chapter walks you through Spring Boot&rsquo;s code to explain how it works and how to customize the default configurations.</p>
<p>A big thank you to <a href="https://twitter.com/phillip_webb">Phillip Webb</a>, co-lead of Spring Boot for helping me and my editor sort
out potential licensing issues when quoting Spring Boot&rsquo;s code. If you&rsquo;re interested, the code is under <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache license</a>
and allows reproduction under the conditions listed in paragraph 4.</p>
<p>Well guys, good talking to you but I&rsquo;d better get back to writing chapter two, which is about the MVC architecture and Spring MVC views and navigation.</p>
]]></content:encoded></item><item><title>Chapter 2 - Mastering the MVC Architecture</title><link>https://geowarin.com/book/chapter-2-mastering-the-mvc-architecture.html</link><pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-2-mastering-the-mvc-architecture.html</guid><description>In the second chapter, we will design a twitter search engine, learning the principles of MVC and DDD along the way.</description><content:encoded><![CDATA[<p>I was so busy writing the third chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a>, I did not take the time to write about chapter 2.</p>
<p>In this outstanding chapter you will learn the principles of the <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC Architecture</a>.
We will also be discussing good practices, the basis of Domain Driven Design and the trade-offs this kind of design imply on a Spring MVC architecture.</p>
<p>A good read on the subject is available on <a href="http://www.petrikainulainen.net/software-development/design/the-biggest-flaw-of-spring-web-applications/">Petri Kainulainen&rsquo;s blog</a>.</p>
<p>You will then set up Spring Boot to work with  <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html">Thyemleaf</a>, the benefits of this good templating engine and how to leverage it effectively in your
MVC application.</p>
<p>In 5 minutes, I will walk you through the process of registering your application on twitter and we will be designing a little but beautiful
tweet search engine using <a href="http://projects.spring.io/spring-social-twitter/">Spring Social Twitter</a>:</p>
<p><img alt="Search" loading="lazy" src="/assets/images/book/chap2-1.png" title="Search field"></p>
<p><img alt="Results" loading="lazy" src="/assets/images/book/chap2-2.png" title="Results"></p>
<p>This will give us the opportunity to discuss the navigation in a web application, java 8 streams system, the <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html">Spring Expression Language</a>,
material design, web jars and much more!</p>
<p>At the end of the chapter you will have laid the foundations of the web application that we will deploy on the cloud later and that will make you rich and famous!</p>
<p>I hope you will find the content of this chapter interesting, let me know your thoughts in the comments!</p>
]]></content:encoded></item><item><title>Chapter 3 - Handling forms and complex URL mapping</title><link>https://geowarin.com/book/chapter-3-handling-forms-and-complex-url-mapping.html</link><pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-3-handling-forms-and-complex-url-mapping.html</guid><description>In this chapter, we will create a beautiful profile form with server and client side validation</description><content:encoded><![CDATA[<p>The third chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a> is about the cornerstone of web application: forms.
Oh boy, what a chapter.</p>
<p>In this epic piece of literature, we will create a complete profile form like this one:</p>
<p><img alt="A beautiful profile form" loading="lazy" src="/assets/images/book/chap3-1.png" title="Profile form"></p>
<p>We will discuss forms, validation, conversion and formatting.</p>
<p>See the birth date field up there? That&rsquo;s a <code>java.time.LocalDate</code>.
Do you wonder how to make it work with Spring MVC?</p>
<p>Our application will be available in different languages and it will be easy to
switch between them.</p>
<p>We will also be looking at a simple way to validate the form on the client side
thanks to the available <a href="http://diveintohtml5.info/forms.html#validation">HTML 5 specification</a>.</p>
<p>That&rsquo;s not all, you might have noticed that we ask the user to fill out a list of tastes, things that interest him.
That&rsquo;s because we will allow searches on multiple keywords with <a href="http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-matrix-variables">matrix variables</a>.</p>
<p>Sounds good? I hope it does and can&rsquo;t wait for the moment when you will be able to get your hands on the book!</p>
]]></content:encoded></item><item><title>Chapter 4 - File Upload and Error Handling</title><link>https://geowarin.com/book/chapter-4-file-upload-error-handling.html</link><pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-4-file-upload-error-handling.html</guid><description>In this chapter, we will implement file upload and see how to handle errors in Spring MVC</description><content:encoded><![CDATA[<p>In the fourth chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a>
We will allow the user to upload his profile picture.</p>
<p><img alt="Woah, such file upload!" loading="lazy" src="/assets/images/book/chap3-1.png" title="File upload"></p>
<p>The file upload component implies handling errors at two levels:
I/O exceptions at the controller level and multipart exception (a file too big, for instance) at the container level.</p>
<p>If your curious about this part take a look at this <a href="http://stackoverflow.com/questions/29363705/handling-multipartexception-with-spring-boot-and-display-error-page">stackoverflow question</a>.</p>
<p>This will give us the opportunity to discuss error handling in Spring MVC and Spring boot.</p>
<p><img alt="A beautiful 404 page" loading="lazy" src="/assets/images/book/chap4-3.png" title="Not found"></p>
<p>Can&rsquo;t wait to hear what you think about this chapter!</p>
]]></content:encoded></item><item><title>Chapter 5 - Crafting a RESTful application</title><link>https://geowarin.com/book/chapter-5-crafting-a-restful-application.html</link><pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-5-crafting-a-restful-application.html</guid><description>In this chapter, we will have a look a the principles of RESTful API and learn how to craft one using Spring MVC</description><content:encoded><![CDATA[<p>In this chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a>, we’ll tackle main principles of a RESTful architecture. We’ll learn how to convert data to JSON and handle different media types in the application.</p>
<p>We will use the JSR-310 (Java DateTime) spec from the get-go and see how
to handle them properly in your MVC application.</p>
<h2 id="forever-restful">Forever RESTful</h2>
<p>We will see how REST works in theory: HTTP codes and verbs, API versioning, HATEOAS, etc.</p>
<p>Then, we will design an API that uses both JSON and XML to do a twitter search
and manage users.</p>
<p><img alt="API" loading="lazy" src="/assets/images/book/chap4-1.png" title="API"></p>
<h2 id="tooling">Tooling</h2>
<p>I will also show you some useful tools to debug REST API.
My favorite one is a little command line tool called <a href="http://httpie.org/">httpie</a>.</p>
<p>You will study the best practice like exceptions handling and custom
error pages.</p>
<p>We will also see how to set up Jackson serialization using mixins and Java 8 dates.</p>
<h2 id="documentation">Documentation</h2>
<p>We will use <a href="http://swagger.io/">swagger</a> to document our API.</p>
<p><img alt="Swagger" loading="lazy" src="/assets/images/book/chap4-2.png" title="Swagger"></p>
<p>I hope you will find the content of this chapter interesting, let me know your thoughts in the comments!</p>
]]></content:encoded></item><item><title>Chapter 6 - Securing your application</title><link>https://geowarin.com/book/chapter-6-securing-your-application.html</link><pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-6-securing-your-application.html</guid><description>In this chapter, we’ll learn how to secure our web application and also how to cope with the security challenges of modern, distributed web applications.</description><content:encoded><![CDATA[<p>In this chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a>, we’ll learn how to secure our web application and also how to cope with the security challenges of modern, distributed web applications.</p>
<p>This is a parts chapter:</p>
<ol>
<li>First, we will set up basic HTTP authentication in a minute</li>
<li>Then, we will design a form-based authentication for the web pages, keeping
the basic authentication for the REST API</li>
<li>We will allow the users to signup via the Twitter OAuth API</li>
<li>Then, we will leverage Spring Session to make sure our application can scale
using a distributed session mechanism</li>
<li>Last, we will configure Tomcat to use secured connection through SSL</li>
</ol>
<p><img alt="BasicAuth" loading="lazy" src="/assets/images/book/chap6-1.png" title="Basic Auth"></p>
<h2 id="safe-and-sound">Safe and sound</h2>
<p>At the end of this chapter you will be a security expert.
We will protect our REST API with basic auth, which is secure as well as easy
to interact with.</p>
<p>We will also design a gorgeous login page for our web application:</p>
<p><img alt="Login" loading="lazy" src="/assets/images/book/chap6-2.png" title="Login page"></p>
<h2 id="going-social">Going social</h2>
<p>My favorite part in this chapter is when we use <a href="http://projects.spring.io/spring-social/">Spring Social</a> to allow users to log-in using
their twitter account!</p>
<p><img alt="TwitterLogin" loading="lazy" src="/assets/images/book/chap6-3.png" title="Twitter login"></p>
<h2 id="infinite-scaling">Infinite scaling</h2>
<p>We will use <a href="http://projects.spring.io/spring-session/">Spring Session</a>
to put our users&rsquo; sessions into <a href="http://redis.io/">Redis</a> with little configuration.</p>
<p>This will allow us to add more servers to handle high traffic without worrying
about sticky sessions.</p>
<h2 id="ssl">SSL</h2>
<p>In the end, we will see how to use SSL with tomcat.</p>
<p>I hope you will find the content of this chapter interesting, let me know your thoughts in the comments!</p>
]]></content:encoded></item><item><title>Chapter 7 - Leaving nothing to luck with unit and acceptance tests</title><link>https://geowarin.com/book/chapter-7-unit-and-acceptance-tests.html</link><pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-7-unit-and-acceptance-tests.html</guid><description>In this chapter we will learn how to test our application with spring test and fluentlenium as well as with geb and spock.</description><content:encoded><![CDATA[<p>In this chapter, we will make sure our application never regresses thanks to a
handful of unit tests.</p>
<h2 id="to-test-or-not-to-test">To test or not to test?</h2>
<p>Chapter 5 is by far my favorite chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a>!</p>
<p>In this uplifting piece of literature, you will learn more about testing best
practices: TDD, the pyramid of tests, unit tests and end-to-end tests.</p>
<p><img alt="RedGreen" loading="lazy" src="/assets/images/book/chap5-1.png" title="Red green refactor"></p>
<p>We will see the difference behind mocking and stubbing and use mockito and
the power of Spring&rsquo;s IOC to study both options.</p>
<p>With <code>spring-mvc-test</code> we will create unit test for our web controllers as well
as our REST controllers.</p>
<h2 id="acceptance-tests">Acceptance tests</h2>
<p>Using <a href="https://github.com/FluentLenium/FluentLenium">fluentlenium</a>, we will create
simple yet powerful end-to-end tests leveraging Selenium.</p>
<p>I will tell you what the Page Object pattern is and how to use it with fluentlenium.</p>
<p>You will see how to configure Gradle to create a task for our acceptance tests
and generate reports for this task.</p>
<h2 id="making-it-groovy">Making it groovy</h2>
<p>At the end of the chapter I will show you how to make your tests even better and
more readable with <a href="https://github.com/spockframework/spock">Spock</a>.</p>
<p>Then we will use <a href="http://www.gebish.org/">Geb</a>, a wonderful library used by the grails
community to design acceptance tests on top of WebDriver.</p>
<p>I hope you will find the content of this chapter interesting, let me know your thoughts in the comments!</p>
]]></content:encoded></item><item><title>Chapter 8 - Optimizing your requests</title><link>https://geowarin.com/book/chapter-8-optimizing-your-requests.html</link><pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-8-optimizing-your-requests.html</guid><description>In this chapter we will be looking at different techniques to improve our application&amp;#39;s performances using cache, gzipping, etags, async and websockets</description><content:encoded><![CDATA[<p>In this chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a>, we will
implement classic ways of optimizing a web application: cache
control headers and Gzipping.</p>
<p>We will also use Spring&rsquo;s cache abstraction and <a href="https://en.wikipedia.org/wiki/HTTP_ETag">ETags</a>.</p>
<h2 id="more-threads-please">More threads, please</h2>
<p>You will learn how to create asynchronous services with Spring Async.</p>
<p>Spring Async is a nice part of Spring, if you want to dig deeper
see [this article]({% post_url 2015-06-12-completable-futures-with-spring-async %})
where we use Java 8 <code>CompletableFuture</code>s to create a multithreaded application.</p>
<h2 id="websockets">Websockets</h2>
<p>To finish, we will enter the reactive stuff and learn how to use websockets with
<a href="http://sockjs.org">sockjs</a>.</p>
<p>I hope you will find the content of this chapter interesting, let me know your thoughts in the comments!</p>
]]></content:encoded></item><item><title>Chapter 9 - Deploying to the cloud</title><link>https://geowarin.com/book/chapter-9-deploying-to-the-cloud.html</link><pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-9-deploying-to-the-cloud.html</guid><description>In this chapter, we’ll take a tour of the different cloud providers, understand the challenges and benefits of a distributed architecture and we’ll deploy our web application on Heroku.</description><content:encoded><![CDATA[<p>In this chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a>, you will deploy your application on the cloud and invite the whole world to see!</p>
<p>We will see how to deploy our application on two popular PaaS: Cloud Foundry and
Heroku.</p>
<p>A big thank you to Wayne Lund at Pivotal who wrote the <a href="https://run.pivotal.io/">Pivotal Web Services</a> part!</p>
<p><img alt="Our login page on Heroku!" loading="lazy" src="/assets/images/book/chap8-1.png" title="Login page"></p>
<h2 id="know-your-options">Know your options</h2>
<p>We will have a look at the different PaaS providers, then I will guide you through the steps of deploying your application on Cloud Foundry and Heroku.</p>
<p>We will use Redis to distribute our sessions as well as our application cache
and prepare our application to handle thousands of requests without spending a single penny!</p>
<h2 id="im-not-bluffing">I&rsquo;m not bluffing</h2>
<p>I already deployed my application on <a href="http://masterspringmvc.herokuapp.com/">Heroku</a>!</p>
<p>It&rsquo;s a free Heroku instance so you might have to wait 30 seconds for it to go
out of sleep.</p>
<p>As always, I hope you will find the content of this chapter interesting, let me know your thoughts in the comments!</p>
]]></content:encoded></item><item><title>Writing a book on Spring MVC 4</title><link>https://geowarin.com/book/writing-a-book-on-spring-mvc-4.html</link><pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/writing-a-book-on-spring-mvc-4.html</guid><description>I&amp;#39;m writing a book on Spring MVC 4 called &amp;#39;Mastering Spring MVC 4&amp;#39; for Packt Publishing</description><content:encoded><![CDATA[<p>Good news everyone!</p>
<p>After reviewing the awesome <a href="https://www.packtpub.com/application-development/learning-spring-boot">Learning Spring Boot</a> by <a href="https://twitter.com/gregturn">Greg Lee Turnquist</a>,
Packt Publishing asked me to write a book of my own on Spring MVC 4.</p>
<p>Of course I said! I just signed the contract and I&rsquo;m getting ready for five months of intense writing with a publishing date somewhere around
the last quarter of 2015.</p>
<p>I&rsquo;m glad to seize this opportunity to answer the questions you guys have been asking me after the publication of
[my article on spring MVC]({% post_url 2013-01-23-complete-example-of-a-spring-mvc-3-2-project %}) last year.</p>
<p>Here is a peek of the topics I will cover in the book:</p>
<p><strong>Master Spring MVC 4</strong></p>
<ol>
<li>Setting up a Spring web application in no time</li>
<li>Mastering the MVC Architecture</li>
<li>Handling forms and complex URL mapping</li>
<li>Crafting a RESTful application</li>
<li>Leaving nothing to luck: Unit tests and Acceptance Tests</li>
<li>Securing your application</li>
<li>Optimizing your requests</li>
<li>Deploying to the cloud</li>
<li>Beyond Spring Web</li>
</ol>
<p>I hope that you like the outline and that the book will help you achieve ultimate mastery of Spring MVC!</p>
<p>I created a section on the blog where you can <a href="/mastering-spring-mvc4.html">follow my progress</a>.</p>
]]></content:encoded></item><item><title>Complete example of a Spring MVC 3.2 project</title><link>https://geowarin.com/complete-example-of-a-spring-mvc-3.2-project/</link><pubDate>Wed, 23 Jan 2013 00:00:00 +0000</pubDate><guid>https://geowarin.com/complete-example-of-a-spring-mvc-3.2-project/</guid><description>Awesome spring mvc 3.2 starter with sitemesh, localization, UTF-8, boostrap and spring test mvc</description><content:encoded><![CDATA[<p>You want to get started with Spring MVC 3.2 with a complete XML-less configuration? Have a cool simple project with a lot of the nice-to-have features?</p>
<ol>
<li>A templating framework (we will use <a href="http://wiki.sitemesh.org/display/sitemesh/Home">SiteMesh</a> for this example - I think it is one of the simplest, most powerful frameworks out there)</li>
<li>Localized and custom text and validation messages with reloadable bundles in development</li>
<li>UTF-8 encoding filter for your user inputs</li>
<li>Use the <a href="http://twitter.github.com/bootstrap/">twitter boostrap</a> for a responsive, slick design</li>
<li>Unit tests of your controllers using <a href="https://github.com/SpringSource/spring-test-mvc">spring-test-mvc</a></li>
<li>Be able to run it with embedded tomcat or jetty maven plugins?</li>
</ol>
<p>Then you can directly git clone this project : <a href="https://github.com/geowarin/spring-mvc-examples/tree/master/mvc-base">https://github.com/geowarin/spring-mvc-examples/tree/master/mvc-base</a></p>
<p>This article will explain how this can be done with 5 classes and 1 jsp.</p>
<h2 id="the-configuration-with-spring-32-and-servlet-30">The configuration with spring 3.2 and servlet 3.0</h2>
<p>Since spring 3.1, it is possible to run spring MVC without a web.xml if you are in a servlet 3.0 environment. But spring 3.2 takes things a little bit further by providing a set of abstract classes to enable a <a href="http://static.springsource.org/spring-framework/docs/3.2.0.RELEASE/spring-framework-reference/html/mvc.html#mvc-container-config">very easy configuration</a>. Check this :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">WebInitializer</span> <span style="color:#ff5c57">extends</span> AbstractAnnotationConfigDispatcherServletInitializer {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">protected</span> Class<span style="color:#ff6ac1">&lt;?&gt;[]</span> getRootConfigClasses() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">null</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">protected</span> Class<span style="color:#ff6ac1">&lt;?&gt;[]</span> getServletConfigClasses() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> Class<span style="color:#ff6ac1">&lt;?&gt;[]</span> { WebConfig.<span style="color:#57c7ff">class</span> };
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">protected</span> String<span style="color:#ff6ac1">[]</span> <span style="color:#57c7ff">getServletMappings</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> String<span style="color:#ff6ac1">[]</span> { <span style="color:#5af78e">&#34;/&#34;</span> };
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">protected</span> Filter<span style="color:#ff6ac1">[]</span> <span style="color:#57c7ff">getServletFilters</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		CharacterEncodingFilter characterEncodingFilter <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> CharacterEncodingFilter();
</span></span><span style="display:flex;"><span>		characterEncodingFilter.<span style="color:#57c7ff">setEncoding</span>(<span style="color:#5af78e">&#34;UTF-8&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> Filter<span style="color:#ff6ac1">[]</span> { characterEncodingFilter, <span style="color:#ff6ac1">new</span> SiteMeshFilter()};
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The filters are not mandatory, it just demonstrates how to add them to this configuration (site mesh requires a small xml file to point to a template - it won&rsquo;t be covered by this article but check out the <a href="http://wiki.sitemesh.org/display/sitemesh/Start+Using+SiteMesh+in+10+Minutes">documentation</a> or have a look at this project on <a href="https://github.com/geowarin/spring-mvc-examples/tree/master/mvc-base">github</a>).</p>
<p>The UTF-8 filter will prevent encoding problems with your user inputs.</p>
<p>Spring MVC also requires a <strong>WebConfig</strong> class. This is the minimal one :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableWebMvc</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ComponentScan</span>(basePackages <span style="color:#ff6ac1">=</span> { <span style="color:#5af78e">&#34;com.geowarin.mvc.base.controller&#34;</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">WebConfig</span> <span style="color:#ff5c57">extends</span> WebMvcConfigurerAdapter {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">addResourceHandlers</span>(ResourceHandlerRegistry registry) {
</span></span><span style="display:flex;"><span>		registry.<span style="color:#57c7ff">addResourceHandler</span>(<span style="color:#5af78e">&#34;/resources/**&#34;</span>).<span style="color:#57c7ff">addResourceLocations</span>(<span style="color:#5af78e">&#34;/resources/&#34;</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> ViewResolver <span style="color:#57c7ff">viewResolver</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		InternalResourceViewResolver viewResolver <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> InternalResourceViewResolver();
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setViewClass</span>(JstlView.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setPrefix</span>(<span style="color:#5af78e">&#34;/WEB-INF/views&#34;</span>);
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setSuffix</span>(<span style="color:#5af78e">&#34;.jsp&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> viewResolver;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <strong>@ComponentScan</strong> annotation will indicate the package in which our controllers are found.
The <strong>ViewResolver</strong> bean will indicate both where our views can be found and what their extension is.</p>
<p>In this example for instance we will just have a simple view in <strong>/WEB-INF/views/home.jsp</strong>. The <strong>ResourceHandler</strong> indicates where our static resources can be found (css, js, images, etc.).</p>
<p>Here is our controller :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Controller</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">HomeController</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@RequestMapping</span>(value <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;/&#34;</span>, method <span style="color:#ff6ac1">=</span> RequestMethod.<span style="color:#57c7ff">GET</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">displayHome</span>(Model model) {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;/home&#34;</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>At this point, you can write &ldquo;hello&rdquo; in your home.jsp, launch a tomcat and enjoy our 3 classes spring MVC hello world. No web.xml, nothing else.</p>
<h2 id="interceptors-locales-messages">Interceptors, locales, messages</h2>
<p>Let me just show you the full configuration for our project :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableWebMvc</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ComponentScan</span>(basePackages <span style="color:#ff6ac1">=</span> { <span style="color:#5af78e">&#34;com.geowarin.mvc.base.controller&#34;</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">WebConfig</span> <span style="color:#ff5c57">extends</span> WebMvcConfigurerAdapter {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">addResourceHandlers</span>(ResourceHandlerRegistry registry) {
</span></span><span style="display:flex;"><span>		registry.<span style="color:#57c7ff">addResourceHandler</span>(<span style="color:#5af78e">&#34;/resources/**&#34;</span>).<span style="color:#57c7ff">addResourceLocations</span>(<span style="color:#5af78e">&#34;/resources/&#34;</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">addInterceptors</span>(InterceptorRegistry registry) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		LocaleChangeInterceptor localeChangeInterceptor <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> LocaleChangeInterceptor();
</span></span><span style="display:flex;"><span>		localeChangeInterceptor.<span style="color:#57c7ff">setParamName</span>(<span style="color:#5af78e">&#34;lang&#34;</span>);
</span></span><span style="display:flex;"><span>		registry.<span style="color:#57c7ff">addInterceptor</span>(localeChangeInterceptor);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> LocaleResolver <span style="color:#57c7ff">localeResolver</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		CookieLocaleResolver cookieLocaleResolver <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> CookieLocaleResolver();
</span></span><span style="display:flex;"><span>		cookieLocaleResolver.<span style="color:#57c7ff">setDefaultLocale</span>(StringUtils.<span style="color:#57c7ff">parseLocaleString</span>(<span style="color:#5af78e">&#34;en&#34;</span>));
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> cookieLocaleResolver;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> ViewResolver <span style="color:#57c7ff">viewResolver</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		InternalResourceViewResolver viewResolver <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> InternalResourceViewResolver();
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setViewClass</span>(JstlView.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setPrefix</span>(<span style="color:#5af78e">&#34;/WEB-INF/views&#34;</span>);
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setSuffix</span>(<span style="color:#5af78e">&#34;.jsp&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> viewResolver;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> MessageSource <span style="color:#57c7ff">messageSource</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		ReloadableResourceBundleMessageSource messageSource <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ReloadableResourceBundleMessageSource();
</span></span><span style="display:flex;"><span>		messageSource.<span style="color:#57c7ff">setBasenames</span>(<span style="color:#5af78e">&#34;classpath:messages/messages&#34;</span>, <span style="color:#5af78e">&#34;classpath:messages/validation&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// if true, the key of the message will be displayed if the key is not</span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// found, instead of throwing a NoSuchMessageException</span>
</span></span><span style="display:flex;"><span>		messageSource.<span style="color:#57c7ff">setUseCodeAsDefaultMessage</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>		messageSource.<span style="color:#57c7ff">setDefaultEncoding</span>(<span style="color:#5af78e">&#34;UTF-8&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// # -1 : never reload, 0 always reload</span>
</span></span><span style="display:flex;"><span>		messageSource.<span style="color:#57c7ff">setCacheSeconds</span>(0);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> messageSource;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <strong>localeInterceptor</strong> will provide a way to switch the language in any page just by passing the lang=&lsquo;en&rsquo;, lang=&lsquo;fr&rsquo;, and so on to your url.
The <strong>localeResolver</strong> will work with a simple cookie to memorize the user preference (you don&rsquo;t want to pass the lang argument through your whole site, do you?).</p>
<p>With the messageSource, you will get access to properties bundle usable in your web pages. Here it is configured to be developper friendly (always reload, no error).</p>
<p>These bundled can be localized. You can have as many as you want :</p>
<ul>
<li><strong>messages_en.properties</strong> for english language text</li>
<li><strong>message_fr.properties</strong> for french</li>
<li><strong>message_cn.properties</strong>, etc.</li>
</ul>
<h2 id="a-form-a-dto-some-validation">A form, a DTO, some validation</h2>
<p>Next we will show a very simple usage of a form to demonstrate the localized, custom validation messages.</p>
<p>In your home.jsp, write this code :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#ff6ac1">form:form</span> <span style="color:#57c7ff">id</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;form&#34;</span> <span style="color:#57c7ff">method</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;post&#34;</span> <span style="color:#57c7ff">modelAttribute</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;formDTO&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#ff6ac1">form:input</span> <span style="color:#57c7ff">path</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;messageFromUser&#34;</span> /&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#ff6ac1">form:errors</span> <span style="color:#57c7ff">path</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;messageFromUser&#34;</span> <span style="color:#57c7ff">cssClass</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;errorMessage&#34;</span> <span style="color:#57c7ff">element</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;div&#34;</span> /&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#ff6ac1">c:if</span> <span style="color:#57c7ff">test</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;${not empty message}&#34;</span>&gt;
</span></span><span style="display:flex;"><span>		&lt;<span style="color:#ff6ac1">div</span> <span style="color:#57c7ff">id</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;message&#34;</span> <span style="color:#57c7ff">class</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;alert alert-success&#34;</span>&gt;
</span></span><span style="display:flex;"><span>			&lt;<span style="color:#ff6ac1">spring:message</span> <span style="color:#57c7ff">code</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;message.youWrote&#34;</span> <span style="color:#57c7ff">arguments</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;${message}&#34;</span> <span style="color:#57c7ff">htmlEscape</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;true&#34;</span> /&gt;
</span></span><span style="display:flex;"><span>		&lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>	&lt;/<span style="color:#ff6ac1">c:if</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#ff6ac1">button</span> <span style="color:#57c7ff">type</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;submit&#34;</span> <span style="color:#57c7ff">class</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;btn&#34;</span>&gt;Submit&lt;/<span style="color:#ff6ac1">button</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#ff6ac1">form:form</span>&gt;
</span></span></code></pre></div><p>This will bind your form to a model attribute called <strong>formDTO</strong>, we will see it in the controller shortly. You could also provide an action attribute but we will just map the action to <strong>&quot;/&quot;</strong>, just like our jsp.</p>
<p>Then the input will be bound to the <strong>messageFromUser</strong> attribute of the <strong>formDTO</strong>. You can also see the associated error message if validation fails.</p>
<p>Lastly, if a success message is present in the request (the controller will place it), we will display it with a localized text taking an argument. We also want to escape the text given by the user to prevent XSS injection.</p>
<p>The message bundle for this example would look like this :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-properties" data-lang="properties"><span style="display:flex;"><span><span style="color:#57c7ff">message.youWrote</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">You wrote : {0}</span>
</span></span></code></pre></div><p>Our new controller :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Controller</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">HomeController</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@RequestMapping</span>(value <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;/&#34;</span>, method <span style="color:#ff6ac1">=</span> RequestMethod.<span style="color:#57c7ff">GET</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">displayHome</span>(Model model) {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;/home&#34;</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@ModelAttribute</span>(<span style="color:#5af78e">&#34;formDTO&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> FormDTO <span style="color:#57c7ff">createFormBean</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> FormDTO();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@RequestMapping</span>(value <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;/&#34;</span>, method<span style="color:#ff6ac1">=</span>RequestMethod.<span style="color:#57c7ff">POST</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">submitMessage</span>(<span style="color:#ff9f43">@Valid</span> FormDTO formDTO, BindingResult result,
</span></span><span style="display:flex;"><span>					SessionStatus sessionStatus,
</span></span><span style="display:flex;"><span>					RedirectAttributes redirectAttrs) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">if</span> (result.<span style="color:#57c7ff">hasErrors</span>()) {
</span></span><span style="display:flex;"><span>			<span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;/home&#34;</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		String message <span style="color:#ff6ac1">=</span> formDTO.<span style="color:#57c7ff">toString</span>();
</span></span><span style="display:flex;"><span>		sessionStatus.<span style="color:#57c7ff">setComplete</span>();
</span></span><span style="display:flex;"><span>		redirectAttrs.<span style="color:#57c7ff">addFlashAttribute</span>(<span style="color:#5af78e">&#34;message&#34;</span>, message);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;redirect:/&#34;</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>You can see we expose our <strong>FormDTO</strong> to the Model.
Then we process this action of posting on &ldquo;/&rdquo;. With spring MVC request mapping you can inject whatever is relevant to the context of your page.
Here we will ask Spring MVC to give us the form posted with indication on its correctness as far as validation rules are concerned (we will see that below).</p>
<p>We also want some other small things : access to redirect attributes to display a single time (flash) message, access to the session to dispose our form, etc.</p>
<p>If the user input is correct, we will redirect him (yes with spring MVC you have some <a href="http://en.wikipedia.org/wiki/Post/Redirect/Get">PRG</a> for free) to the home. You can also use the instruction &lsquo;forward:url&rsquo;.</p>
<p>I strongly advise you to check out <a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/mvc.html">the documentation</a> to learn what can be injected in your controllers.</p>
<p>Our <strong>FormDTO</strong> is a simple POJO, annotated with <a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/mvc.html">hibernate-validator</a> annotation :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">FormDTO</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@NotEmpty</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> String messageFromUser;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Getters and setters omitted</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Hibernate validator provides a lot of useful annotations like @Min, @Max, @Email. You can even stack them or create your own rules.</p>
<p>That&rsquo;s it ! To customize validation message, just write properties with the same name as the annotations :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-properties" data-lang="properties"><span style="display:flex;"><span><span style="color:#78787e"># This will override validation messages caused by @NotEmpty annotation</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">NotEmpty</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">This cannot be empty !</span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># This will override @NotEmpty validation messages with a path of messageFromUser</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">NotEmpty.messageFromUser</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">Don&#39;t you have anything to say?</span>
</span></span></code></pre></div><h2 id="wait--how-do-we-test-a-controller">Wait ! How do we test a controller?</h2>
<p>With spring mvc test ! Have a look :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff6ac1">import static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import static</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@RunWith</span>(SpringJUnit4ClassRunner.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@WebAppConfiguration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ContextConfiguration</span>(classes <span style="color:#ff6ac1">=</span> WebConfig.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">HomeControllerTest</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> WebApplicationContext wac;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> MockMvc mockMvc;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Before</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">setup</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mockMvc</span> <span style="color:#ff6ac1">=</span> MockMvcBuilders.<span style="color:#57c7ff">webAppContextSetup</span>(<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">wac</span>).<span style="color:#57c7ff">build</span>();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">getHome</span>() <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mockMvc</span>.<span style="color:#57c7ff">perform</span>(get(<span style="color:#5af78e">&#34;/&#34;</span>))
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andDo</span>(print())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(status().<span style="color:#57c7ff">isOk</span>())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(forwardedUrl(<span style="color:#5af78e">&#34;/WEB-INF/views/home.jsp&#34;</span>));
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">postEmptyData</span>() <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mockMvc</span>.<span style="color:#57c7ff">perform</span>(post(<span style="color:#5af78e">&#34;/&#34;</span>))
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andDo</span>(print())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(status().<span style="color:#57c7ff">isOk</span>())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(model().<span style="color:#57c7ff">attributeHasFieldErrors</span>(<span style="color:#5af78e">&#34;formDTO&#34;</span>, <span style="color:#5af78e">&#34;messageFromUser&#34;</span>))
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(forwardedUrl(<span style="color:#5af78e">&#34;/WEB-INF/views/home.jsp&#34;</span>));
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">postSomething</span>() <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mockMvc</span>.<span style="color:#57c7ff">perform</span>(post(<span style="color:#5af78e">&#34;/&#34;</span>).<span style="color:#57c7ff">param</span>(<span style="color:#5af78e">&#34;messageFromUser&#34;</span>, <span style="color:#5af78e">&#34;hello&#34;</span>))
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andDo</span>(print())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(status().<span style="color:#57c7ff">isMovedTemporarily</span>()) <span style="color:#78787e">// 302 redirect</span>
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(model().<span style="color:#57c7ff">hasNoErrors</span>())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(flash().<span style="color:#57c7ff">attributeExists</span>(<span style="color:#5af78e">&#34;message&#34;</span>))
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(redirectedUrl(<span style="color:#5af78e">&#34;/&#34;</span>));
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I think the code is pretty understandable as it uses a syntax which is very close to natural language.
But it is quite difficult to get it right the first time. You definitely have to check out <a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/htmlsingle/#unit-testing-spring-mvc">the documentation</a>.</p>
<h2 id="tomcat-and-jetty">Tomcat and jetty</h2>
<p>To add them to your pom.xml, check out my <a href="http://geowarin.wordpress.com/2013/01/22/basic-configuration-for-jetty-and-tomcat-maven-plugins/">previous article</a> or download the <a href="https://github.com/geowarin/spring-mvc-examples/tree/master/mvc-base">github project</a> of this article which also provides a very handsome SiteMesh template featuring twitter bootstrap and responsive design.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Since version 3.2, Spring MVC is now very easy to configure and use. Spring mvc test, now integrated in the framework, is a really unique feature in terms of controller unit testing and is really worth a try.</p>
<p>Its action based request mapping &lsquo;a la rest&rsquo; makes it both versatile, easy to integrate with ajax solutions and a very good replacement for the <a href="http://struts.apache.org/">old-timer</a>.</p>
<p>It also provides easy XML, RSS, plain text or JSON publishing and can almost be used as a replacement for a rest framework !</p>
<p>Of course, be sure to check the <a href="https://github.com/SpringSource/spring-mvc-showcase">spring-mvc-showcase</a>, a real goldmine.</p>
]]></content:encoded></item></channel></rss>