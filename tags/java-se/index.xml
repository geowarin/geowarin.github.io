<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Java SE on Geowarin</title><link>https://geowarin.com/tags/java-se/</link><description>Recent content in Java SE on Geowarin</description><generator>Hugo -- 0.138.0</generator><language>en</language><lastBuildDate>Mon, 21 Jan 2013 15:25:11 +0000</lastBuildDate><atom:link href="https://geowarin.com/tags/java-se/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Spring Data JPA in a Java SE environment and run tests with dbUnit</title><link>https://geowarin.com/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/</link><pubDate>Mon, 21 Jan 2013 15:25:11 +0000</pubDate><guid>https://geowarin.com/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/</guid><description>Demonstration of how to set up spring data JPA in java SE and test with dbUnit</description><content:encoded><![CDATA[<p>This blog post follows my previous articles on using <a href="http://geowarin.wordpress.com/2013/01/20/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/">hibernate as a standalone JPA provider</a> and how to use <a href="http://geowarin.wordpress.com/2013/01/20/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/">spring in a Java SE</a> environment.</p>
<p>In this post, I will show you how to use <a href="http://geowarin.wordpress.com/2013/01/21/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/">Spring Data JPA</a>, a great project which improves your productivity by generating all CRUD operations for you. Then we will use <a href="http://springtestdbunit.github.com/spring-test-dbunit/">springtestdbunit</a> to run some very clean tests on our database with spring and <a href="http://www.dbunit.org/">dbUnit</a>.</p>
<p>The code source of this example is available on github : <a href="https://github.com/geowarin/hibernate-examples/tree/master/standalone-data-jpa">https://github.com/geowarin/hibernate-examples/tree/master/standalone-data-jpa</a></p>
<h2 id="what-is-spring-data-jpa">What is Spring Data JPA?</h2>
<p>Are you tired of always implementing the findOne(long id), findAll(), save()&hellip; methods on your repositories? Having to come up with clever tricks to generate a generic DAO?</p>
<p>Then give Spring Data JPA a try ! This project lets you implement a very simple interface for your repositories and takes care of all the rest, allowing you to focus on your real queries.</p>
<h2 id="the-configuration">The configuration</h2>
<p>The configuration we will set up here is pretty similar to the one we used in the <a href="http://geowarin.wordpress.com/2013/01/20/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/">spring standalone article.</a> We will just add a bunch of classes to make use of spring data jpa :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableJpaRepositories</span>(<span style="color:#5af78e">&#34;com.geowarin.standalonedatajpa.repository&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableTransactionManagement</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">StandaloneDataJpaConfig</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> DataSource <span style="color:#57c7ff">dataSource</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> EmbeddedDatabaseBuilder().<span style="color:#57c7ff">setType</span>(EmbeddedDatabaseType.<span style="color:#57c7ff">HSQL</span>)
</span></span><span style="display:flex;"><span>				.<span style="color:#57c7ff">addScript</span>(<span style="color:#5af78e">&#34;classpath:sql/schema.sql&#34;</span>)
</span></span><span style="display:flex;"><span>				.<span style="color:#57c7ff">addScript</span>(<span style="color:#5af78e">&#34;classpath:sql/import-users.sql&#34;</span>)
</span></span><span style="display:flex;"><span>				.<span style="color:#57c7ff">build</span>();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> PlatformTransactionManager <span style="color:#57c7ff">transactionManager</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		JpaTransactionManager txManager <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> JpaTransactionManager();
</span></span><span style="display:flex;"><span>		txManager.<span style="color:#57c7ff">setEntityManagerFactory</span>(entityManagerFactory());
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> txManager;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> HibernateExceptionTranslator <span style="color:#57c7ff">hibernateExceptionTranslator</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> HibernateExceptionTranslator();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> EntityManagerFactory <span style="color:#57c7ff">entityManagerFactory</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// will set the provider to &#39;org.hibernate.ejb.HibernatePersistence&#39;</span>
</span></span><span style="display:flex;"><span>		HibernateJpaVendorAdapter vendorAdapter <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> HibernateJpaVendorAdapter();
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// will set hibernate.show_sql to &#39;true&#39;</span>
</span></span><span style="display:flex;"><span>		vendorAdapter.<span style="color:#57c7ff">setShowSql</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// if set to true, will set hibernate.hbm2ddl.auto to &#39;update&#39;</span>
</span></span><span style="display:flex;"><span>		vendorAdapter.<span style="color:#57c7ff">setGenerateDdl</span>(<span style="color:#ff6ac1">false</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		LocalContainerEntityManagerFactoryBean factory <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> LocalContainerEntityManagerFactoryBean();
</span></span><span style="display:flex;"><span>		factory.<span style="color:#57c7ff">setJpaVendorAdapter</span>(vendorAdapter);
</span></span><span style="display:flex;"><span>		factory.<span style="color:#57c7ff">setPackagesToScan</span>(<span style="color:#5af78e">&#34;com.geowarin.standalonedatajpa.model&#34;</span>);
</span></span><span style="display:flex;"><span>		factory.<span style="color:#57c7ff">setDataSource</span>(dataSource());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// This will trigger the creation of the entity manager factory</span>
</span></span><span style="display:flex;"><span>		factory.<span style="color:#57c7ff">afterPropertiesSet</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> factory.<span style="color:#57c7ff">getObject</span>();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> MainBean <span style="color:#57c7ff">mainBean</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> MainBean();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>With this configuration, you won&rsquo;t even need a <em>persistence.xml</em> file ! Compared to our <a href="http://geowarin.wordpress.com/2013/01/20/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/">previous example</a> however, one cannot make use of <em>hibernate.hbm2ddl.import_files</em> property to import SQL scripts with hibernate because <em>hibernate.hbm2ddl.auto</em> must be set to either <em>create</em> or <em>create-drop</em>.</p>
<p>That&rsquo;s ok we will generate some very tiny scripts to set up the schema and the data in our database (and make our DBA happy, a thing that is never to be disregarded :))</p>
<hr>
<p><strong>Hint</strong> : If this is a real blocker for you, you could setGenrateDdl to false and maintain a simple <strong>hibernate.properties</strong> file like this one</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-properties" data-lang="properties"><span style="display:flex;"><span><span style="color:#57c7ff">hibernate.hbm2ddl.auto</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">create</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">hibernate.hbm2ddl.import_files</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">sql/import-users.sql</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">hibernate.format_sql</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">true</span>
</span></span></code></pre></div><p>That&rsquo;s because hibernate will always look for a <a href="http://docs.jboss.org/hibernate/core/4.1/manual/en-US/html/ch03.html#configuration-optional-properties">hibernate.properties</a> file in the classpath to override you persistence properties.</p>
<hr>
<p>Note the use of <strong>@EnableJpaRepositories</strong> that will tell spring data in which packages our repositories can be found.</p>
<p><strong>@EnableTransactionManagement</strong> is a replacement of the tag <code>&lt;tx:annotation-driven /&gt;</code>.</p>
<p>We can set up the <a href="http://static.springsource.org/spring-framework/docs/3.2.0.RC1/api/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.html">LocalContainerEntityManagerFactoryBean </a>to use a package to scan our entities for us, no need to list them all.</p>
<p>The rest is pretty straight forward I believe.</p>
<p>Note that by default, spring data JPA will try to locate your <em>persistence.xml</em> so the two approaches are completely compatible, for this example however we will go for a full xml-less configuration.</p>
<h2 id="one-entity-one-interface-and-we-are-ready">One entity, one interface and we are ready</h2>
<p>We have one very simple entity :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Table</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;users&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Entity</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">User</span> <span style="color:#ff5c57">implements</span> Serializable {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> <span style="color:#9aedfe">long</span> serialVersionUID <span style="color:#ff6ac1">=</span> 1L;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Id</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@GeneratedValue</span>(strategy<span style="color:#ff6ac1">=</span>GenerationType.<span style="color:#57c7ff">AUTO</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">long</span> id;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Column</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;name&#34;</span>, nullable <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">false</span>, unique<span style="color:#ff6ac1">=</span><span style="color:#ff6ac1">true</span>, length<span style="color:#ff6ac1">=</span>50)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> String name;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// getters and setters omitted</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now let&rsquo;s use spring data to generate a repository for us :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">interface</span> <span style="color:#f3f99d">UserRepository</span>  <span style="color:#ff5c57">extends</span> JpaRepository<span style="color:#ff6ac1">&lt;</span>User, Long<span style="color:#ff6ac1">&gt;</span> {
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Tadaa! Is that it? Yes, you can now use your repository in our <strong>MainBean</strong> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MainBean</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> UserRepository userRepository;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(MainBean.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">start</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// Spring Data JPA CRUD operations are transactionnal by default !</span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#transactions</span>
</span></span><span style="display:flex;"><span>		User newUser <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> User();
</span></span><span style="display:flex;"><span>		newUser.<span style="color:#57c7ff">setName</span>(<span style="color:#5af78e">&#34;inserted&#34;</span>);
</span></span><span style="display:flex;"><span>		userRepository.<span style="color:#57c7ff">save</span>(newUser);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		List all <span style="color:#ff6ac1">=</span> userRepository.<span style="color:#57c7ff">findAll</span>();
</span></span><span style="display:flex;"><span>		log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;users=&#34;</span> <span style="color:#ff6ac1">+</span> all);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Pretty sweet. But that&rsquo;s not all. You now have three different ways of writing new queries with Spring data :</p>
<ol>
<li>
<p>Use <a href="https://blogs.oracle.com/JPQL01/entry/named_query_in_java_persistence">named queries</a></p>
</li>
<li>
<p><a href="http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#jpa.query-methods.at-query">Use the @Query annotation</a> to write your own JPQL queries</p>
</li>
<li>
<p>Use the awesome <a href="http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#jpa.query-methods.query-creation">query creation by method name</a></p>
</li>
</ol>
<p>Let&rsquo;s review the last two options (I don&rsquo;t really like named queries but have a look a the <a href="http://static.springsource.org/spring-data/jpa/docs/1.2.0.RELEASE/reference/html/#jpa.query-methods.named-queries">documentation</a> if you want)</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">interface</span> <span style="color:#f3f99d">UserRepository</span>  <span style="color:#ff5c57">extends</span> JpaRepository<span style="color:#ff6ac1">&lt;</span>User, Long<span style="color:#ff6ac1">&gt;</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Demonstrate query creation by method name</span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#jpa.query-methods.query-creation</span>
</span></span><span style="display:flex;"><span>	User <span style="color:#57c7ff">findByName</span>(String name);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Demonstrate the use of a simple JPQL query</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Query</span>(<span style="color:#5af78e">&#34;from User u where upper(u.name) = upper(:name)&#34;</span>)
</span></span><span style="display:flex;"><span>	User <span style="color:#57c7ff">findByNameIgnoreCase</span>(<span style="color:#ff9f43">@Param</span>(<span style="color:#5af78e">&#34;name&#34;</span>) String name);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="ok-lets-test-it">Ok let&rsquo;s test it</h2>
<p>Have a look at the unit test for our repository :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@RunWith</span>(SpringJUnit4ClassRunner.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ContextConfiguration</span>(classes <span style="color:#ff6ac1">=</span> { StandaloneDataJpaConfig.<span style="color:#57c7ff">class</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@TestExecutionListeners</span>({ DependencyInjectionTestExecutionListener.<span style="color:#57c7ff">class</span>,
</span></span><span style="display:flex;"><span>	DbUnitTestExecutionListener.<span style="color:#57c7ff">class</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">UserRepositoryTest</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> UserRepository userRepository;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@DatabaseSetup</span>(<span style="color:#5af78e">&#34;userAdminData.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFindAdmin</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User admin <span style="color:#ff6ac1">=</span> userRepository.<span style="color:#57c7ff">findOne</span>(1L);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(admin);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;admin&#34;</span>, admin.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@DatabaseSetup</span>(<span style="color:#5af78e">&#34;userAdminData.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFindByName</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User admin <span style="color:#ff6ac1">=</span> userRepository.<span style="color:#57c7ff">findByName</span>(<span style="color:#5af78e">&#34;admin&#34;</span>);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(admin);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;admin&#34;</span>, admin.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@DatabaseSetup</span>(<span style="color:#5af78e">&#34;userAdminData.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFindByNameIgnoreCase</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User admin <span style="color:#ff6ac1">=</span> userRepository.<span style="color:#57c7ff">findByNameIgnoreCase</span>(<span style="color:#5af78e">&#34;AdMIn&#34;</span>);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(admin);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;admin&#34;</span>, admin.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@DatabaseSetup</span>(<span style="color:#5af78e">&#34;userAdminData.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@ExpectedDatabase</span>(<span style="color:#5af78e">&#34;afterInsert.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testInsertUser</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User newUser <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> User();
</span></span><span style="display:flex;"><span>		newUser.<span style="color:#57c7ff">setName</span>(<span style="color:#5af78e">&#34;inserted&#34;</span>);
</span></span><span style="display:flex;"><span>		userRepository.<span style="color:#57c7ff">save</span>(newUser);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We use springtestdbunit to be able to use annotations to set up and verify the database state after each test. Here are our two datasets.</p>
<p>userAdminData.xml :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#78787e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;dataset&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;users</span> <span style="color:#57c7ff">id=</span><span style="color:#5af78e">&#34;1&#34;</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;admin&#34;</span> <span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/dataset&gt;</span>
</span></span></code></pre></div><p>afterInsert.xml :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#78787e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;dataset&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;users</span> <span style="color:#57c7ff">id=</span><span style="color:#5af78e">&#34;1&#34;</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;admin&#34;</span> <span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;users</span> <span style="color:#57c7ff">id=</span><span style="color:#5af78e">&#34;2&#34;</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;inserted&#34;</span> <span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/dataset&gt;</span>
</span></span></code></pre></div><p>Using the <strong>@ExpectedDatabase</strong> annotation is really awesome, dbUnit will generate very informative messages if your test failed.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Spring Data JPA is really a good piece of software. We did not go into too much details but know that it will handle pagination, type-safe queries, is compatible with <a href="http://www.querydsl.com/">query-dsl</a> and much more.
It is suitable for a Java SE environment which can come in handy if we want to run some quick tests on our database.</p>
<p>Finally, springtestdbunit is a very nice-to-have feature which will make your repository unit tests a real breeze to write.</p>
<p>Lastly, I will point out that making use of the <a href="http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#transactions">transational behaviour of spring data</a> CRUD operation is not really a good practice but we did it all the same for the sake of simplicity.
A better approach would be to use <strong>@Service</strong> spring beans to encapsulate one or several operations.</p>
]]></content:encoded></item><item><title>Using spring in a Java SE environment and implementing the chain of responsibility pattern</title><link>https://geowarin.com/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/</link><pubDate>Sun, 20 Jan 2013 19:31:56 +0000</pubDate><guid>https://geowarin.com/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/</guid><description>Demonstration of how to set up spring in java SE and inject several implementations of the same interface</description><content:encoded><![CDATA[<p>In this post I will show you how to use spring 3.0 <a href="http://www.springsource.org/javaconfig">Java based configuration</a> in a Java SE environment, taking advantage of spring autowiring to implement the <a href="http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern">chain of responsibility </a>design pattern with components and services in a simple project. We will also use spring&rsquo;s <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.html">PropertySourcesPlaceholderConfigurer</a> to inject custom properties into our beans with the <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/beans/factory/annotation/Value.html">@Value</a> annotation and test our application with spring-test.</p>
<p>Some fun in perspective ! Tag along.</p>
<p>The source code of this application is available on my github : <a href="https://github.com/geowarin/spring-examples/tree/master/spring-standalone-chain">https://github.com/geowarin/spring-examples/tree/master/spring-standalone-chain</a></p>
<h2 id="java-configuration">Java configuration</h2>
<p>Starting from spring 3.0, it is possible to get rid of any XML configuration by providing a pure Java configuration. This is done by annotating your configuration classes with the <strong>@Configuration</strong> annotation and annotating your beans with <strong>@Bean</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ComponentScan</span>(basePackages <span style="color:#ff6ac1">=</span> {<span style="color:#5af78e">&#34;com.geowarin.spring.service&#34;</span>, <span style="color:#5af78e">&#34;com.geowarin.spring.component&#34;</span>})
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@PropertySource</span>(value <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;classpath:chain.properties&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SpringStandalonChainConfig</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> PropertySourcesPlaceholderConfigurer <span style="color:#57c7ff">propertySourcesPlaceholderConfigurer</span>() {
</span></span><span style="display:flex;"><span>		PropertySourcesPlaceholderConfigurer pspc <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> PropertySourcesPlaceholderConfigurer();
</span></span><span style="display:flex;"><span>		pspc.<span style="color:#57c7ff">setPlaceholderPrefix</span>(<span style="color:#5af78e">&#34;#{&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> pspc;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> MainBean <span style="color:#57c7ff">mainBean</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> MainBean();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Additional annotation for java configuration include <strong>@ComponentScan</strong> to specify packages in which your <strong>@Component</strong>, <strong>@Service</strong>, etc. beans are included and <strong>@PropertySource</strong> to include property files in your configuration.</p>
<p>Two thing here :</p>
<ol>
<li>I declare a <strong>MainBean</strong> which will act as an entry point for our application. This bean will benefit of spring autowiring</li>
<li>I declare a custom <strong>PropertySourcesPlaceholderConfigurer</strong> to enable the injection of properties annotated with @Value. I am customizing the prefix for usage of <a href="http://static.springsource.org/spring/docs/3.0.x/reference/expressions.html">spring Expression Language</a> to be able to use #{} expressions instead of default ${}</li>
</ol>
<p>Injection with <strong>@Value</strong> property is a very interesting alternative to the use of spring&rsquo;s Environment as it provides natural type inference.</p>
<p>For some people, the use of java configuration can be confusing because one cannot see at first glance where the config is located. What I usually do is keeping my configuration in a separate source folder. This can be achieved with maven and its build-helper plugin :</p>
<script src="https://gist.github.com/geowarin/4581500.js"></script>

<p>This approach is compatible with eclipse if you have m2e installed. In that case when you import a project using this plugin, eclipse will prompt you for the install of the build-helper connector.</p>
<h2 id="our-application-entry-point--the-mainbean">Our application entry point : the MainBean</h2>
<p>Here is the code of our <strong>MainBean</strong> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MainBean</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Qualifier</span>(<span style="color:#5af78e">&#34;doChain&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> ChainService service;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Value</span>(<span style="color:#5af78e">&#34;#{chain.compatibleWithFirst}&#34;</span>) <span style="color:#9aedfe">boolean</span> compatibleWithFirst;
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Value</span>(<span style="color:#5af78e">&#34;#{chain.compatibleWithSecond}&#34;</span>) <span style="color:#9aedfe">boolean</span> compatibleWithSecond;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(MainBean.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">start</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;property compatibleWithFirst=&#34;</span> <span style="color:#ff6ac1">+</span> compatibleWithFirst);
</span></span><span style="display:flex;"><span>		log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;property compatibleWithSecond=&#34;</span> <span style="color:#ff6ac1">+</span> compatibleWithSecond);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		ChainContext chainContext <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ChainContext(compatibleWithFirst, compatibleWithSecond);
</span></span><span style="display:flex;"><span>		service.<span style="color:#57c7ff">executeChain</span>(chainContext);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We are injecting our service into the bean with a custom qualifier which will enable us to provide several implementations of our service if we need it.</p>
<p>Note that the <strong>@Value</strong> annotation, our properties will automatically be casted to booleans, which is pretty cool. Here is our chain.properties file :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>chain.compatibleWithFirst<span style="color:#ff6ac1">=</span><span style="color:#ff5c57">false</span>
</span></span><span style="display:flex;"><span>chain.compatibleWithSecond<span style="color:#ff6ac1">=</span><span style="color:#ff5c57">true</span>
</span></span></code></pre></div><h2 id="the-chain--two-components-and-a-service">The Chain : Two components and a service</h2>
<p>The <strong>ChainContext</strong> class is a simple pojo we pass to our service to be handled by the chain of responsibility and enable us to test if our service successfully handled our case :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">ChainContext</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> <span style="color:#9aedfe">boolean</span> compatibleWithFirstElement;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> <span style="color:#9aedfe">boolean</span> compatibleWithSecondElement;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">boolean</span> handledByFirst;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">boolean</span> handledBySecond;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#57c7ff">ChainContext</span>(<span style="color:#9aedfe">boolean</span> compatibleWithFirstElement, <span style="color:#9aedfe">boolean</span> compatibleWithSecondElement) {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">compatibleWithFirstElement</span> <span style="color:#ff6ac1">=</span> compatibleWithFirstElement;
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">compatibleWithSecondElement</span> <span style="color:#ff6ac1">=</span> compatibleWithSecondElement;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Getters and setters ommited</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>ChainElement</strong> is a simple interface which will be implemented by two components : <strong>FirstChainElement</strong> and <strong>SecondChainElement</strong>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">interface</span> <span style="color:#f3f99d">ChainElement</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">boolean</span> <span style="color:#57c7ff">doChain</span>(ChainContext context);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here is the first element, the second one is essentially the same thing :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Order</span>(1)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">FirstChainElement</span> <span style="color:#ff5c57">implements</span> ChainElement {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(FirstChainElement.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">boolean</span> <span style="color:#57c7ff">doChain</span>(ChainContext context) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">if</span> (context.<span style="color:#57c7ff">isCompatibleWithFirstElement</span>()) {
</span></span><span style="display:flex;"><span>			log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;Handled by first&#34;</span>);
</span></span><span style="display:flex;"><span>			context.<span style="color:#57c7ff">setHandledByFirst</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>			<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">true</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">false</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The thing to note here is the use of the spring annotation <a href="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/core/annotation/Order.html">@Order</a> which will enable us to sort our list using spring&rsquo;s <a href="http://static.springsource.org/spring/docs/3.0.x/api/org/springframework/core/annotation/AnnotationAwareOrderComparator.html">AnnotationAwareOrderComparator</a>. Neat :)</p>
<p>And now the service :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Qualifier</span>(<span style="color:#5af78e">&#34;doChain&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DoChainService</span> <span style="color:#ff5c57">implements</span> ChainService {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> List<span style="color:#ff6ac1">&lt;</span>ChainElement<span style="color:#ff6ac1">&gt;</span> chain;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@PostConstruct</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">init</span>() {
</span></span><span style="display:flex;"><span>		Collections.<span style="color:#57c7ff">sort</span>(chain, AnnotationAwareOrderComparator.<span style="color:#57c7ff">INSTANCE</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">executeChain</span>(ChainContext context) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">for</span> (ChainElement chainElement : chain) {
</span></span><span style="display:flex;"><span>			<span style="color:#ff6ac1">if</span> (chainElement.<span style="color:#57c7ff">doChain</span>(context))
</span></span><span style="display:flex;"><span>				<span style="color:#ff6ac1">break</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Note that we use the same qualifier as our <strong>MainBean</strong> here. The main trick in this article is the usage of <strong>@Autowired</strong> to inject all the components implementing the <strong>ChainElement</strong> interface into a List.</p>
<h2 id="the-application-main-and-tests">The application main and tests</h2>
<p>That&rsquo;s it ! Now you can run your project with this main class :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SpringStandaloneChainApp</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> String CONFIG_PACKAGE <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;com.geowarin.spring.config&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">main</span>(String<span style="color:#ff6ac1">[]</span> args) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">try</span> (AnnotationConfigApplicationContext ctx <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> AnnotationConfigApplicationContext()) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			ctx.<span style="color:#57c7ff">scan</span>(CONFIG_PACKAGE);
</span></span><span style="display:flex;"><span>			ctx.<span style="color:#57c7ff">refresh</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			MainBean bean <span style="color:#ff6ac1">=</span> ctx.<span style="color:#57c7ff">getBean</span>(MainBean.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>			bean.<span style="color:#57c7ff">start</span>();
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And unit test the service with spring-test like that :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@RunWith</span>(SpringJUnit4ClassRunner.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ContextConfiguration</span>(classes <span style="color:#ff6ac1">=</span> { SpringStandalonChainConfig.<span style="color:#57c7ff">class</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">ChainServiceTest</span> <span style="color:#ff5c57">extends</span> TestCase {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> ChainService chainService;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testHandledByFirst</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		ChainContext chainContext <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ChainContext(<span style="color:#ff6ac1">true</span>, <span style="color:#ff6ac1">false</span>);
</span></span><span style="display:flex;"><span>		chainService.<span style="color:#57c7ff">executeChain</span>(chainContext);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertTrue</span>(chainContext.<span style="color:#57c7ff">isHandledByFirst</span>());
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertFalse</span>(chainContext.<span style="color:#57c7ff">isHandledBySecond</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testHandledBySecond</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		ChainContext chainContext <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ChainContext(<span style="color:#ff6ac1">false</span>, <span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>		chainService.<span style="color:#57c7ff">executeChain</span>(chainContext);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertFalse</span>(chainContext.<span style="color:#57c7ff">isHandledByFirst</span>());
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertTrue</span>(chainContext.<span style="color:#57c7ff">isHandledBySecond</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Spring is perfectly suitable for a Java SE Environment. Its new java configuration is very handy and powerful as long as you keep things tidy and make sure the configuration is not spread across the whole project.
Finally, let&rsquo;s note it is possible to inject all components or services implementing a given interface into a list with the `@Autowired annotation.</p>
]]></content:encoded></item></channel></rss>