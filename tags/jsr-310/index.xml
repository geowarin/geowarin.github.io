<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>jsr-310 on Geowarin</title><link>https://geowarin.com/tags/jsr-310/</link><description>Recent content in jsr-310 on Geowarin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 02 Feb 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://geowarin.com/tags/jsr-310/index.xml" rel="self" type="application/rss+xml"/><item><title>Correctly handle JSR-310 (java 8) dates with Jackson</title><link>https://geowarin.com/correctly-handle-jsr-310-java-8-dates-with-jackson/</link><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/correctly-handle-jsr-310-java-8-dates-with-jackson/</guid><description>The DateTime API in Java 8 is awesome but default Jackson serialization is not. Let&amp;rsquo;s fix that!</description><content:encoded><![CDATA[<p>If you are starting a Spring Boot project today, chances are that you want to use
Java 8.</p>
<p>One of the most awesome features in Java 8 is the <a href="http://www.mscharhag.com/java/java-8-date-time-api">Date and Time API</a>, also known as JSR-310.</p>
<p>By default, Jackson will treat the new dates as normal objects and serialize all the
fields that they contain, which will probably not suit your needs.</p>
<p>I will show you how to fix the problem with the <a href="https://github.com/FasterXML/jackson-datatype-jsr310">jackson-datatype-jsr310</a> library,
within a Spring Boot project, but the concepts here are applicable to any application
using Jackson.</p>
<p>The code is <a href="https://github.com/geowarin/boot-jsr310">available on github</a> if you want to take a look.</p>
<h2 id="the-problem">The problem</h2>
<p>Let&rsquo;s write a simple controller:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@RestController</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DateController</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@RequestMapping</span>(<span style="color:#5af78e">&#34;/localDate&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> LocalDate <span style="color:#57c7ff">todayLocalDate</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> LocalDate.<span style="color:#57c7ff">now</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@RequestMapping</span>(<span style="color:#5af78e">&#34;/offsetDateTime&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> OffsetDateTime <span style="color:#57c7ff">todayOffsetDateTime</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> OffsetDateTime.<span style="color:#57c7ff">now</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Simple, right? What could possibly go wrong?</p>
<p><img loading="lazy" src="/assets/images/articles/2016-02-localDate.png" alt="Oh boy what am I going to do with that?"  title="Bad date time"  />
</p>
<p>Well, it&rsquo;s probably not what you expected.
This output is not going to be easy to use in your client application.</p>
<p>More importantly, are you going to send this kind of format to your server
when you are targeting a Java date?</p>
<p>The output of <code>offsetDateTime</code> is pretty similar in terms of unusualness.</p>
<h2 id="the-solution">The solution</h2>
<p>Turns out that the solution is pretty straight-forward.
Just add the following dependency to your project:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>compile <span style="color:#5af78e">&#39;com.fasterxml.jackson.datatype:jackson-datatype-jsr310&#39;</span>
</span></span></code></pre></div><p>And the result, for <code>LocalDateTime</code>:</p>
<pre tabindex="0"><code>[
  2016,
  2,
  2
]
</code></pre><p>And for <code>OffsetDateTime</code>:</p>
<pre tabindex="0"><code>1454451664.708000000
</code></pre><p>Happy? No? Let&rsquo;s try improve the solution.</p>
<h2 id="tweaking-the-output">Tweaking the output</h2>
<p>If you look at how the library works internally, you will see that the output
depends on some features being activated or not.</p>
<p>To have a better default, we can override the default <code>ObjectMapper</code> and give
it a different config:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">JacksonConfig</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Primary</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> ObjectMapper <span style="color:#57c7ff">objectMapper</span>(Jackson2ObjectMapperBuilder builder) {
</span></span><span style="display:flex;"><span>        ObjectMapper objectMapper <span style="color:#ff6ac1">=</span> builder.<span style="color:#57c7ff">createXmlMapper</span>(<span style="color:#ff6ac1">false</span>).<span style="color:#57c7ff">build</span>();
</span></span><span style="display:flex;"><span>        objectMapper.<span style="color:#57c7ff">configure</span>(SerializationFeature.<span style="color:#57c7ff">WRITE_DATES_AS_TIMESTAMPS</span>, <span style="color:#ff6ac1">false</span>);
</span></span><span style="display:flex;"><span><span style="color:#78787e">//        objectMapper.configure(SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS, false);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> objectMapper;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This time the result is, for <code>LocalDateTime</code>:</p>
<pre tabindex="0"><code>2016-02-02
</code></pre><p>And for <code>OffsetDateTime</code>:</p>
<pre tabindex="0"><code>2016-02-02T23:24:08.255+01:00
</code></pre><p>If you uncomment the second line, dates will be written as timestamps without the nanoseconds
but unfortunately, it is mutually exclusive with the first option.</p>
<p>Nevertheless, those formats are a lot more sensible and understandable by client
libraries like <a href="http://momentjs.com/">momentjs</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>It takes just a little configuration to make JSR-310 dates behave correctly with Jackson
and Spring Boot.</p>
<p>As always, check out the project <a href="https://github.com/geowarin/boot-jsr310">on github</a> and tell if
this helped!</p>
]]></content:encoded></item></channel></rss>