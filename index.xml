<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Geowarin</title><link>https://geowarin.github.io/</link><description>Recent content on Geowarin</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 23 Dec 2019 01:20:59 +0100</lastBuildDate><atom:link href="https://geowarin.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Run your frontend alongside spring boot</title><link>https://geowarin.github.io/run-your-frontend-alongside-spring-boot/</link><pubDate>Mon, 23 Dec 2019 01:20:59 +0100</pubDate><guid>https://geowarin.github.io/run-your-frontend-alongside-spring-boot/</guid><description>Assumptions:
Your backend serves the API (REST, graphQL) You build your javascript with a separate bundler (parcel, webpack) Your frontend uses a push state (HTML 5 history) router You want hot module reloading (HMR) for the best developer experience TLDR; The github repository shows four different solutions.
1. CORS The most obvious solution is to set up the backend to allow Cross-Origin Resource Sharing (CORS) with the frontend, which runs on the development web server.</description></item><item><title>Share IntelliJ run configurations with git</title><link>https://geowarin.github.io/share-intellij-run-configurations-with-git/</link><pubDate>Sun, 22 Dec 2019 01:47:32 +0100</pubDate><guid>https://geowarin.github.io/share-intellij-run-configurations-with-git/</guid><description>This is a short note on how to share your intelliJ run configurations with git.
First your .gitignore must whitelist the .idea/runConfigurations folder but not the rest of the .idea folder.
You probably don&amp;rsquo;t want to commit the entire folder because it can contain personal settings and plugin configurations.
!.idea .idea/* !.idea/runConfigurations Here is a compound run configuration. It&amp;rsquo;s awesome. It launches multiple run configurations at once.
Then you want to check the Share throught VCS checkbox on the top right corner, this will add an xml file to the .</description></item><item><title>Reverse proxy on docker-compose with CORS and SSL</title><link>https://geowarin.github.io/reverse-proxy-on-docker-compose-with-cors-and-ssl/</link><pubDate>Sat, 21 Dec 2019 00:24:53 +0100</pubDate><guid>https://geowarin.github.io/reverse-proxy-on-docker-compose-with-cors-and-ssl/</guid><description>The problem Ackee is a neat self-hosted analytics solution for simple needs (e.g. a blog). On the repo, the authors give instructions to run the tool, a node application, via docker-compose.
On the other hand, the website whose analytics will be tracked needs to include a script that will look like this:
&amp;lt;script async src=&amp;#34;https://unpkg.com/ackee-tracker@3.2.2/dist/ackee-tracker.min.js&amp;#34; data-ackee-server=&amp;#34;https://ackee.com&amp;#34; data-ackee-domain-id=&amp;#34;67bfa855-7569-4d29-a0a3-a2f4ceae2ea3&amp;#34; data-ackee-opts=&amp;#39;{ &amp;#34;ignoreLocalhost&amp;#34;: false }&amp;#39;&amp;gt;&amp;lt;/script&amp;gt; The problem is that localhost:1313, where my blog runs locally, cannot send json requests to https:localhost or whichever host Ackee is running on, if they differ in name/port, etc.</description></item><item><title>Debugging Webflux with IntelliJ</title><link>https://geowarin.github.io/debugging-webflux-with-intellij/</link><pubDate>Fri, 20 Dec 2019 21:04:54 +0100</pubDate><guid>https://geowarin.github.io/debugging-webflux-with-intellij/</guid><description>By default, when you try to debug project reactor calls, you get something like this:
But if you add this dependency :
testImplementation(&amp;#34;io.projectreactor:reactor-tools&amp;#34;) And click on this little funnel:
Also ensure that you have the reactor plugin and that its properly configured.
You get this:
Much better!
Sources:
Intellij blog</description></item><item><title>What I Did Wrong as a CTO</title><link>https://geowarin.github.io/what-i-did-wrong-as-a-cto/</link><pubDate>Sun, 25 Feb 2018 11:33:45 +0100</pubDate><guid>https://geowarin.github.io/what-i-did-wrong-as-a-cto/</guid><description>Being a CTO in a startup is much more than the technical side.
However, the technical decisions you make early with software, especially in a timed-constraint environment like a startup, tend to stick with you for the rest of the project.
In this article, I will be listing a few of the technical decisions I made.
Some of them felt right at all time, some of them I hope not to make again.</description></item><item><title>Archive</title><link>https://geowarin.github.io/archive/</link><pubDate>Thu, 22 Feb 2018 18:12:49 +0100</pubDate><guid>https://geowarin.github.io/archive/</guid><description/></item><item><title>Consuming APIs with Redux, the Shasta way</title><link>https://geowarin.github.io/consuming-apis-with-redux-the-shasta-way/</link><pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/consuming-apis-with-redux-the-shasta-way/</guid><description>Since React is just the view layer of your front-end stack, the community had to provide the solutions for the remaining problems.
Right now there seems to be a consensus for the best libraries. The recommended stack is:
Building: Webpack and babel Managing your UI state: Redux and ImmutableJS Routing: React-router (ahem!) But there seems to be lots of options to connect Redux to your API.
Yesterday, I decided to see what Shasta had in store for us.</description></item><item><title>React freshness</title><link>https://geowarin.github.io/react-freshness/</link><pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/react-freshness/</guid><description>In the javascript community, some people have experienced javascript fatigue.
For me, this fatigue is two folds. First, you need to keep up to date with the frantic pace of redux, react-router and friends and make sure you will be able to migrate your code to the new major versions.
Second, Webpack configuration is not always straight-forward. I know a lot of people that really want to see what React is like and play with it without having to cope with a lot of configuration up-front.</description></item><item><title>Social login with Spring</title><link>https://geowarin.github.io/social-login-with-spring/</link><pubDate>Fri, 12 Feb 2016 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/social-login-with-spring/</guid><description>Nowadays, it&amp;rsquo;s getting rare and even a bit annoying when a service rolls up its own authentication mechanism instead of relying on a OAuth sign-on with our social networks.
Login via social networks means fewer passwords to remember, and stronger guarantees in terms of security because you can check and control the authorizations of the applications you use.
In this article, I will show you how to allow users to log into your application via Twitter from a rich Javascript client (React).</description></item><item><title>Correctly handle JSR-310 (java 8) dates with Jackson</title><link>https://geowarin.github.io/correctly-handle-jsr-310-java-8-dates-with-jackson/</link><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/correctly-handle-jsr-310-java-8-dates-with-jackson/</guid><description>If you are starting a Spring Boot project today, chances are that you want to use Java 8.
One of the most awesome features in Java 8 is the Date and Time API, also known as JSR-310.
By default, Jackson will treat the new dates as normal objects and serialize all the fields that they contain, which will probably not suit your needs.
I will show you how to fix the problem with the jackson-datatype-jsr310 library, within a Spring Boot project, but the concepts here are applicable to any application using Jackson.</description></item><item><title>A simple chat with Spring Boot and RethinkDB</title><link>https://geowarin.github.io/a-simple-chat-with-spring-boot-and-rethinkdb/</link><pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/a-simple-chat-with-spring-boot-and-rethinkdb/</guid><description>The Java driver for RethinkDB has recently been released in beta.
I created a little chat application with Spring Boot, you can see the result on github.
There is a docker-compose file at the root of the project that you can use to run a RethinkDB instance instead of installing it directly on your machine.
Why RethinkDB? I already gave RethinkDB a try a few months ago and I was very impressed with its beautiful admin GUI, its clustering capabilities and its clever and intuitive API.</description></item><item><title>Test your Java application with Groovy</title><link>https://geowarin.github.io/test-your-java-application-with-groovy/</link><pubDate>Wed, 20 Jan 2016 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/test-your-java-application-with-groovy/</guid><description>I think Groovy is a wonderful language. However, I would not advise a complete rewrite of your project in Groovy!
We can however use Groovy to test our Java code.
I&amp;rsquo;m actually a big fan of this approach. I&amp;rsquo;ve been using it to test legacy applications written in Java.
I still couldn&amp;rsquo;t use lambdas or fancy Java 8 features but all of a sudden, my test code was more expressive. I could take advantage closures, power asserts, the Spock DSL and Groovy simple syntax.</description></item><item><title>Build a Docker image of your Spring Boot app</title><link>https://geowarin.github.io/build-a-docker-image-of-your-spring-boot-app/</link><pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/build-a-docker-image-of-your-spring-boot-app/</guid><description>If you like having a self-contained application as a deliverable for your project, the idea of putting your Spring applications in a Docker container might be appealing to you.
In this article, I will show you a simple way to make a docker image the output of your Gradle build, thanks to the gradle-docker plugin.
The code that we will build is a simple console application powered by Spring Boot that will periodically write Chuck Norris facts to the standard output.</description></item><item><title>Spring boot logs in Elastic Search with fluentd</title><link>https://geowarin.github.io/spring-boot-logs-in-elastic-search-with-fluentd/</link><pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/spring-boot-logs-in-elastic-search-with-fluentd/</guid><description>If you deploy a lot of micro-services with Spring Boot (or any other technology), you will have a hard time collecting and making sense of the all logs of your different applications.
In this article, I will show you a simple way to redirect your logs to Elastic Search with a Logback appender.
The demo project is available on github.
While this approach requires very little configuration, the 12 factors app manifesto actually recommends logging to stdout.</description></item><item><title>Integration tests with a Docker JUnit Rule</title><link>https://geowarin.github.io/integration-tests-with-a-docker-junit-rule/</link><pubDate>Wed, 06 Jan 2016 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/integration-tests-with-a-docker-junit-rule/</guid><description>When writing integration tests, you might have to run a third party server or middleware. Your tests should remain fast to run and you should be able to run them from your IDE.
Docker seems a good choice for this task!
I just published a small library that contains a JUnit rule allowing you to start Docker containers before your unit tests.
If that sounds of interest to you, you should give it a try and tell me what you think!</description></item><item><title>The modern java developer</title><link>https://geowarin.github.io/the-modern-java-developer/</link><pubDate>Mon, 28 Dec 2015 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/the-modern-java-developer/</guid><description>My dear colleague Fruzenshtein asked me what I think a modern Java developer should know or learn in 2016.
This is a mix of techniques and tools I&amp;rsquo;ve learned and found useful the past year and the one that I wish to learn in the coming year.
Practices Kent Beck once said he was &amp;ldquo;just a good programmer with great habits&amp;rdquo;. As professional developers, we should all strive to cultivate better habits.</description></item><item><title>Spring Boot and React hot loader</title><link>https://geowarin.github.io/spring-boot-and-react-hot-loader/</link><pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/spring-boot-and-react-hot-loader/</guid><description>When I develop web applications, I love using React. I&amp;rsquo;m also a Spring and groovy addict.
Those two stacks make me more productive. Can we have the best of both worlds?
I will show you step by step how I created this project. Feel free to fiddle with it and give me your feedback.
Goal My perfect stack on the backend is to use Spring boot and groovy. With the latest version of Spring boot, there is a new tool called dev-tools that will automatically reload the embedded server when you recompile your project.</description></item><item><title>Completable futures with Spring async</title><link>https://geowarin.github.io/completable-futures-with-spring-async/</link><pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/completable-futures-with-spring-async/</guid><description>Since version 8, java has a way better abstraction than java.util.Future called CompletableFuture. This new API along with the lambdas enables new ways of reasoning with futures by composing, listening and joining them.
Futures are traditionally created by submitting tasks to an Executor. Spring allows declaring one or multiple executors and will submit any method annotated with @Async as tasks for those executors.
The big problem is that executors still return Futures and not CompletableFutures.</description></item><item><title>The missing fish shell tutorial</title><link>https://geowarin.github.io/the-missing-fish-shell-tutorial/</link><pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/the-missing-fish-shell-tutorial/</guid><description>I must admit it after years of trying to avoid writing script shells: I&amp;rsquo;m not a big fan of bash. Sure you can do amazing things when you become a script guru but for someone who spends his life trying to write readable code, it feels a bit unnatural.
So it was with great pleasure and a bit of excitation that I began playing with the new kid in the shell block: fish.</description></item><item><title>Understanding Spring Boot</title><link>https://geowarin.github.io/understanding-spring-boot/</link><pubDate>Fri, 06 Mar 2015 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/understanding-spring-boot/</guid><description>Spring boot is an opinionated library that allows to create executable Spring applications with a convention over configuration approach.
The magic behind this framework lies in the @EnableAutoConfiguration annotation, which will automatically load all the beans the application requires depending on what Spring Boot finds in the classpath.
The @Enable* annotations The @Enable... annotations are not new, they were first introduced in Spring 3 when the idea of replacing the XML files with java annotated classes is born.</description></item><item><title>Review of Learning Spring Boot</title><link>https://geowarin.github.io/review-of-learning-spring-boot/</link><pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/review-of-learning-spring-boot/</guid><description>Today, I&amp;rsquo;ll be reviewing the first book ever written on Spring Boot, Learning Spring Boot, by Greg L. Turnquist. Packt Publishing, the editor, contacted me to review it during its writing but I&amp;rsquo;ll remain as unbiased as possible.
It&amp;rsquo;s a good book, well worth reading if you want to learn how spring boot works but more globally, it will give you good insights and tips on the capabilities of Spring and its integration with other technologies.</description></item><item><title>A simple Spring Boot and Jersey Application</title><link>https://geowarin.github.io/a-simple-spring-boot-and-jersey-application/</link><pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/a-simple-spring-boot-and-jersey-application/</guid><description>Spring boot RC1 is available.
Update : RC3 released I updated the project.
It takes spring development and fast prototyping to a whole new level by taking care of all the dependencies for you, auto-detecting your configuration, providing an executable jar (great for deploying in the cloud), and much more.
In this post we&amp;rsquo;ll see how to integrate spring-boot with jersey, including testing of Jersey controllers with jersey-test.
Of course, the source code is available on my github.</description></item><item><title>Fun with xpath</title><link>https://geowarin.github.io/fun-with-xpath/</link><pubDate>Thu, 30 Jan 2014 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/fun-with-xpath/</guid><description>I had fun today at work when I had to design a program that allows users to select nodes with xPath but keep the same hierarchical structure as the original xml file.
The result with tests is available on github.
For instance, the following xPath /persons/person[@age &amp;gt; 18]/project[@language = 'java'], would select the lines highlighted in the file below :
Normal xPath result would be a list of nodes like that</description></item><item><title>Complete example of a Spring MVC 3.2 project</title><link>https://geowarin.github.io/complete-example-of-a-spring-mvc-3.2-project/</link><pubDate>Wed, 23 Jan 2013 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/complete-example-of-a-spring-mvc-3.2-project/</guid><description>You want to get started with Spring MVC 3.2 with a complete XML-less configuration? Have a cool simple project with a lot of the nice-to-have features?
A templating framework (we will use SiteMesh for this example - I think it is one of the simplest, most powerful frameworks out there) Localized and custom text and validation messages with reloadable bundles in development UTF-8 encoding filter for your user inputs Use the twitter boostrap for a responsive, slick design Unit tests of your controllers using spring-test-mvc Be able to run it with embedded tomcat or jetty maven plugins?</description></item><item><title>Basic configuration for Jetty and tomcat maven plugins</title><link>https://geowarin.github.io/basic-configuration-for-jetty-and-tomcat-maven-plugins/</link><pubDate>Tue, 22 Jan 2013 04:07:49 +0000</pubDate><guid>https://geowarin.github.io/basic-configuration-for-jetty-and-tomcat-maven-plugins/</guid><description>This is a quick memento on how to set up tomcat7-maven-plugin and jetty-maven plugin (current version is 8).
It is interesting to note both of these servers are servlet 3.0 compatible.
Setting up Jetty :
Now your can run mvn jetty:run
To set up tomcat-7 plugin, you will have to add either the plugin to the pluginManagement section of your pom (more portable) - see below - or adding the pluginGroup to your settings.</description></item><item><title>Generate DDL with hibernate</title><link>https://geowarin.github.io/generate-ddl-with-hibernate/</link><pubDate>Mon, 21 Jan 2013 23:44:07 +0000</pubDate><guid>https://geowarin.github.io/generate-ddl-with-hibernate/</guid><description>I don&amp;rsquo;t know if it&amp;rsquo;s a well known feature but there is a bunch of methods on hibernate Configuration class which will produce DDL for your database according to the dialect in use.
In this blog post we will see how to use those methods to generate a DDL script to set up our database and get rid of those annoying DBAs (just kidding, always review these scripts, they&amp;rsquo;re not production ready).</description></item><item><title>Using Spring Data JPA in a Java SE environment and run tests with dbUnit</title><link>https://geowarin.github.io/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/</link><pubDate>Mon, 21 Jan 2013 15:25:11 +0000</pubDate><guid>https://geowarin.github.io/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/</guid><description>This blog post follows my previous articles on using hibernate as a standalone JPA provider and how to use spring in a Java SE environment.
In this post, I will show you how to use Spring Data JPA, a great project which improves your productivity by generating all CRUD operations for you. Then we will use springtestdbunit to run some very clean tests on our database with spring and dbUnit.</description></item><item><title>Using spring in a Java SE environment and implementing the chain of responsibility pattern</title><link>https://geowarin.github.io/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/</link><pubDate>Sun, 20 Jan 2013 19:31:56 +0000</pubDate><guid>https://geowarin.github.io/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/</guid><description>In this post I will show you how to use spring 3.0 Java based configuration in a Java SE environment, taking advantage of spring autowiring to implement the chain of responsibility design pattern with components and services in a simple project. We will also use spring&amp;rsquo;s PropertySourcesPlaceholderConfigurer to inject custom properties into our beans with the @Value annotation and test our application with spring-test.
Some fun in perspective ! Tag along.</description></item><item><title>Using Hibernate as a JPA provider in a Java SE environment and run tests with dbUnit</title><link>https://geowarin.github.io/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/</link><pubDate>Sun, 20 Jan 2013 16:28:23 +0000</pubDate><guid>https://geowarin.github.io/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/</guid><description>Sometimes it can be useful to use JPA in a minimal environment to test your model or just if you&amp;rsquo;re curious of how things work in your DAO layer behind the scenes. In this blog post, we will create a simple project then see how you can use dbUnit to run some unit tests on your database.
The source code of this blog post is available on my github : https://github.</description></item><item><title>Tuning eclipse</title><link>https://geowarin.github.io/tuning-eclipse/</link><pubDate>Fri, 18 Jan 2013 04:20:19 +0000</pubDate><guid>https://geowarin.github.io/tuning-eclipse/</guid><description>This is a compilation of resources I use to configure eclipse.
The Jvm options Always a big headache, there is a good resource on stack-overflow.
For JVM noobs, I recommend the following reading.
If you are a JVM tuning maniac, you might also like this post and to read the man.
If you&amp;rsquo;re interested, I am maintaining a gist with my up-to-date eclipse flags : https://gist.github.com/4562291
Must-have plugins If you don&amp;rsquo;t know them already, you should check out these plugins :</description></item><item><title>Search</title><link>https://geowarin.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/search/</guid><description/></item></channel></rss>