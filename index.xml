<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Geowarin</title><link>https://geowarin.com/</link><description>Recent content on Geowarin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 17 Apr 2024 17:39:24 +0200</lastBuildDate><atom:link href="https://geowarin.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter 1 - Setting up a Spring web application in no time</title><link>https://geowarin.com/book/chapter-1-setting-up-a-spring-web-application-in-no-time.html</link><pubDate>Sun, 01 Mar 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-1-setting-up-a-spring-web-application-in-no-time.html</guid><description>In the first chapter, you will learn how to bootstrap your application effectively and how to leverage spring boot to get started with spring MVC in a couple of minutes</description><content:encoded><![CDATA[<p>I just finished writing the first chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a>.
That was a lot of fun. I enjoyed sharing the tips and tricks that I use when I bootstrap a Spring application.</p>
<p>In this first chapter, you will learn how to get started with spring MVC in a snap.</p>
<h2 id="know-thy-tools">Know thy tools</h2>
<p>Have you heard of <a href="https://spring.io/tools/sts">Spring Tool Suite</a>? Do you know <a href="http://start.spring.io/">start.spring.io</a>?
Did you know you could actually <em>curl</em> <a href="http://start.spring.io/">start.spring.io</a>?</p>
<p>You will learn all that and much more in this action-packed first chapter!</p>
<h2 id="the-power-of-spring-boot">The power of Spring Boot</h2>
<p>Did you know spring boot actually does a <strong>lot</strong> of things for us?</p>
<ol>
<li>Initializing the <em>DispatcherServlet</em> of Spring MVC</li>
<li>Setting up an encoding filter, which will enforce correct encoding of clients&rsquo; requests</li>
<li>Setting up a view resolver to tell Spring where to find our views</li>
<li>Configuring static resources locations (css, js)</li>
<li>Configuring supported locales and resource bundles</li>
<li>Configuring a multipart resolver for file uploads to work</li>
<li>Including tomcat or jetty to run our application on a web server</li>
<li>Setting up error pages (404, etc)</li>
</ol>
<p>The first chapter walks you through Spring Boot&rsquo;s code to explain how it works and how to customize the default configurations.</p>
<p>A big thank you to <a href="https://twitter.com/phillip_webb">Phillip Webb</a>, co-lead of Spring Boot for helping me and my editor sort
out potential licensing issues when quoting Spring Boot&rsquo;s code. If you&rsquo;re interested, the code is under <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache license</a>
and allows reproduction under the conditions listed in paragraph 4.</p>
<p>Well guys, good talking to you but I&rsquo;d better get back to writing chapter two, which is about the MVC architecture and Spring MVC views and navigation.</p>
]]></content:encoded></item><item><title>Chapter 2 - Mastering the MVC Architecture</title><link>https://geowarin.com/book/chapter-2-mastering-the-mvc-architecture.html</link><pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-2-mastering-the-mvc-architecture.html</guid><description>In the second chapter, we will design a twitter search engine, learning the principles of MVC and DDD along the way.</description><content:encoded><![CDATA[<p>I was so busy writing the third chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a>, I did not take the time to write about chapter 2.</p>
<p>In this outstanding chapter you will learn the principles of the <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC Architecture</a>.
We will also be discussing good practices, the basis of Domain Driven Design and the trade-offs this kind of design imply on a Spring MVC architecture.</p>
<p>A good read on the subject is available on <a href="http://www.petrikainulainen.net/software-development/design/the-biggest-flaw-of-spring-web-applications/">Petri Kainulainen&rsquo;s blog</a>.</p>
<p>You will then set up Spring Boot to work with  <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html">Thyemleaf</a>, the benefits of this good templating engine and how to leverage it effectively in your
MVC application.</p>
<p>In 5 minutes, I will walk you through the process of registering your application on twitter and we will be designing a little but beautiful
tweet search engine using <a href="http://projects.spring.io/spring-social-twitter/">Spring Social Twitter</a>:</p>
<p><img loading="lazy" src="/assets/images/book/chap2-1.png" alt="Search"  title="Search field"  />
</p>
<p><img loading="lazy" src="/assets/images/book/chap2-2.png" alt="Results"  title="Results"  />
</p>
<p>This will give us the opportunity to discuss the navigation in a web application, java 8 streams system, the <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html">Spring Expression Language</a>,
material design, web jars and much more!</p>
<p>At the end of the chapter you will have laid the foundations of the web application that we will deploy on the cloud later and that will make you rich and famous!</p>
<p>I hope you will find the content of this chapter interesting, let me know your thoughts in the comments!</p>
]]></content:encoded></item><item><title>Chapter 3 - Handling forms and complex URL mapping</title><link>https://geowarin.com/book/chapter-3-handling-forms-and-complex-url-mapping.html</link><pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-3-handling-forms-and-complex-url-mapping.html</guid><description>In this chapter, we will create a beautiful profile form with server and client side validation</description><content:encoded><![CDATA[<p>The third chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a> is about the cornerstone of web application: forms.
Oh boy, what a chapter.</p>
<p>In this epic piece of literature, we will create a complete profile form like this one:</p>
<p><img loading="lazy" src="/assets/images/book/chap3-1.png" alt="A beautiful profile form"  title="Profile form"  />
</p>
<p>We will discuss forms, validation, conversion and formatting.</p>
<p>See the birth date field up there? That&rsquo;s a <code>java.time.LocalDate</code>.
Do you wonder how to make it work with Spring MVC?</p>
<p>Our application will be available in different languages and it will be easy to
switch between them.</p>
<p>We will also be looking at a simple way to validate the form on the client side
thanks to the available <a href="http://diveintohtml5.info/forms.html#validation">HTML 5 specification</a>.</p>
<p>That&rsquo;s not all, you might have noticed that we ask the user to fill out a list of tastes, things that interest him.
That&rsquo;s because we will allow searches on multiple keywords with <a href="http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-matrix-variables">matrix variables</a>.</p>
<p>Sounds good? I hope it does and can&rsquo;t wait for the moment when you will be able to get your hands on the book!</p>
]]></content:encoded></item><item><title>Chapter 4 - File Upload and Error Handling</title><link>https://geowarin.com/book/chapter-4-file-upload-error-handling.html</link><pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-4-file-upload-error-handling.html</guid><description>In this chapter, we will implement file upload and see how to handle errors in Spring MVC</description><content:encoded><![CDATA[<p>In the fourth chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a>
We will allow the user to upload his profile picture.</p>
<p><img loading="lazy" src="/assets/images/book/chap3-1.png" alt="Woah, such file upload!"  title="File upload"  />
</p>
<p>The file upload component implies handling errors at two levels:
I/O exceptions at the controller level and multipart exception (a file too big, for instance) at the container level.</p>
<p>If your curious about this part take a look at this <a href="http://stackoverflow.com/questions/29363705/handling-multipartexception-with-spring-boot-and-display-error-page">stackoverflow question</a>.</p>
<p>This will give us the opportunity to discuss error handling in Spring MVC and Spring boot.</p>
<p><img loading="lazy" src="/assets/images/book/chap4-3.png" alt="A beautiful 404 page"  title="Not found"  />
</p>
<p>Can&rsquo;t wait to hear what you think about this chapter!</p>
]]></content:encoded></item><item><title>Chapter 5 - Crafting a RESTful application</title><link>https://geowarin.com/book/chapter-5-crafting-a-restful-application.html</link><pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-5-crafting-a-restful-application.html</guid><description>In this chapter, we will have a look a the principles of RESTful API and learn how to craft one using Spring MVC</description><content:encoded><![CDATA[<p>In this chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a>, we’ll tackle main principles of a RESTful architecture. We’ll learn how to convert data to JSON and handle different media types in the application.</p>
<p>We will use the JSR-310 (Java DateTime) spec from the get-go and see how
to handle them properly in your MVC application.</p>
<h2 id="forever-restful">Forever RESTful</h2>
<p>We will see how REST works in theory: HTTP codes and verbs, API versioning, HATEOAS, etc.</p>
<p>Then, we will design an API that uses both JSON and XML to do a twitter search
and manage users.</p>
<p><img loading="lazy" src="/assets/images/book/chap4-1.png" alt="API"  title="API"  />
</p>
<h2 id="tooling">Tooling</h2>
<p>I will also show you some useful tools to debug REST API.
My favorite one is a little command line tool called <a href="http://httpie.org/">httpie</a>.</p>
<p>You will study the best practice like exceptions handling and custom
error pages.</p>
<p>We will also see how to set up Jackson serialization using mixins and Java 8 dates.</p>
<h2 id="documentation">Documentation</h2>
<p>We will use <a href="http://swagger.io/">swagger</a> to document our API.</p>
<!-- raw HTML omitted -->
<p>I hope you will find the content of this chapter interesting, let me know your thoughts in the comments!</p>
]]></content:encoded></item><item><title>Chapter 6 - Securing your application</title><link>https://geowarin.com/book/chapter-6-securing-your-application.html</link><pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-6-securing-your-application.html</guid><description>In this chapter, we’ll learn how to secure our web application and also how to cope with the security challenges of modern, distributed web applications.</description><content:encoded><![CDATA[<p>In this chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a>, we’ll learn how to secure our web application and also how to cope with the security challenges of modern, distributed web applications.</p>
<p>This is a parts chapter:</p>
<ol>
<li>First, we will set up basic HTTP authentication in a minute</li>
<li>Then, we will design a form-based authentication for the web pages, keeping
the basic authentication for the REST API</li>
<li>We will allow the users to signup via the Twitter OAuth API</li>
<li>Then, we will leverage Spring Session to make sure our application can scale
using a distributed session mechanism</li>
<li>Last, we will configure Tomcat to use secured connection through SSL</li>
</ol>
<!-- raw HTML omitted -->
<h2 id="safe-and-sound">Safe and sound</h2>
<p>At the end of this chapter you will be a security expert.
We will protect our REST API with basic auth, which is secure as well as easy
to interact with.</p>
<p>We will also design a gorgeous login page for our web application:</p>
<!-- raw HTML omitted -->
<h2 id="going-social">Going social</h2>
<p>My favorite part in this chapter is when we use <a href="http://projects.spring.io/spring-social/">Spring Social</a> to allow users to log-in using
their twitter account!</p>
<!-- raw HTML omitted -->
<h2 id="infinite-scaling">Infinite scaling</h2>
<p>We will use <a href="http://projects.spring.io/spring-session/">Spring Session</a>
to put our users&rsquo; sessions into <a href="http://redis.io/">Redis</a> with little configuration.</p>
<p>This will allow us to add more servers to handle high traffic without worrying
about sticky sessions.</p>
<h2 id="ssl">SSL</h2>
<p>In the end, we will see how to use SSL with tomcat.</p>
<p>I hope you will find the content of this chapter interesting, let me know your thoughts in the comments!</p>
]]></content:encoded></item><item><title>Chapter 7 - Leaving nothing to luck with unit and acceptance tests</title><link>https://geowarin.com/book/chapter-7-unit-and-acceptance-tests.html</link><pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-7-unit-and-acceptance-tests.html</guid><description>In this chapter we will learn how to test our application with spring test and fluentlenium as well as with geb and spock.</description><content:encoded><![CDATA[<p>In this chapter, we will make sure our application never regresses thanks to a
handful of unit tests.</p>
<h2 id="to-test-or-not-to-test">To test or not to test?</h2>
<p>Chapter 5 is by far my favorite chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a>!</p>
<p>In this uplifting piece of literature, you will learn more about testing best
practices: TDD, the pyramid of tests, unit tests and end-to-end tests.</p>
<!-- raw HTML omitted -->
<p>We will see the difference behind mocking and stubbing and use mockito and
the power of Spring&rsquo;s IOC to study both options.</p>
<p>With <code>spring-mvc-test</code> we will create unit test for our web controllers as well
as our REST controllers.</p>
<h2 id="acceptance-tests">Acceptance tests</h2>
<p>Using <a href="https://github.com/FluentLenium/FluentLenium">fluentlenium</a>, we will create
simple yet powerful end-to-end tests leveraging Selenium.</p>
<p>I will tell you what the Page Object pattern is and how to use it with fluentlenium.</p>
<p>You will see how to configure Gradle to create a task for our acceptance tests
and generate reports for this task.</p>
<h2 id="making-it-groovy">Making it groovy</h2>
<p>At the end of the chapter I will show you how to make your tests even better and
more readable with <a href="https://github.com/spockframework/spock">Spock</a>.</p>
<p>Then we will use <a href="http://www.gebish.org/">Geb</a>, a wonderful library used by the grails
community to design acceptance tests on top of WebDriver.</p>
<p>I hope you will find the content of this chapter interesting, let me know your thoughts in the comments!</p>
]]></content:encoded></item><item><title>Chapter 8 - Optimizing your requests</title><link>https://geowarin.com/book/chapter-8-optimizing-your-requests.html</link><pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-8-optimizing-your-requests.html</guid><description>In this chapter we will be looking at different techniques to improve our application&amp;#39;s performances using cache, gzipping, etags, async and websockets</description><content:encoded><![CDATA[<p>In this chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a>, we will
implement classic ways of optimizing a web application: cache
control headers and Gzipping.</p>
<p>We will also use Spring&rsquo;s cache abstraction and <a href="https://en.wikipedia.org/wiki/HTTP_ETag">ETags</a>.</p>
<h2 id="more-threads-please">More threads, please</h2>
<p>You will learn how to create asynchronous services with Spring Async.</p>
<p>Spring Async is a nice part of Spring, if you want to dig deeper
see [this article]({% post_url 2015-06-12-completable-futures-with-spring-async %})
where we use Java 8 <code>CompletableFuture</code>s to create a multithreaded application.</p>
<h2 id="websockets">Websockets</h2>
<p>To finish, we will enter the reactive stuff and learn how to use websockets with
<a href="http://sockjs.org">sockjs</a>.</p>
<p>I hope you will find the content of this chapter interesting, let me know your thoughts in the comments!</p>
]]></content:encoded></item><item><title>Chapter 9 - Deploying to the cloud</title><link>https://geowarin.com/book/chapter-9-deploying-to-the-cloud.html</link><pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/chapter-9-deploying-to-the-cloud.html</guid><description>In this chapter, we’ll take a tour of the different cloud providers, understand the challenges and benefits of a distributed architecture and we’ll deploy our web application on Heroku.</description><content:encoded><![CDATA[<p>In this chapter of <a href="/mastering-spring-mvc4.html">Mastering Spring MVC 4</a>, you will deploy your application on the cloud and invite the whole world to see!</p>
<p>We will see how to deploy our application on two popular PaaS: Cloud Foundry and
Heroku.</p>
<p>A big thank you to Wayne Lund at Pivotal who wrote the <a href="https://run.pivotal.io/">Pivotal Web Services</a> part!</p>
<p><img loading="lazy" src="/assets/images/book/chap8-1.png" alt="Our login page on Heroku!"  title="Login page"  />
</p>
<h2 id="know-your-options">Know your options</h2>
<p>We will have a look at the different PaaS providers, then I will guide you through the steps of deploying your application on Cloud Foundry and Heroku.</p>
<p>We will use Redis to distribute our sessions as well as our application cache
and prepare our application to handle thousands of requests without spending a single penny!</p>
<h2 id="im-not-bluffing">I&rsquo;m not bluffing</h2>
<p>I already deployed my application on <a href="http://masterspringmvc.herokuapp.com/">Heroku</a>!</p>
<p>It&rsquo;s a free Heroku instance so you might have to wait 30 seconds for it to go
out of sleep.</p>
<p>As always, I hope you will find the content of this chapter interesting, let me know your thoughts in the comments!</p>
]]></content:encoded></item><item><title>Setup Modern interiors characters in godot</title><link>https://geowarin.com/setup-modern-interiors-characters-in-godot/</link><pubDate>Wed, 17 Apr 2024 17:39:24 +0200</pubDate><guid>https://geowarin.com/setup-modern-interiors-characters-in-godot/</guid><description>Let&amp;rsquo;s make a little script to generate all the AnimatedSprite2Ds from LimeZu&amp;rsquo;s widely successful asset pack in Godot.</description><content:encoded><![CDATA[<p>If you don&rsquo;t know about <a href="https://limezu.itch.io/moderninteriors">Modern Interiors</a>,
you are missing out on a very successful high quality pixel art bundle (and it&rsquo;s very cheap too!).</p>
<p>It comes with hundreds of sprite sheets to make characters composed of:</p>
<ul>
<li>A body</li>
<li>Eyes</li>
<li>Hair</li>
<li>An outfit</li>
<li>An accessory</li>
</ul>
<p>Each sprite sheet is laid out exactly the same way, each sprite has the same dimensions and each sprite frame represents
the same part of the same animation.</p>
<figure>
    <img loading="lazy" src="images/sprite_sheet.png"
         alt="One of the sprite sheets"/> <figcaption>
            <p>One of the sprite sheets</p>
        </figcaption>
</figure>

<p>This means that if you set up five <code>AnimatedSprite2D</code>s on top of each other, in the right order, you will get the
character you want.</p>
<figure>
    <img loading="lazy" src="images/scene.png"
         alt="The character scene is composed of 5 AnimatedSprite2D"/> <figcaption>
            <p>The character scene is composed of 5 AnimatedSprite2D</p>
        </figcaption>
</figure>

<p>The problem is that we will have to manually set up each animation, in 4 directions for hundreds of sprites!</p>
<figure>
    <img loading="lazy" src="images/animations.png"
         alt="The animations in the SpriteFrames window"/> <figcaption>
            <p>The animations in the SpriteFrames window</p>
        </figcaption>
</figure>

<p>This is tedious but what if we automated the process?
If you try to set up an <code>AnimatedSprite2D</code>, you will see that it uses <code>SpriteFrames</code> as a source for its animation,
which is a Godot resource.</p>
<p>So if we had a <code>SpriteFrames</code> for each sprite sheet, all we would have to do is select the one we want for each part of
our character.</p>
<figure>
    <img loading="lazy" src="images/select_body.png"
         alt="We can select a sprite frame for our body"/> <figcaption>
            <p>We can select a sprite frame for our body</p>
        </figcaption>
</figure>

<p>First let&rsquo;s import all the PNGs in our Godot project.</p>
<p>I have created a directory named <code>assets/characters</code> and this directory contains five
subdirectories: <code>Accessories</code>, <code>Bodies</code>, <code>Eyes</code>, <code>Hairstyles</code> and <code>Outfits</code>.
Each directory then contains the sprite sheets. I have chose 32x32 for my sprite dimensions (16x16 and 48x48 are also
available, if you&rsquo;d like another size more, you&rsquo;ll have some minor adjustments to make)</p>
<figure>
    <img loading="lazy" src="images/character_files.png"
         alt="File system view"/> <figcaption>
            <p>File system view</p>
        </figcaption>
</figure>

<p>In my case, the 32x32 sprite sheet is composed of 77 rows and 20 lines of 32x64 sprites.
The sprite at index 0 is always the character looking right, the sprite at index 1 is looking up and the sprites from
index 57 to 62 compose the walking right animation, for example.</p>
<p>So all we have to do is:</p>
<ul>
<li>create a dictionary containing all the animations and their respective indexes.</li>
<li>iterate on all the sprites sheets on disk</li>
<li>for each sprite sheet, create a <code>SpriteFrames</code> based on its image and add each animation with its corresponding image
atlas</li>
</ul>
<figure>
    <img loading="lazy" src="images/sprite_sheet.png"
         alt="The sprite sheet again ;)"/> <figcaption>
            <p>The sprite sheet again ;)</p>
        </figcaption>
</figure>

<p>Let&rsquo;s create an <a href="https://docs.godotengine.org/en/stable/classes/class_editorscript.html">EditorScript</a>.</p>
<p>The code is pretty straight forward:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript" data-lang="gdscript"><span style="display:flex;"><span><span style="color:#ff9f43">@tool</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">extends</span> <span style="color:#f3f99d">EditorScript</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># get the possible extensions of the ImageTexture resource (png, svg, etc)</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">var</span> exts <span style="color:#ff6ac1">:=</span> <span style="color:#f3f99d">ResourceSaver</span><span style="color:#ff6ac1">.</span><span style="color:#57c7ff">get_recognized_extensions</span>(<span style="color:#f3f99d">ImageTexture</span><span style="color:#ff6ac1">.</span><span style="color:#57c7ff">new</span>())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">func</span> <span style="color:#57c7ff">_run</span>() <span style="color:#ff6ac1">-&gt;</span> <span style="color:#9aedfe">void</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#57c7ff">generate_for_dir</span>(<span style="color:#5af78e">&#34;res://assets/characters/Bodies/&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#57c7ff">generate_for_dir</span>(<span style="color:#5af78e">&#34;res://assets/characters/Eyes/&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#57c7ff">generate_for_dir</span>(<span style="color:#5af78e">&#34;res://assets/characters/Hairstyles/&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#57c7ff">generate_for_dir</span>(<span style="color:#5af78e">&#34;res://assets/characters/Outfits/&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#57c7ff">generate_for_dir</span>(<span style="color:#5af78e">&#34;res://assets/characters/Accessories/&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># for each file in the directory, if it&#39;s indeed a Texture2D, generate sprite frames</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">func</span> <span style="color:#57c7ff">generate_for_dir</span>(path: <span style="color:#f3f99d">String</span>) <span style="color:#ff6ac1">-&gt;</span> <span style="color:#9aedfe">void</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">var</span> dir <span style="color:#ff6ac1">:=</span> <span style="color:#f3f99d">DirAccess</span><span style="color:#ff6ac1">.</span><span style="color:#57c7ff">open</span>(path)
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">if</span> dir:
</span></span><span style="display:flex;"><span>        dir<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">list_dir_begin</span>()
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">var</span> file_name <span style="color:#ff6ac1">=</span> dir<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">get_next</span>()
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">while</span> file_name <span style="color:#ff6ac1">!=</span> <span style="color:#5af78e">&#34;&#34;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">if</span> <span style="color:#ff6ac1">!</span>dir<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">current_is_dir</span>() <span style="color:#ff6ac1">&amp;&amp;</span> exts<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">has</span>(file_name<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">get_extension</span>()):
</span></span><span style="display:flex;"><span>                <span style="color:#ff5c57">var</span> res <span style="color:#ff6ac1">:=</span> <span style="color:#f3f99d">ResourceLoader</span><span style="color:#ff6ac1">.</span><span style="color:#ff5c57">load</span>(path<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">path_join</span>(file_name))
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">if</span> res <span style="color:#ff6ac1">is</span> <span style="color:#f3f99d">Texture2D</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#57c7ff">generate_sprite_frames</span>(res)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            file_name <span style="color:#ff6ac1">=</span> dir<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">get_next</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">print</span>(<span style="color:#5af78e">&#34;An error occurred when trying to access </span><span style="color:#5af78e">%s</span><span style="color:#5af78e">&#34;</span> <span style="color:#ff6ac1">%</span> path)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">const</span> anims <span style="color:#ff6ac1">:=</span> {
</span></span><span style="display:flex;"><span>                   <span style="color:#5af78e">&#34;static_right&#34;</span>: [<span style="color:#ff9f43">0</span>],
</span></span><span style="display:flex;"><span>                   <span style="color:#5af78e">&#34;static_up&#34;</span>: [<span style="color:#ff9f43">1</span>],
</span></span><span style="display:flex;"><span>                   <span style="color:#5af78e">&#34;static_left&#34;</span>: [<span style="color:#ff9f43">2</span>],
</span></span><span style="display:flex;"><span>                   <span style="color:#5af78e">&#34;static_down&#34;</span>: [<span style="color:#ff9f43">3</span>],
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                   <span style="color:#5af78e">&#34;idle_right&#34;</span>: [<span style="color:#ff9f43">57</span>, <span style="color:#ff9f43">58</span>, <span style="color:#ff9f43">59</span>, <span style="color:#ff9f43">60</span>, <span style="color:#ff9f43">61</span>, <span style="color:#ff9f43">62</span>],
</span></span><span style="display:flex;"><span>                   <span style="color:#5af78e">&#34;idle_up&#34;</span>: [<span style="color:#ff9f43">63</span>, <span style="color:#ff9f43">64</span>, <span style="color:#ff9f43">65</span>, <span style="color:#ff9f43">66</span>, <span style="color:#ff9f43">67</span>, <span style="color:#ff9f43">68</span>],
</span></span><span style="display:flex;"><span>                   <span style="color:#5af78e">&#34;idle_left&#34;</span>: [<span style="color:#ff9f43">69</span>, <span style="color:#ff9f43">70</span>, <span style="color:#ff9f43">71</span>, <span style="color:#ff9f43">72</span>, <span style="color:#ff9f43">73</span>, <span style="color:#ff9f43">74</span>],
</span></span><span style="display:flex;"><span>                   <span style="color:#5af78e">&#34;idle_down&#34;</span>: [<span style="color:#ff9f43">75</span>, <span style="color:#ff9f43">76</span>, <span style="color:#ff9f43">77</span>, <span style="color:#ff9f43">78</span>, <span style="color:#ff9f43">79</span>, <span style="color:#ff9f43">80</span>],
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                   <span style="color:#5af78e">&#34;walk_right&#34;</span>: [<span style="color:#ff9f43">114</span>, <span style="color:#ff9f43">115</span>, <span style="color:#ff9f43">116</span>, <span style="color:#ff9f43">117</span>, <span style="color:#ff9f43">118</span>, <span style="color:#ff9f43">119</span>],
</span></span><span style="display:flex;"><span>                   <span style="color:#5af78e">&#34;walk_up&#34;</span>: [<span style="color:#ff9f43">120</span>, <span style="color:#ff9f43">121</span>, <span style="color:#ff9f43">122</span>, <span style="color:#ff9f43">123</span>, <span style="color:#ff9f43">124</span>, <span style="color:#ff9f43">125</span>],
</span></span><span style="display:flex;"><span>                   <span style="color:#5af78e">&#34;walk_left&#34;</span>: [<span style="color:#ff9f43">126</span>, <span style="color:#ff9f43">127</span>, <span style="color:#ff9f43">128</span>, <span style="color:#ff9f43">129</span>, <span style="color:#ff9f43">130</span>, <span style="color:#ff9f43">131</span>],
</span></span><span style="display:flex;"><span>                   <span style="color:#5af78e">&#34;walk_down&#34;</span>: [<span style="color:#ff9f43">132</span>, <span style="color:#ff9f43">133</span>, <span style="color:#ff9f43">134</span>, <span style="color:#ff9f43">135</span>, <span style="color:#ff9f43">136</span>, <span style="color:#ff9f43">137</span>],
</span></span><span style="display:flex;"><span>               }
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">const</span> horiz <span style="color:#ff6ac1">:=</span> <span style="color:#ff9f43">57</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">const</span> size  <span style="color:#ff6ac1">:=</span> <span style="color:#f3f99d">Vector2</span>(<span style="color:#ff9f43">32</span>, <span style="color:#ff9f43">64</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">func</span> <span style="color:#57c7ff">generate_sprite_frames</span>(texture: <span style="color:#f3f99d">Texture2D</span>) <span style="color:#ff6ac1">-&gt;</span> <span style="color:#9aedfe">void</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">print</span>(<span style="color:#5af78e">&#34;texture </span><span style="color:#5af78e">%s</span><span style="color:#5af78e">&#34;</span> <span style="color:#ff6ac1">%</span> texture<span style="color:#ff6ac1">.</span>resource_path)
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">#var horiz := floori(texture.get_size().x / size.x)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">var</span> resource_path <span style="color:#ff6ac1">:=</span> texture<span style="color:#ff6ac1">.</span>resource_path
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">var</span> frames <span style="color:#ff6ac1">:=</span> <span style="color:#f3f99d">SpriteFrames</span><span style="color:#ff6ac1">.</span><span style="color:#57c7ff">new</span>()
</span></span><span style="display:flex;"><span>    frames<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">remove_animation</span>(<span style="color:#5af78e">&#34;default&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">for</span> anim_name <span style="color:#ff6ac1">in</span> anims:
</span></span><span style="display:flex;"><span>        frames<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">add_animation</span>(anim_name)
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">var</span> frame_indexes: <span style="color:#f3f99d">Array</span> <span style="color:#ff6ac1">=</span> anims[anim_name]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">for</span> i <span style="color:#ff6ac1">in</span> <span style="color:#ff5c57">range</span>(frame_indexes<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">size</span>()):
</span></span><span style="display:flex;"><span>            <span style="color:#ff5c57">var</span> index: <span style="color:#9aedfe">int</span> <span style="color:#ff6ac1">=</span>  frame_indexes[i]
</span></span><span style="display:flex;"><span>            <span style="color:#ff5c57">var</span> atlas      <span style="color:#ff6ac1">:=</span> <span style="color:#f3f99d">AtlasTexture</span><span style="color:#ff6ac1">.</span><span style="color:#57c7ff">new</span>()
</span></span><span style="display:flex;"><span>            atlas<span style="color:#ff6ac1">.</span>atlas <span style="color:#ff6ac1">=</span> texture
</span></span><span style="display:flex;"><span>            <span style="color:#ff5c57">var</span> pos        <span style="color:#ff6ac1">:=</span> <span style="color:#f3f99d">Vector2</span>(size<span style="color:#ff6ac1">.</span>x <span style="color:#ff6ac1">*</span> (index <span style="color:#ff6ac1">%</span> horiz), size<span style="color:#ff6ac1">.</span>y <span style="color:#ff6ac1">*</span> (index <span style="color:#ff6ac1">/</span> horiz))
</span></span><span style="display:flex;"><span>            atlas<span style="color:#ff6ac1">.</span>region <span style="color:#ff6ac1">=</span> <span style="color:#f3f99d">Rect2</span>(pos, size)
</span></span><span style="display:flex;"><span>            frames<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">add_frame</span>(anim_name, atlas, <span style="color:#ff9f43">1.0</span>, i)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">var</span> file_name <span style="color:#ff6ac1">:=</span> resource_path<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">get_file</span>()<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">trim_suffix</span>(<span style="color:#5af78e">&#34;.&#34;</span> <span style="color:#ff6ac1">+</span> resource_path<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">get_extension</span>())
</span></span><span style="display:flex;"><span>    <span style="color:#f3f99d">ResourceSaver</span><span style="color:#ff6ac1">.</span><span style="color:#57c7ff">save</span>(frames, resource_path<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">get_base_dir</span>()<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">path_join</span>(file_name <span style="color:#ff6ac1">+</span> <span style="color:#5af78e">&#34;.tres&#34;</span>))
</span></span></code></pre></div><p>The part with AtlasTexture is not very well documented, I had to look up
the <a href="https://github.com/godotengine/godot/blob/6dd4a687972fbb53e53aba008cc4fbea2c87d6af/editor/plugins/sprite_frames_editor_plugin.cpp#L297-L300">engine source code</a>
to understand it. And I encourage you to do the same!</p>
<p>Generally, the C++ source code is very close to its equivalent in GDScript!</p>
<p>Execute the script (<code>File &gt; Run</code> or <code>Ctrl+Shift+X</code>), it might hang the editor for a short while (it has a lot of work to
do!).</p>
<p>Then, you will have a <code>SpriteFrames</code> resources generated for each sprite sheet.</p>
<figure>
    <img loading="lazy" src="images/result.png"
         alt="We have generated a SpriteFrames resource for each PNG"/> <figcaption>
            <p>We have generated a SpriteFrames resource for each PNG</p>
        </figcaption>
</figure>

<p>Now drop it in a <code>AnimatedSprite2D</code> and you are ready to roll :)</p>
<p>I have made little test scene in which a character is randomly generated every time you press <code>R</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript" data-lang="gdscript"><span style="display:flex;"><span><span style="color:#ff5c57">extends</span> <span style="color:#f3f99d">CharacterBody2D</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@export</span> <span style="color:#ff5c57">var</span> bodies: <span style="color:#f3f99d">Array</span>[<span style="color:#f3f99d">SpriteFrames</span>] <span style="color:#ff6ac1">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@export</span> <span style="color:#ff5c57">var</span> eyes: <span style="color:#f3f99d">Array</span>[<span style="color:#f3f99d">SpriteFrames</span>] <span style="color:#ff6ac1">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@export</span> <span style="color:#ff5c57">var</span> outfits: <span style="color:#f3f99d">Array</span>[<span style="color:#f3f99d">SpriteFrames</span>] <span style="color:#ff6ac1">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@export</span> <span style="color:#ff5c57">var</span> hairs: <span style="color:#f3f99d">Array</span>[<span style="color:#f3f99d">SpriteFrames</span>] <span style="color:#ff6ac1">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@export</span> <span style="color:#ff5c57">var</span> accessories: <span style="color:#f3f99d">Array</span>[<span style="color:#f3f99d">SpriteFrames</span>] <span style="color:#ff6ac1">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">func</span> <span style="color:#57c7ff">_ready</span>() <span style="color:#ff6ac1">-&gt;</span> <span style="color:#9aedfe">void</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#57c7ff">play_all</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">func</span> <span style="color:#57c7ff">_unhandled_input</span>(event: <span style="color:#f3f99d">InputEvent</span>) <span style="color:#ff6ac1">-&gt;</span> <span style="color:#9aedfe">void</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">if</span> event <span style="color:#ff6ac1">is</span> <span style="color:#f3f99d">InputEventKey</span> <span style="color:#ff6ac1">&amp;&amp;</span> event<span style="color:#ff6ac1">.</span>keycode <span style="color:#ff6ac1">==</span> KEY_R <span style="color:#ff6ac1">&amp;&amp;</span> <span style="color:#ff6ac1">!</span>event<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">is_pressed</span>():
</span></span><span style="display:flex;"><span>        <span style="color:#57c7ff">randomize_char</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">func</span> <span style="color:#57c7ff">randomize_char</span>() <span style="color:#ff6ac1">-&gt;</span> <span style="color:#9aedfe">void</span>:
</span></span><span style="display:flex;"><span>    $Body<span style="color:#ff6ac1">.</span>sprite_frames <span style="color:#ff6ac1">=</span> bodies<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">pick_random</span>()
</span></span><span style="display:flex;"><span>    $Eyes<span style="color:#ff6ac1">.</span>sprite_frames <span style="color:#ff6ac1">=</span> eyes<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">pick_random</span>()
</span></span><span style="display:flex;"><span>    $Hair<span style="color:#ff6ac1">.</span>sprite_frames <span style="color:#ff6ac1">=</span> hairs<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">pick_random</span>()
</span></span><span style="display:flex;"><span>    $Outfit<span style="color:#ff6ac1">.</span>sprite_frames <span style="color:#ff6ac1">=</span> outfits<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">pick_random</span>()
</span></span><span style="display:flex;"><span>    $Accessory<span style="color:#ff6ac1">.</span>sprite_frames <span style="color:#ff6ac1">=</span> accessories<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">pick_random</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#57c7ff">play_all</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">func</span> <span style="color:#57c7ff">play_all</span>() <span style="color:#ff6ac1">-&gt;</span> <span style="color:#9aedfe">void</span>:
</span></span><span style="display:flex;"><span>    $Body<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">stop</span>()
</span></span><span style="display:flex;"><span>    $Eyes<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">stop</span>()
</span></span><span style="display:flex;"><span>    $Hair<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">stop</span>()
</span></span><span style="display:flex;"><span>    $Outfit<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">stop</span>()
</span></span><span style="display:flex;"><span>    $Accessory<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">stop</span>()
</span></span><span style="display:flex;"><span>    $Body<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">play</span>(<span style="color:#5af78e">&#34;idle_down&#34;</span>)
</span></span><span style="display:flex;"><span>    $Eyes<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">play</span>(<span style="color:#5af78e">&#34;idle_down&#34;</span>)
</span></span><span style="display:flex;"><span>    $Hair<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">play</span>(<span style="color:#5af78e">&#34;idle_down&#34;</span>)
</span></span><span style="display:flex;"><span>    $Outfit<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">play</span>(<span style="color:#5af78e">&#34;idle_down&#34;</span>)
</span></span><span style="display:flex;"><span>    $Accessory<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">play</span>(<span style="color:#5af78e">&#34;idle_down&#34;</span>)
</span></span></code></pre></div><p>To set it up, you will have to drag and drop your different sprites frames you have generated to set up the <code>@export</code>
variables.</p>
<figure>
    <img loading="lazy" src="images/test_scene.png"
         alt="Drag and drop all the sprite frames in this scene to test our character generator"/> <figcaption>
            <p>Drag and drop all the sprite frames in this scene to test our character generator</p>
        </figcaption>
</figure>

<p>Here is the result:</p>
<video controls autoplay loop width="100%">
    <source src="./images/tada.webm" type="video/webm" />
    <p>
        Your browser doesn't support HTML video. Here is a
        <a href="./images/tada.webm" download="myVideo.mp4">link to the video</a> instead.
    </p>
</video>

]]></content:encoded></item><item><title>Writing naive code</title><link>https://geowarin.com/writing-naive-code/</link><pubDate>Thu, 17 Nov 2022 12:56:42 +0100</pubDate><guid>https://geowarin.com/writing-naive-code/</guid><description>Is writing naive code the best way to write code?</description><content:encoded><![CDATA[<p>I stumbled on this article on reddit:</p>
<p><a href="https://libreddit.spike.codes/r/programming/comments/ywwxrd/no_architecture_is_better_than_bad_architecture/">No architecture is better than bad architecture - r/programming</a></p>
<p>The article explains three things:</p>
<ul>
<li>No abstraction is better than the wrong abstraction, which I tend to agree with</li>
<li>No design is faster than good design, which is more controversial</li>
<li>Write naive code first and then identify patterns to base your architecture of off.</li>
</ul>
<p>The last idea is not novel, but I personally agree with it for multiple reasons:</p>
<ul>
<li>Naive code is easier to write: it prevents the writer&rsquo;s block when you begin working on a new feature</li>
<li>Naive code is easier to understand: anyone, you or your teammates, can understand and refactor it when needed</li>
</ul>
<p>The most interesting thing about this article, though, is the broader topic it refers to: is naive code good code?</p>
<p>Reflecting on this topic is at the heart of the profession, but I&rsquo;ve personally been thinking a lot about this lately.</p>
<p>Having to work with a couple of juniors, I have to explain why a particular piece of code is better than another
and this is no easy task.</p>
<p>Like wine tasting, code tasting is something that seems to be acquired mostly through experience.</p>
<hr>
<p>Other users of reddit had interesting references as well.</p>
<p><a href="https://libreddit.spike.codes/user/loup-vaillant">u/loup-vaillant</a> writes:</p>
<blockquote>
<p>That reminds me of Ousterhout&rsquo;s <a href="https://www.youtube.com/watch?v=bmSAYlu0NcY">Philosophy of Software Design</a>, and Casey Muratori&rsquo;s <a href="https://caseymuratori.com/blog_0015">semantic compression</a>.</p>
</blockquote>
<p>The first link is <a href="https://www.youtube.com/watch?v=bmSAYlu0NcY">a talk by John Ousterhout</a>, Professor a Standford.</p>
<p>He states that the most important thing in all computer science is &ldquo;problem decomposition&rdquo;:
how do you chop a complicated problem into pieces that you can build independently?</p>
<p>His approach is to teach students the principles of software design, a topic that is unfortunately not taught enough because
it requires teachers with a sizeable coding experience in the industry, as opposed to mostly academic research and papers.</p>
<p><a href="https://www.goodreads.com/en/book/show/39996759-a-philosophy-of-software-design">His book</a> sounds like an interesting read
and certainly one I would like to discuss with my teammates.</p>
<p>I also liked what he said about talent being overrated and that &ldquo;10x programmers&rdquo; are hard workers and not just &ldquo;gifted&rdquo;.</p>
<p>Ousterhout also makes the distinction between &ldquo;tactical&rdquo; and &ldquo;strategic&rdquo; programming.
He coined a name for programmers who write 80% correct code very fast: &ldquo;tactical tornadoes&rdquo;.
The kind of developers that managers like because they deliver faster, but that their teammates hate
because they have to clean up their mess afterwards.</p>
<p>The second link on <a href="https://caseymuratori.com/blog_0015">semantic compression</a> makes the same conclusion that writing good
code is a matter of experience and that it&rsquo;s hard to convey.</p>
<blockquote>
<p>I suspect this has something to do with the fact that good programming seems very straightforward once you know
how to do it, unlike, say, a fancy math technique that retains its sexiness and makes you want to spend the time to post about it.
So, although I don’t have any data to back this up, I strongly suspect that experienced programmers rarely spend time
posting about how they program because they just don’t think it’s anything special.</p>
</blockquote>
<p>The article also dunks on upfront &ldquo;OOP design&rdquo; (UML and co) as a non-productive way of thinking about code, which I enjoyed.</p>
<p>Most importantly, it takes a real world example of a &ldquo;semantic compression&rdquo;, a refactoring where
transforming a naive, repeated, pattern leads to better code.</p>
<hr>
<p><a href="https://libreddit.spike.codes/user/eternaloctober">u/eternaloctober</a> writes:</p>
<blockquote>
<p>I always think of this silly list from &ldquo;Why bad scientific code beats code following &ldquo;best practices&rdquo;&rdquo; <a href="https://yosefk.com/blog/why-bad-scientific-code-beats-code-following-best-practices.html">https://yosefk.com/blog/why-bad-scientific-code-beats-code-following-best-practices.html</a></p>
</blockquote>
<p>This article explains that the code written by scientists is often more enjoyable to work with than code written
by &ldquo;professional&rdquo; programmers because it doesn&rsquo;t try to be too clever for its own good.</p>
<hr>
<p><a href="https://libreddit.spike.codes/user/shevy-java">u/shevy-java</a> writes:</p>
<blockquote>
<p>It&rsquo;s a bit like the Worse is Better article.</p>
<p><a href="https://dreamsongs.com/WorseIsBetter.html">https://dreamsongs.com/WorseIsBetter.html</a></p>
<p>It reminded me a bit of this story:</p>
<p><a href="https://www.folklore.org/StoryView.py?story=Make_a_Mess,_Clean_it_Up!.txt">https://www.folklore.org/StoryView.py?story=Make_a_Mess,_Clean_it_Up!.txt</a></p>
<p>I highly recommend people to read it, from the pre 1983 era. IMO this is also an example why &ldquo;Worse is Better&rdquo; is, oddly enough, actually better than the perceived &ldquo;perfection&rdquo; being better. It has to do with non-linear thinking.</p>
</blockquote>
<p>I really like that Richard Gabriel, the author of &ldquo;worse is better&rdquo;, a cheeky argument that worse code leads to better results,
still has conflicted thoughts about the very proposition he coined 20 years after the fact.</p>
<p>Is worse really better? Should you write naive code on purpose? Should you dumb yourself down to write the most basic
code every time?</p>
<p>It certainly reminded me of &ldquo;Kernighan&rsquo;s Law&rdquo;:</p>
<blockquote>
<p>Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly
as possible, you are, by definition, not smart enough to debug it.</p>
</blockquote>
<p>Like everything in engineering, writing naive code seems to a balancing act between too dumb and too smart, which
would certainly explain why finding the right cursor is so hard.</p>
<hr>
<p>Note:</p>
<p>Ousterhout talks about <a href="https://www.researchgate.net/profile/David-Parnas/publication/200085877_On_the_Criteria_To_Be_Used_in_Decomposing_Systems_into_Modules/links/55956a7408ae99aa62c72622/On-the-Criteria-To-Be-Used-in-Decomposing-Systems-into-Modules.pdf">David Parnas&rsquo; publication</a>
as very influential.</p>
]]></content:encoded></item><item><title>What is a good unit test?</title><link>https://geowarin.com/what-is-a-good-unit-test/</link><pubDate>Fri, 18 Feb 2022 12:50:57 +0100</pubDate><guid>https://geowarin.com/what-is-a-good-unit-test/</guid><description>What constitutes good unit test might be a little more involved than you think. Let&amp;rsquo;s reflect on the practice to make sure that we test our applications as efficiently as possible.</description><content:encoded><![CDATA[<p>At my current job, during interviews, we like to ask this seemingly innocent question:
&ldquo;What is a good unit test?&rdquo;.</p>
<p>It turns out that it is a tricky questions. Let&rsquo;s try to reflect on the practice of testing to make sure that
we write our tests as efficiently as possible.</p>
<h2 id="what-is-a-unit">What is a Unit?</h2>
<p>Right from the start, we see that the definition of a <em>unit</em> is problematic.</p>
<p>Some people will argue that a unit is a function, a class, or even a package.
To me, this feels too restrictive.</p>
<p>For now, let&rsquo;s define a unit as:</p>
<blockquote>
<p>A non-trivial amount of code that does a non-trivial thing</p>
</blockquote>
<p>We will see if we can refine this definition as we reflect on the practice of unit-testing.</p>
<h2 id="what-is-good-about-tests">What is good about tests?</h2>
<p>Let&rsquo;s try to give some properties of &ldquo;good testing&rdquo; practices.</p>
<p>Here is what comes through my mind:</p>
<ul>
<li>Tests catch when the code breaks in unexpected ways</li>
<li>They help me design my code while I am writing it</li>
<li>They give me courage to change/refactor the code down the line</li>
<li>They provide tight feedback loops</li>
</ul>
<h3 id="they-catch-errors">They catch errors</h3>
<p>This is the most obvious advantage of writing tests.</p>
<p>Off-by-one errors, typos, or simply a misunderstanding of what the current code does might lead to a logical error.</p>
<p>We are human, we make mistakes.</p>
<h3 id="they-help-me-design-my-apis">They help me design my APIs</h3>
<p>Through experience, I have become a <a href="https://martinfowler.com/bliki/TestDrivenDevelopment.html">TDD</a> practitioner.
I find that I write code more efficiently when I&rsquo;m writing a test first.</p>
<p>Following TDD by the book would mean adhering to the Red / Green / Refactor mantra.</p>
<ul>
<li>🔴 Red : You write a failing test that highlights what your code is supposed to do next</li>
<li>🟢 Green: You write the minimum amount of code to make that test pass</li>
<li>🔵 Refactor: If necessary, you refactor your code (production or test)</li>
</ul>
<p>=&gt; Repeat until you code does what it is supposed to.</p>
<p>While I find this approach helpful, I do not follow it dogmatically.</p>
<p>What I take issue with is &ldquo;minimal code to make tests fail or pass&rdquo;.</p>
<p>If I think a portion of code is getting complicated, I would typically extract a function.</p>
<p>Then, I&rsquo;ll write a test that looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>test(<span style="color:#5af78e">&#39;it works&#39;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">const</span> output <span style="color:#ff6ac1">=</span> myFunction(some, input);
</span></span><span style="display:flex;"><span>    expect(output).toEqual(
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// what&#39;s the API?
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>    )
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>I make it compile by writing an empty function (that probably returns <code>null</code>).
I begin to write types for inputs and outputs.</p>
<p>I start to think about how different inputs change the output.</p>
<p>And then I start to think about edge cases.</p>
<p>If I come up with multiple things to keep in mind at the same time, I might write another test right away.
Then, I try my best to write code that works from the get-go.</p>
<p>Of course, by all means, write simpler test cases first. Then write more complicated ones so complexity
becomes easier to tackle.</p>
<div class='admonition note'>
    <span class="icon"></span>
    <p>Don&rsquo;t be dogmatic, be productive.</p>
</div>

<h3 id="they-give-me-courage-to-change-the-existing-code">They give me courage to change the existing code</h3>
<p>We all have heard or lived with <a href="https://martinfowler.com/bliki/TechnicalDebt.html">technical debt</a>.</p>
<p>Code ages and sometimes it does not age well.
We want to be able to refactor it to reflect our current understanding of the domain.</p>
<p>This must be done as often as necessary and, therefore, be as painless as possible.</p>
<h3 id="they-give-me-immediate-feedback">They give me immediate feedback</h3>
<p>Unit tests must be fast to run.</p>
<p>This is why some people oppose them to &ldquo;integration tests&rdquo; or &ldquo;end-to-end tests&rdquo;.</p>
<p>I would argue that you should thrive to make all kinds of tests fast.</p>
<p>The difference between those three kinds of tests might not be obvious and again, I think it comes down
to the definition of &ldquo;unit&rdquo;.</p>
<p>Let me propose the following definitions:</p>
<blockquote>
<p>Integration tests execute code that is &ldquo;off unit&rdquo;.</p>
</blockquote>
<blockquote>
<p>End-to-end tests are about user interactions. Through the UI we can interact with our product and assert what the UI shows.</p>
</blockquote>
<p>I would argue that, more importantly than speed, these kinds of tests differ by the maintenance effort they require.</p>
<p>Most people are familiar with the <a href="https://martinfowler.com/bliki/TestPyramid.html">test pyramid</a>, where the base
is wider and composed of unit tests, and the tip is narrower and composed of fewer &ldquo;high maintenance&rdquo; tests.</p>
<p>Following this practice you&rsquo;ll have mostly fast, easy to maintain, tests and a few high-maintenance and potentially
slower tests.</p>
<h2 id="is-there-such-a-thing-as-too-many-tests">Is there such a thing as too many tests?</h2>
<p><strong>Yes.</strong></p>
<div class='admonition note'>
    <span class="icon"></span>
    <p>One measure of good code is <em>high cohesion</em> and <em>low coupling</em>.</p>
</div>

<p>In other words, maximizing how easy it is to change the code.</p>
<p>Ideally, we want a minimal code change to break a minimal amount of tests.</p>
<p>Therefore, we should apply the same &ldquo;clean code&rdquo; principles to the tests as we apply to production code.</p>
<p>We should always Refactor/simplify/delete unnecessary tests.</p>
<p>See: <a href="https://essentials.xebia.com/maximize-cohesion-minimize-coupling/">Maximize cohesion Minimize coupling</a></p>
<h2 id="can-we-predict-the-future">Can we predict the future?</h2>
<p>Now that we talked about cohesion and coupling, we might propose a better definition for a &ldquo;unit&rdquo;:</p>
<blockquote>
<p>A Unit is an arbitrary amount of related code that we expect to change altogether</p>
</blockquote>
<p>All the nuance is in &ldquo;we expect&rdquo;. With our current knowledge of the domain, we expect some part of the code
to be expended in the future.</p>
<p>We might define some extensions points or make it easy to add behaviors by adding variables in an array, or a
configuration file.</p>
<p>If your predictions are wrong, you might have over-engineered your code. Conversely, you might have missed potential
abstractions that would have made your code easier to change.</p>
<p>I think the latter is definitely better (<a href="https://www.martinfowler.com/bliki/Yagni.html">YAGNI</a>).
If a portion of code is hard to change, we can refactor it until it&rsquo;s easy to change and then, make the change.</p>
<div class='admonition note'>
    <span class="icon"></span>
    <p>Over-engineering complicates testing.</p>
</div>

<h2 id="what-to-mockfakestub">What to mock/fake/stub?</h2>
<p>With a better definition of a &ldquo;unit&rdquo;, we may want to explore what should be tested and what should not.
And what the real difference between unit and integration tests is.</p>
<p>The usual candidates for mocking are:</p>
<ul>
<li>Database queries</li>
<li>Network in general</li>
<li>Code not directly under our responsibility</li>
</ul>
<p>My rule of thumb is:</p>
<div class='admonition note'>
    <span class="icon"></span>
    <p>Mock when it is inconvenient to call &ldquo;off-unit&rdquo; code.</p>
</div>

<p>Some mocking tools are <em>fragile</em> (using reflection, code instrumentation). They make it easy to couple your mocks
to implementation details and are prone to breaking.</p>
<div class='admonition warning'>
    <span class="icon"></span>
    <p>Remember that mocking couples the testing code to implementation details.</p>
</div>

<p>Favor simplicity. Write your code such as dependencies are hidden behind small interfaces or functions.</p>
<p>Then, they become simple to <strong>stub</strong>.</p>
<p>Mocking is a balancing act between:</p>
<ul>
<li>Maximizing speed</li>
<li>Minimizing coupling of the test code to implementation details</li>
<li>Convenience (tooling)</li>
</ul>
<p>You might find some cases where hitting a real database, for instance, is not that &ldquo;inconvenient&rdquo;.</p>
<p>If your unit tests automatically launch a PostgreSQL database in a container in 0.5 seconds, it might be a pretty good
tradeoff and reduce the overall amount of tests you write, as well as improve your confidence in your code.</p>
<p>See: <a href="https://martinfowler.com/articles/mocksArentStubs.html">Mocks Aren&rsquo;t Stubs</a></p>
<h2 id="conclusion">Conclusion</h2>
<p>Code always has good reasons to change.</p>
<p>Rigid definitions are not helpful because they might make us forget the most important:
tests are a tool that should make the code easier write and to change.</p>
<p>Keep that goal in mind and you&rsquo;ll write better code.</p>
<p>What about you? Do you agree with my analysis? How do you test your code?</p>
]]></content:encoded></item><item><title>C# code style</title><link>https://geowarin.com/c-sharp-code-style/</link><pubDate>Sat, 05 Feb 2022 02:12:39 +0100</pubDate><guid>https://geowarin.com/c-sharp-code-style/</guid><description>Use editor config files to enforce your code style automatically!</description><content:encoded><![CDATA[<p>I&rsquo;ve begun coding in C# both as a gamedev hobbyist and at my new job.</p>
<p>I have a java and javascript background, where we have tools to ensure a
consistent code style between projects, like <a href="https://prettier.io/">prettier</a>.</p>
<p>I was a bit surprised that most C# project do not seem to adhere to common, explicitly stated rules or,
at least, did not seem to enforce any via tooling.</p>
<p>Rider, my favorite editor, does not have a clear-cut convention to apply on all projects.
Instead, it tries to automatically detect the current project&rsquo;s code style and adhere to it,
which does not help.</p>
<h2 id="existing-code-styles">Existing code styles</h2>
<h3 id="microsoft">Microsoft</h3>
<p>Microsoft has <a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines">some guidelines</a>,
but I found them a bit lacking.</p>
<p>Roslyn has <a href="https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md">a strict code style</a>.
It is enforced via their <a href="https://github.com/dotnet/codeformatter">code formatter</a>.</p>
<p>They also have an <a href="https://github.com/dotnet/roslyn/blob/main/.editorconfig">.editorconfig file</a>.</p>
<h4 id="roslyn-code-styles-summary">Roslyn code style&rsquo;s summary:</h4>
<ul>
<li>4 spaces indentation</li>
<li><code>_camelCase</code> for private fields</li>
<li><code>readonly</code> where applicable</li>
<li>use <code>var</code> only when usage is obvious</li>
<li><code>PascalCase</code> for constant</li>
<li>use braces for <code>if</code>/<code>else</code> blocks except when they all fit on a single line</li>
<li>new lines before braces</li>
</ul>
<p>These rules are common in most C# projects I&rsquo;ve read.</p>
<h3 id="google">Google</h3>
<p>Google has a <a href="https://google.github.io/styleguide/csharp-style.html">different code style</a>, which
tries to remove ambiguities from the official Microsoft guidelines.</p>
<h4 id="google-code-styles-summary">Google code style&rsquo;s summary:</h4>
<ul>
<li>2 spaces indentation</li>
<li><code>_camelCase</code> for every &ldquo;privatish&rdquo; field (<code>private</code>, <code>internal</code>, etc.)</li>
<li><code>PascalCase</code> for everything <code>public</code></li>
<li><code>I</code> prefix for interfaces</li>
<li>use <code>var</code> only when usage is obvious</li>
<li>Always use braces, even when optional</li>
<li><strong>NO</strong> new lines before braces</li>
</ul>
<p>My personal preferences goes to google&rsquo;s because I like braces for clarity.</p>
<p>As a java and javascript developer, new lines before braces trigger me a little 😀.</p>
<p>And, perhaps more importantly, naming rules for <code>public</code> vs <code>private</code> stuff are not ambiguous
and simple to follow.</p>
<h2 id="tooling-via-editor-config">Tooling via editor config</h2>
<p>Both Visual Studio and Rider support coding style via <a href="https://editorconfig.org/">editorconfig</a>:</p>
<ul>
<li><a href="https://www.jetbrains.com/help/rider/2021.3/Using_EditorConfig.html">Rider</a></li>
<li><a href="https://docs.microsoft.com/en-us/visualstudio/ide/code-styles-and-code-cleanup?view=vs-2022">Visual Studio</a></li>
</ul>
<p>I stumbled upon a great <a href="https://jonjam.medium.com/c-code-style-using-editorconfig-9d38de65527d">medium article</a> by Jonathan Harrison
that gave me a simple base to work on.</p>
<p>In summary, it allows you to define styles:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#57c7ff">dotnet_naming_style.pascal_case_style.capitalization</span> <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">pascal_case
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">                    </span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">dotnet_naming_style.lower_camel_case_style.required_prefix</span> <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">_</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">dotnet_naming_style.lower_camel_case_style.capitalization</span> <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">camel_case</span>
</span></span></code></pre></div><p>You can then use those styles in rules that have this form <code>&lt;kind&gt;.&lt;name&gt;.&lt;prop&gt;</code>, where the
<code>&lt;name&gt;</code> is defined by you:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#78787e"># privatish fields and properties: _camelCase</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># define &#39;private_fields&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">dotnet_naming_symbols.private_fields.applicable_kinds</span> <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">field</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">dotnet_naming_symbols.private_fields.applicable_accessibilities</span> <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">private, protected, internal, protected_internal, private_protected</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># apply lower_camel_case_style to private fields</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">dotnet_naming_rule.private_rule.symbols</span> <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">private_fields</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">dotnet_naming_rule.private_rule.style</span> <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">lower_camel_case_style</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># Use PascalCase for public fields</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">dotnet_naming_symbols.public_fields.applicable_kinds</span> <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">field</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">dotnet_naming_symbols.public_fields.applicable_accessibilities</span> <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">public</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">dotnet_naming_rule.pascal_case_for_public_fields.symbols</span> <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">public_fields</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">dotnet_naming_rule.pascal_case_for_public_fields.style</span> <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">pascal_case_style</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">dotnet_naming_rule.pascal_case_for_public_fields.severity</span> <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">warning</span>
</span></span></code></pre></div><p>See <a href="https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#net-style-rules">the documentation</a>.</p>
<p>I created my personal editorconfig, trying to enforce google rules:</p>
<p><a href="https://gist.github.com/geowarin/03a8133c10bc4f103dda3167f7502feb">https://gist.github.com/geowarin/03a8133c10bc4f103dda3167f7502feb</a></p>
<p>It&rsquo;s probably not 100% correct, but I&rsquo;ll try to update it as I go.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Tooling is crucial to have a homogenous code style in your projects.</p>
<p>I know that most C# devs will be horrified by my personal code style but this is
irrelevant. What&rsquo;s important is to have a code style and be consistent.</p>
<p>I now have an <code>.editorconfig</code> file that I can drop in my projects. It is applied automatically
when I format my code.</p>
<p>This is enough for my side projects, but there are other tools that might be interesting
to look at in the future:</p>
<ul>
<li><a href="https://github.com/dotnet/format">dotnet format</a></li>
<li><a href="https://github.com/belav/csharpier">CSharpier</a></li>
</ul>
<p>There also seems to be <a href="https://docs.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#enforcecodestyleinbuild">a way</a>
to enforce code style in the dotnet build.</p>
<p>C# aficionados, I&rsquo;m curious to hear your thoughts! Do you have a code style in your projects?
Do you have tools to enforce it?</p>
]]></content:encoded></item><item><title>Typescript refactorings</title><link>https://geowarin.com/typescript-refactorings/</link><pubDate>Sun, 19 Dec 2021 16:44:00 +0100</pubDate><guid>https://geowarin.com/typescript-refactorings/</guid><description>Essential React and Typescript refactorings</description><content:encoded><![CDATA[<p>If you are using React and Typescript, there is a lot that your editor can do to help you.</p>
<p>Here are my favorite refactorings, I&rsquo;m using IntelliJ for the screencast, but most of this
will be available in VSCode as well.</p>
<h2 id="rename">Rename</h2>
<p>If I had to take a single refactoring to a desert island, it would be the &ldquo;rename&rdquo; refactoring.</p>
<p>With a typed language, you have no reasons not to use this.</p>
<figure>
    <img loading="lazy" src="images/rename.gif"
         alt="Rename (Shift&#43;F6)"/> <figcaption>
            <p>Rename (Shift+F6)</p>
        </figcaption>
</figure>

<p>IntelliJ has smart renames and understand getter/setter paradigms.</p>
<p>Compared to <code>Ctrl+R</code> or other manual replace actions, your editor will make sure that you correctly select
the relevant variables/methods, as well as being a lot faster.</p>
<h2 id="extract-component">Extract component</h2>
<p>This refactoring is a real MVP. This enables a whole workflow for me: when I prototype, I lay down all the HTML
until it looks right. Then I can extract subcomponents with a simple keybinding.</p>
<figure>
    <img loading="lazy" src="images/extract-component.gif"
         alt="Extract component (no default keybinding)"/> <figcaption>
            <p>Extract component (no default keybinding)</p>
        </figcaption>
</figure>

<p>I have bound this refactoring to <code>Ctlr+Alt+Shift+M</code> because it resembles the extract method refactoring (<code>Ctlr+Alt+M</code>).</p>
<p>You should definitely check out the <code>Extract method</code> refactoring, by the way 😀.</p>
<h2 id="extract-variable">Extract variable</h2>
<p>This will allow you to add meaningful names to your code in a heartbeat.</p>
<figure>
    <img loading="lazy" src="images/extract-var.gif"
         alt="Extract variable (Ctrl&#43;Alt&#43;V)"/> <figcaption>
            <p>Extract variable (Ctrl+Alt+V)</p>
        </figcaption>
</figure>

<p>I should have checked the <code>const</code> checkbox here, to have a <code>const</code> variable generated,
instead of a <code>let</code>. 🤦‍</p>
<h2 id="extract-type">Extract type</h2>
<p>The extract variable refactoring also works on types!</p>
<figure>
    <img loading="lazy" src="images/extract-type.gif"
         alt="Extract type (Ctrl&#43;Alt&#43;V)"/> <figcaption>
            <p>Extract type (Ctrl+Alt+V)</p>
        </figcaption>
</figure>

<p>You can then use <code>Alt+Enter</code> to convert the type to an interface if you wish.</p>
<h2 id="move">Move</h2>
<p>I&rsquo;m nearly done with my refactoring here, I just need my menu to be in its own file.</p>
<figure>
    <img loading="lazy" src="images/move.gif"
         alt="Move (F6)"/> <figcaption>
            <p>Move (F6)</p>
        </figcaption>
</figure>

<p>And voilà!</p>
<h2 id="conclusion">Conclusion</h2>
<p>Refactoring can dramatically increase your productivity by providing useful keybindings for complex code
transformations.</p>
<p>They also give you full confidence that the resulting code will be 100% valid.</p>
<p>Finally, while I showed you examples on a small scale, you can probably imagine how much time will
be saved on larger scale refactorings!</p>
<p>Thanks to <a href="https://horsty.fr/">horsty</a> for encouraging me to write this article.
You should check out his blog (in French). He&rsquo;s using the same blog template as I do, he is
a man of taste. 😉</p>
]]></content:encoded></item><item><title>Convert blend files to gltf using a script</title><link>https://geowarin.com/convert-blend-files-to-gltf-using-a-script/</link><pubDate>Tue, 16 Nov 2021 00:44:59 +0100</pubDate><guid>https://geowarin.com/convert-blend-files-to-gltf-using-a-script/</guid><description>Here is how to convert blend files to gltf in one click!</description><content:encoded><![CDATA[<h2 id="scripts">Scripts</h2>
<p>Put this script in your path (e.g.,: <code>~/bin/blend-export</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#78787e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">DIR</span><span style="color:#ff6ac1">=</span><span style="color:#ff6ac1">$(</span>dirname <span style="color:#5af78e">&#34;</span><span style="color:#ff5c57">$0</span><span style="color:#5af78e">&#34;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>blender <span style="color:#5af78e">&#34;</span><span style="color:#ff5c57">$1</span><span style="color:#5af78e">&#34;</span> --background -noaudio -P <span style="color:#5af78e">&#34;</span><span style="color:#ff5c57">$DIR</span><span style="color:#5af78e">/blender/to_gltf.py&#34;</span>
</span></span></code></pre></div><p>This refers to a python script that you can put in <code>~/bin/blender/to_gltf.py</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> bpy
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> os
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>filepath <span style="color:#ff6ac1">=</span> os<span style="color:#ff6ac1">.</span>path<span style="color:#ff6ac1">.</span>basename(bpy<span style="color:#ff6ac1">.</span>data<span style="color:#ff6ac1">.</span>filepath)
</span></span><span style="display:flex;"><span>basepath <span style="color:#ff6ac1">=</span> os<span style="color:#ff6ac1">.</span>path<span style="color:#ff6ac1">.</span>splitext(filepath)
</span></span><span style="display:flex;"><span>output_file_path <span style="color:#ff6ac1">=</span> basepath[<span style="color:#ff9f43">0</span>] <span style="color:#ff6ac1">+</span> <span style="color:#5af78e">&#34;.gltf&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>bpy<span style="color:#ff6ac1">.</span>ops<span style="color:#ff6ac1">.</span>export_scene<span style="color:#ff6ac1">.</span>gltf(filepath<span style="color:#ff6ac1">=</span>output_file_path, export_format<span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;GLTF_EMBEDDED&#34;</span>)
</span></span></code></pre></div><p>This is straight forward:</p>
<ul>
<li>The bash scripts open a blend file in blender, in the background, and directly executes a script</li>
<li>The script uses the blender api to convert the current scene to gltf</li>
</ul>
<p>Learn more here:</p>
<ul>
<li><a href="https://docs.blender.org/manual/en/latest/advanced/command_line/arguments.html">Blender Command Line Arguments</a></li>
<li><a href="https://docs.blender.org/api/2.93/bpy.ops.export_scene.html?highlight=gltf#bpy.ops.export_scene.gltf">Blender API</a></li>
</ul>
<h2 id="autocomplete">Autocomplete</h2>
<p>A neat trick: you can use the <a href="https://github.com/nutti/fake-bpy-module">fake-bpy-module</a> python module
to get auto-completions in your editor.</p>
<p>On arch linux, you can find this <a href="https://aur.archlinux.org/packages/python-fake-bpy-module-2.93">in the AUR</a></p>
<h2 id="thunar">Thunar</h2>
<p>Finally, I like to have this action in my context menu. I can even convert
a bunch of blend files in on click.</p>
<figure>
    <img loading="lazy" src="images/thunar.gif"/> 
</figure>

<p>To do this, go in the <code>Edit &gt; Configure custom actions</code> menu and add a new entry.</p>
<figure>
    <img loading="lazy" src="images/thunar-action.png"/> 
</figure>

<p>Basics</p>
<ul>
<li>Name: blend to gltf</li>
<li>Command: <code>for file in %F; do /home/geo/bin/blend-export &quot;$file&quot;; done</code></li>
</ul>
<p>Appearance condition</p>
<ul>
<li>File Pattern: <code>*.blend</code></li>
<li>Appears if selections contains: other files</li>
</ul>
<p>You can find this <a href="https://github.com/geowarin/dotfiles-linux/blob/main/.config/Thunar/uca.xml">in my dotfiles</a>.</p>
]]></content:encoded></item><item><title>Thumbnails in Linux</title><link>https://geowarin.com/thumbnails-in-linux/</link><pubDate>Sat, 11 Sep 2021 18:42:59 +0200</pubDate><guid>https://geowarin.com/thumbnails-in-linux/</guid><description>Linux has a nice system to display thumbnails. Let&amp;rsquo;s try it to display GLTF files in thunar.</description><content:encoded><![CDATA[<div class='admonition note'>
    <span class="icon"></span>
    <p><a href="https://github.com/f3d-app/f3d">f3d</a> is available in the AUR and automatically sets up file associations and
thumbnailers for a lot of common 3D models. I suggest that you use that instead.</p>
</div>

<h2 id="mime-mapping">Mime mapping</h2>
<p>In my distro, there were no mimetypes declared for gltf/glb files.</p>
<p>So I added the following mapping in <code>~/.local/share/mime/packages/gltf.xml</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#78787e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;mime-info</span> <span style="color:#57c7ff">xmlns=</span><span style="color:#5af78e">&#39;http://www.freedesktop.org/standards/shared-mime-info&#39;</span><span style="color:#ff6ac1">&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">&lt;mime-type</span> <span style="color:#57c7ff">type=</span><span style="color:#5af78e">&#34;model/gltf+json&#34;</span><span style="color:#ff6ac1">&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;comment&gt;</span>GLTF model<span style="color:#ff6ac1">&lt;/comment&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;icon</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;model-stl&#34;</span><span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;glob</span> <span style="color:#57c7ff">pattern=</span><span style="color:#5af78e">&#34;*.gltf&#34;</span><span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">&lt;/mime-type&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;mime-type</span> <span style="color:#57c7ff">type=</span><span style="color:#5af78e">&#34;model/gltf.binary&#34;</span><span style="color:#ff6ac1">&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;comment&gt;</span>GLTF binary model<span style="color:#ff6ac1">&lt;/comment&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;icon</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;model-stl&#34;</span><span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;glob</span> <span style="color:#57c7ff">pattern=</span><span style="color:#5af78e">&#34;*.glb&#34;</span><span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">&lt;/mime-type&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/mime-info&gt;</span>
</span></span></code></pre></div><p>Let&rsquo;s update the mime database with <code>update-mime-database ~/.local/share/mime</code>.</p>
<h2 id="gltf-viewer">Gltf viewer</h2>
<p>I found a nice program, written in rust, to preview gltf files:
<a href="https://github.com/bwasty/gltf-viewer">gltf-viewer</a></p>
<p>Let&rsquo;s add a desktop entry for this in
<code>/home/geo/.local/share/applications/gltf_viewer.desktop</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#ff6ac1">[Desktop Entry]</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">Name</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">GLTF Viewer</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">GenericName</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">3D Model viewer</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">Comment</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">3D Model viewer</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">Exec</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">/home/geo/bin/gltf-viewer</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">Terminal</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">false</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">Type</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">Application</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">Icon</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">acreloaded</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">Categories</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">Graphics;3DGraphics;Viewer;</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">MimeType</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">model/gltf+json;model/gltf.binary;</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">NoDisplay</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">false</span>
</span></span></code></pre></div><p>This will associate <code>gltf-viewer</code> with our glb/gltf files.
The program should launch when clicking gltf files in the file manager.</p>
<p>You might have to <code>update-desktop-database ~/.local/share/applications</code>
for this to take effect.</p>
<h2 id="thumbnails">Thumbnails</h2>
<p><code>gltf-viewer</code> also has a feature to output a png image given a 3D model
as input.</p>
<p>Let&rsquo;s write a little script to use that. I&rsquo;ll put this in my path in <code>~/bin/gltf-thumbnailer</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#78787e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span><span style="color:#ff5c57">input</span><span style="color:#ff6ac1">=</span><span style="color:#ff5c57">$1</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">output</span><span style="color:#ff6ac1">=</span><span style="color:#ff5c57">$2</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">size</span><span style="color:#ff6ac1">=</span><span style="color:#ff5c57">$3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>/home/geo/bin/gltf-viewer -s <span style="color:#5af78e">&#34;</span><span style="color:#ff5c57">$output</span><span style="color:#5af78e">&#34;</span> -w <span style="color:#5af78e">&#34;</span><span style="color:#ff5c57">$size</span><span style="color:#5af78e">&#34;</span> -h <span style="color:#5af78e">&#34;</span><span style="color:#ff5c57">$size</span><span style="color:#5af78e">&#34;</span> <span style="color:#5af78e">&#34;</span><span style="color:#ff5c57">$input</span><span style="color:#5af78e">&#34;</span>
</span></span></code></pre></div><p>Now the final piece of the puzzle: creating a thumbnail entry in <code>/usr/share/thumbnailers/gltf.thumbnailer</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#ff6ac1">[Thumbnailer Entry]</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">TryExec</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">/home/geo/bin/gltf-thumbnailer</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">Exec</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">/home/geo/bin/gltf-thumbnailer %i %o %s</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">MimeType</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">model/gltf+json;model/gltf.binary;</span>
</span></span></code></pre></div><p>Here is an example of the parameters you can pass to your program:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span># %u %o %i %s
</span></span><span style="display:flex;"><span># %u: url (ex: file:///home/geo/Models/gltf/bookB.gltf.glb)
</span></span><span style="display:flex;"><span># %o: output thumbnail (ex: /tmp/tumbler-X0YBM90.png) 
</span></span><span style="display:flex;"><span># %i: input file (ex: /home/geo/Models/gltf/bookB.gltf.glb)
</span></span><span style="display:flex;"><span># %s: size (ex: 128)
</span></span></code></pre></div><p>If you mess up, you can always remove the thumbnail cache:
<code>rm -rf .cache/thumbnails/</code></p>
]]></content:encoded></item><item><title>Run your frontend alongside spring boot</title><link>https://geowarin.com/run-your-frontend-alongside-spring-boot/</link><pubDate>Mon, 23 Dec 2019 01:20:59 +0100</pubDate><guid>https://geowarin.com/run-your-frontend-alongside-spring-boot/</guid><description>Running a javascript application alongside your spring boot backend can be bit of a conundrum. Here are several ways to tackle this problem.</description><content:encoded><![CDATA[<p>Assumptions:</p>
<ul>
<li>Your backend serves the API (REST, graphQL)</li>
<li>You build your javascript with a separate bundler (parcel, webpack)</li>
<li>Your frontend uses a push state (HTML 5 history) router</li>
<li>You want hot module reloading (HMR) for the best developer experience</li>
</ul>
<h2 id="tldr">TLDR;</h2>
<p>The <a href="https://github.com/geowarin/boot-js">github repository</a> shows four different solutions.</p>
<h2 id="1-cors">1. CORS</h2>
<p>The most obvious solution is to set up the backend to allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">Cross-Origin Resource Sharing</a> (CORS)
with the frontend, which runs on the development web server.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ConditionalOnProperty</span>(name = [<span style="color:#5af78e">&#34;com.geowarin.cors.allowedOrigin&#34;</span>])
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">fun</span> <span style="color:#57c7ff">corsFilter</span>(corsProperties: CorsProperties): CorsWebFilter {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">val</span> source = UrlBasedCorsConfigurationSource().apply {
</span></span><span style="display:flex;"><span>      registerCorsConfiguration(<span style="color:#5af78e">&#34;/api/**&#34;</span>, CorsConfiguration().apply {
</span></span><span style="display:flex;"><span>        addAllowedOrigin(corsProperties.allowedOrigin<span style="color:#ff6ac1">!!</span>)
</span></span><span style="display:flex;"><span>        addAllowedHeader(<span style="color:#5af78e">&#34;*&#34;</span>)
</span></span><span style="display:flex;"><span>        addAllowedMethod(<span style="color:#5af78e">&#34;*&#34;</span>)
</span></span><span style="display:flex;"><span>      })
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> CorsWebFilter(source)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We run the frontend with its included web server on <code>localhost:1234</code>.
The spring backend runs on <code>localhost:8080</code>.</p>
<p>Navigating on <code>localhost:1234</code>, you will see that the frontend is able to call web services because the backend allows
CORS from that origin.</p>
<p>Pros:</p>
<ul>
<li>Close to a production environment</li>
<li>Simple enough</li>
</ul>
<p>Cons:</p>
<ul>
<li>CORS?</li>
</ul>
<h2 id="2-embed-javascript-into-the-backend">2. Embed javascript into the backend</h2>
<p>Another solution is to embed the frontend resources directly inside the spring server, as static resources.
The advantage is that we have only one web server and everything is on the same host.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#ff6ac1">val</span> acceptsHtmlOnly: RequestPredicate = RequestPredicate { request <span style="color:#ff6ac1">-&gt;</span>
</span></span><span style="display:flex;"><span>  request.headers().accept().contains(<span style="color:#f3f99d">MediaType</span>.TEXT_HTML) <span style="color:#ff6ac1">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>      !request.headers().accept().contains(<span style="color:#f3f99d">MediaType</span>.ALL)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">class</span> <span style="color:#f3f99d">RouterConfig</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">fun</span> <span style="color:#57c7ff">indexRoutes</span>(props: EmbeddedProperties) = router {
</span></span><span style="display:flex;"><span>    (GET(<span style="color:#5af78e">&#34;*&#34;</span>) and acceptsHtmlOnly) {
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">val</span> indexHtml = DefaultResourceLoader().getResource(props.frontendDirectory)
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">val</span> indexHtml = frontendDirectory.createRelative(<span style="color:#5af78e">&#34;index.html&#34;</span>)
</span></span><span style="display:flex;"><span>      <span style="color:#f3f99d">ServerResponse</span>.ok().contentType(<span style="color:#f3f99d">MediaType</span>.TEXT_HTML).bodyValue(indexHtml)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableWebFlux</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">class</span> <span style="color:#f3f99d">WebConfig</span>(<span style="color:#ff6ac1">val</span> props: EmbeddedProperties) : WebFluxConfigurer {
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">override</span> <span style="color:#ff6ac1">fun</span> <span style="color:#57c7ff">addResourceHandlers</span>(registry: ResourceHandlerRegistry) {
</span></span><span style="display:flex;"><span>    registry.addResourceHandler(<span style="color:#5af78e">&#34;/**&#34;</span>)
</span></span><span style="display:flex;"><span>      .addResourceLocations(props.frontendDirectory)
</span></span><span style="display:flex;"><span>      .setCacheControl(props.cacheControl)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Navigating on <code>locahost:8080</code> you will see that the react application is able to call web services because they
both run on the same host.</p>
<p>This configuration might have some occasional problems with HMR not fully reloaded so it&rsquo;s not my favourite.</p>
<p><img loading="lazy" src="/assets/images/articles/2019-12-23-javascript-framework-with-spring-backend/hmr-errors.png" alt="Oups"  />
</p>
<p>However, by generating the result of the frontend build in <code>src/main/resources/static</code> we both have a very simple
way to distribute the full web application, as well as a dev environment that is very similar to the production environment.</p>
<p>Pros:</p>
<ul>
<li>Simple to distribute</li>
<li>No CORS</li>
</ul>
<p>Cons:</p>
<ul>
<li>A bit of code to handle frontend routing on the backend</li>
<li>Clunky hot reloading</li>
<li>We cannot scale the backend and the frontend independently</li>
</ul>
<h2 id="3-javascript-proxy">3. Javascript proxy</h2>
<p>You might do the opposite, run an express web server which includes your bundler and proxies requests to <code>localhost:8080</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> Bundler <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;parcel&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> express <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;express&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> proxy <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;http-proxy-middleware&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> history <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;connect-history-api-fallback&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> bundler <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Bundler(<span style="color:#5af78e">&#39;src/index.html&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> app <span style="color:#ff6ac1">=</span> express();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>app.use(history());
</span></span><span style="display:flex;"><span>app.use(proxy(<span style="color:#5af78e">&#39;/api&#39;</span>, {target<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;http://localhost:8080&#39;</span>, changeOrigin<span style="color:#ff6ac1">:</span> <span style="color:#ff6ac1">true</span>}));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>app.use(bundler.middleware());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>app.listen(<span style="color:#ff9f43">3000</span>, <span style="color:#5af78e">&#39;localhost&#39;</span>, (err) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">if</span> (err) {
</span></span><span style="display:flex;"><span>        console.log(err);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    console.log(<span style="color:#5af78e">&#39;Listening at http://localhost:3000&#39;</span>);
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>So going to <code>localhost:3000</code> we can see that the frontend is able to make web requests as if it is running on the
same host as the backend.</p>
<p>Pros:</p>
<ul>
<li>No CORS</li>
</ul>
<p>Cons:</p>
<ul>
<li>Not a production solution (needs to be complemented with another solution)</li>
</ul>
<h2 id="4-reverse-proxy">4. Reverse proxy</h2>
<p>We can run a third web server that routes both to our frontend and backend.
This is simple enough thanks to <code>docker-compose</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ff6ac1">version</span>: <span style="color:#5af78e">&#34;3&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">nginx</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">image</span>: nginx:latest
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">container_name</span>: brginx
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">volumes</span>:
</span></span><span style="display:flex;"><span>      - ./server.conf:/etc/nginx/conf.d/default.conf
</span></span><span style="display:flex;"><span>      - ../frontend/dist:/usr/share/nginx/html
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ff9f43">8081</span>:<span style="color:#ff9f43">8081</span>
</span></span></code></pre></div><p>Here is the nginx configuration:</p>
<pre tabindex="0"><code>server {
    listen       8081;
    server_name  localhost;

    location /api {
        proxy_pass   http://host.docker.internal:8080;
    }

    location / {
        root /usr/share/nginx/html;
        set $fallback_file /index.html;
        if ($http_accept !~ text/html) {
            set $fallback_file /null;
        }
        try_files $uri $fallback_file;
    }
}
</code></pre><p>So navigating to the nginx server on <code>localhost:8081</code>, we can see that the backend and the frontend appear to be on the
same host.</p>
<p>Pros:</p>
<ul>
<li>Close to a production environment</li>
<li>Flexible</li>
<li>Can scale with a load balancer</li>
</ul>
<p>Cons:</p>
<ul>
<li>3 processes</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Depending on how you wish to deploy your application, you might choose one of the approaches above or even mix them to
reach developer nirvana.</p>
<p>What about you? How do you develop your full stack application?</p>
<p>I&rsquo;d love to have your input!</p>
<p>Sources:</p>
<ul>
<li><a href="https://github.com/geowarin/boot-js">Github repository</a></li>
</ul>
]]></content:encoded></item><item><title>Share IntelliJ run configurations with git</title><link>https://geowarin.com/share-intellij-run-configurations-with-git/</link><pubDate>Sun, 22 Dec 2019 01:47:32 +0100</pubDate><guid>https://geowarin.com/share-intellij-run-configurations-with-git/</guid><description>Isn&amp;rsquo;t it great when you checkout a project and have everything at hand to run it?</description><content:encoded><![CDATA[<p>This is a short note on how to share your intelliJ run configurations with git.</p>
<p>First your <code>.gitignore</code> must whitelist the <code>.idea/runConfigurations</code> folder but not the rest of the <code>.idea</code> folder.</p>
<p>You probably don&rsquo;t want to commit the entire folder because it can contain personal settings and plugin configurations.</p>
<pre tabindex="0"><code class="language-gitignore" data-lang="gitignore">!.idea

.idea/*
!.idea/runConfigurations
</code></pre><p>Here is a compound run configuration. It&rsquo;s awesome. It launches multiple run configurations at once.</p>
<p><img loading="lazy" src="/assets/images/articles/2019/2019-12-22-run-config.png" alt="Run configuration"  />
</p>
<p>Then you want to check the <strong>Share throught VCS</strong> checkbox on the top right corner, this will add an xml file to the
<code>.idea/runConfigurations</code> file that you can commit and push.</p>
<p><img loading="lazy" src="/assets/images/articles/2019/2019-12-22-share-config.png" alt="Xml configuration file"  />
</p>
]]></content:encoded></item><item><title>Reverse proxy on docker-compose with CORS and SSL</title><link>https://geowarin.com/reverse-proxy-on-docker-compose-with-cors-and-ssl/</link><pubDate>Sat, 21 Dec 2019 00:24:53 +0100</pubDate><guid>https://geowarin.com/reverse-proxy-on-docker-compose-with-cors-and-ssl/</guid><description>How to set up a reverse-proxy with CORS and SSL, with docker-compose and a self-signed certificate.</description><content:encoded><![CDATA[<h1 id="the-problem">The problem</h1>
<p><a href="https://github.com/electerious/Ackee">Ackee</a> is a neat self-hosted analytics solution for simple needs (e.g. a blog).
On the repo, the authors give instructions to run the tool, a node application, via docker-compose.</p>
<p>On the other hand, the website whose analytics will be tracked needs to include a script that will look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#ff6ac1">script</span> <span style="color:#57c7ff">async</span> <span style="color:#57c7ff">src</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;https://unpkg.com/ackee-tracker@3.2.2/dist/ackee-tracker.min.js&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#57c7ff">data-ackee-server</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;https://ackee.com&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#57c7ff">data-ackee-domain-id</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;67bfa855-7569-4d29-a0a3-a2f4ceae2ea3&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#57c7ff">data-ackee-opts</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#39;{ &#34;ignoreLocalhost&#34;: false }&#39;</span>&gt;&lt;/<span style="color:#ff6ac1">script</span>&gt;
</span></span></code></pre></div><p>The problem is that <code>localhost:1313</code>, where my blog runs locally, cannot send json requests to <code>https:localhost</code>
or whichever host Ackee is running on, if they differ in name/port, etc.</p>
<p>This is a browser built-in protection known as <em>CORS</em>.</p>
<p>To allow the browser to make a certain type of requests (like json request) to another host, this host must explicitly
allow it by responding with the following headers to a preflight request (with the OPTION http verb):</p>
<pre tabindex="0"><code>Access-Control-Allow-Origin  &#34;*&#34;
Access-Control-Allow-Methods &#34;GET, POST, PATCH, OPTIONS&#34;
Access-Control-Allow-Headers &#34;Content-Type&#34;
</code></pre><p>The example above allows whichever host (*) to send GET, POST, PATCH, and OPTIONS requests with the <code>Content-Type</code>
header.
More info can be found in the <a href="https://fetch.spec.whatwg.org/#http-cors-protocol">fetch specification</a></p>
<p>This is a good use-case for a <a href="https://medium.com/intrinsic/why-should-i-use-a-reverse-proxy-if-node-js-is-production-ready-5a079408b2ca">reverse-proxy</a>.</p>
<p>We&rsquo;ll use nginx and a self-signed certificate for SSL.</p>
<p>Please note:</p>
<ul>
<li>You should avoid using wild-card in CORS headers in production</li>
<li>SSL is not required to allow CORS</li>
<li>You should use a properly signed certificate in production</li>
</ul>
<p>However, I thought it would be a good occasion to learn something new.
And I really wanted Ackee to work locally.</p>
<h1 id="the-solution">The solution</h1>
<p>Credits to Nickolas Kraus who wrote a <a href="https://nickolaskraus.org/articles/how-to-create-a-self-signed-certificate-for-nginx-on-macos/">very good article</a>
on how to run nginx with self-signed certificates.</p>
<p>I just added docker-compose and CORS headers into the mix.</p>
<h2 id="generating-the-cerficates">Generating the cerficates</h2>
<p>Here is a shell script that will create <code>self-signed.crt</code>, <code>self-signed.key</code> and <code>dhparam.pem</code>, your self-signed certificates.
It will also add it to the macOS trust store.</p>
<p>This will work immediately with Chrome.
Firefox has its own store and you will have to manually add the certificate upon the first connection.</p>
<p>For other platforms, <a href="https://github.com/Busindre/How-to-Add-trusted-root-certificates">see here</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#78787e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>
</span></span><span style="display:flex;"><span>mkdir -p nginx
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>rm -f nginx/dhparam.pem nginx/self-signed.crt nginx/self-signed.key
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># create a ssl certificate</span>
</span></span><span style="display:flex;"><span>sudo openssl req <span style="color:#5af78e">\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e"></span> -x509 -nodes -days <span style="color:#ff9f43">365</span> -newkey rsa:2048 <span style="color:#5af78e">\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e"></span> -subj <span style="color:#5af78e">&#34;/CN=localhost&#34;</span> <span style="color:#5af78e">\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e"></span> -config nginx/openssl.cnf <span style="color:#5af78e">\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e"></span> -keyout nginx/self-signed.key <span style="color:#5af78e">\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e"></span> -out nginx/self-signed.crt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># create a Diffie-Hellman key pair</span>
</span></span><span style="display:flex;"><span>sudo openssl dhparam -out nginx/dhparam.pem <span style="color:#ff9f43">128</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># add certificate to the trusted root store</span>
</span></span><span style="display:flex;"><span>sudo security add-trusted-cert <span style="color:#5af78e">\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e"></span> -d -r trustRoot <span style="color:#5af78e">\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e"></span> -k /Library/Keychains/System.keychain nginx/self-signed.crt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># to remove</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># sudo security delete-certificate -c &#34;&lt;name of existing certificate&gt;&#34;</span>
</span></span></code></pre></div><h2 id="nginx-conf">Nginx conf</h2>
<p><strong>nginx.conf</strong></p>
<pre tabindex="0"><code>worker_processes  1;

events {
  worker_connections  1024;
}

http {
  include       mime.types;
  default_type  application/octet-stream;

  sendfile           on;
  keepalive_timeout  65;
  proxy_http_version 1.1;

  # configure nginx server to redirect to HTTPS
  server {
    listen       80;
    server_name  localhost;
    return 302 https://$server_name:443;
  }

  # configure nginx server with ssl
  server {
    listen       443 ssl http2;
    server_name  localhost;
    include self-signed.conf;
    include ssl-params.conf;

    # route requests to the local development server
    location / {
      add_header   Access-Control-Allow-Origin &#34;*&#34; always;
      add_header   Access-Control-Allow-Methods &#34;GET, POST, PATCH, OPTIONS&#34; always;
      add_header   Access-Control-Allow-Headers &#34;Content-Type&#34; always;
      add_header   Strict-Transport-Security &#34;max-age=31536000&#34; always;
      add_header   X-Frame-Options deny;
      proxy_pass   http://ackee:3000/;
    }
  }

  include servers/*;
}
</code></pre><p>Note the <code>proxy_pass</code> line that will reference the site we reverse-proxy.
With docker-compose the hostname will be the name of the container listed in <code>docker-compose.yml</code>.</p>
<p>We know that the node server runs on port 3000.</p>
<p>You can also see that nginx will automatically add the CORS headers we previously discussed.</p>
<p>You can see two includes:</p>
<p><strong>ssl-params.conf</strong></p>
<pre tabindex="0"><code>ssl_protocols TLSv1.1 TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_ciphers &#34;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&#34;;
ssl_ecdh_curve secp384r1;
ssl_session_cache shared:SSL:10m;
ssl_session_tickets off;
ssl_stapling on;
ssl_stapling_verify on;
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;
add_header Strict-Transport-Security &#34;max-age=63072000; includeSubdomains&#34;;
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;
ssl_dhparam dhparam.pem;
</code></pre><p><strong>self-signed.conf</strong></p>
<pre tabindex="0"><code>ssl_certificate self-signed.crt;
ssl_certificate_key self-signed.key;
</code></pre><h2 id="docker-compose">docker-compose</h2>
<p><strong>docker-compose.yml</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ff6ac1">version</span>: <span style="color:#5af78e">&#34;3&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">nginx</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">image</span>: nginx:latest
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">container_name</span>: pnginx
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">volumes</span>:
</span></span><span style="display:flex;"><span>      - ./nginx/:/etc/nginx/
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ff9f43">80</span>:<span style="color:#ff9f43">80</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ff9f43">443</span>:<span style="color:#ff9f43">443</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">depends_on</span>:
</span></span><span style="display:flex;"><span>      - ackee
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">ackee</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">image</span>: electerious/ackee
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">container_name</span>: ackee
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">restart</span>: always
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">environment</span>:
</span></span><span style="display:flex;"><span>      - WAIT_HOSTS=mongo:27017
</span></span><span style="display:flex;"><span>      - ACKEE_MONGODB=mongodb://mongo:27017/ackee
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">env_file</span>:
</span></span><span style="display:flex;"><span>      - .env
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">depends_on</span>:
</span></span><span style="display:flex;"><span>      - mongo
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">mongo</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">image</span>: mongo
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">container_name</span>: mongo
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">restart</span>: always
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">volumes</span>:
</span></span><span style="display:flex;"><span>      - ./data:/data/db
</span></span></code></pre></div><p>Note the <code>depends_on</code> line which will make the Ackee container available inside the docker network on http://ackee.</p>
<p>With that, we have a node application running behind nginx with HTTPS and CORS enabled!</p>
<p><img loading="lazy" src="/assets/images/articles/2019/2019-12-21-success.png" alt="It works"  />
</p>
<p>Resources:</p>
<ul>
<li><a href="https://github.com/geowarin/docker-compose-nginx">Github repository</a></li>
<li><a href="https://nickolaskraus.org/articles/how-to-create-a-self-signed-certificate-for-nginx-on-macos/">Original article</a></li>
<li><a href="https://medium.com/intrinsic/why-should-i-use-a-reverse-proxy-if-node-js-is-production-ready-5a079408b2ca">Why should I use a Reverse Proxy if Node.js is Production-Ready?</a></li>
<li><a href="https://github.com/Busindre/How-to-Add-trusted-root-certificates">How-to: Adding trusted root certificates</a></li>
</ul>
]]></content:encoded></item><item><title>Debugging Webflux with IntelliJ</title><link>https://geowarin.com/debugging-webflux-with-intellij/</link><pubDate>Fri, 20 Dec 2019 21:04:54 +0100</pubDate><guid>https://geowarin.com/debugging-webflux-with-intellij/</guid><description>By default, it very difficult to read reactor stack traces. Make your life easier with this little tip!</description><content:encoded><![CDATA[<p>By default, when you try to debug project reactor calls, you get something like this:</p>
<p><img loading="lazy" src="/assets/images/articles/2019/2019-12-20-webflux-no-debug.png" alt="No debug"  />
</p>
<p>But if you add this dependency :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span>testImplementation(<span style="color:#5af78e">&#34;io.projectreactor:reactor-tools&#34;</span>)
</span></span></code></pre></div><p>And click on this little funnel:</p>
<p><img loading="lazy" src="/assets/images/articles/2019/2019-12-20-funnel.png" alt="Funnel"  />
</p>
<p>Also ensure that you have the reactor plugin and that its properly configured.</p>
<p><img loading="lazy" src="/assets/images/articles/2019/2019-12-22-webflux-config.png" alt="Plugin config"  />
</p>
<p>You get this:</p>
<p><img loading="lazy" src="/assets/images/articles/2019/2019-12-20-clean-stack.png" alt="Wow"  />
</p>
<p>Much better!</p>
<p>Sources:</p>
<ul>
<li><a href="https://blog.jetbrains.com/idea/2019/10/whats-new-in-intellij-idea-2019-3-eap6-improved-reactor-support-and-a-huge-pack-of-fixes/">Intellij blog</a></li>
</ul>
]]></content:encoded></item><item><title>What I Did Wrong as a CTO</title><link>https://geowarin.com/what-i-did-wrong-as-a-cto/</link><pubDate>Sun, 25 Feb 2018 11:33:45 +0100</pubDate><guid>https://geowarin.com/what-i-did-wrong-as-a-cto/</guid><description>I spent one year as a CTO for a startup. Here are some technical decisions I came to regret and those that I would make again in my next project</description><content:encoded><![CDATA[<p>Being a CTO in a startup is much more than the technical side.</p>
<p>However, the technical decisions you make early with software, especially in a timed-constraint environment like a startup,
tend to stick with you for the rest of the project.</p>
<p>In this article, I will be listing a few of the technical decisions I made.</p>
<p>Some of them felt right at all time, some of them I hope not to make again.</p>
<h1 id="the-stack">The stack</h1>
<p>Our project was a SaaS management application. We wanted our users to have a great experience, to distinguish ourselves
from the competition, and improve their productivity.</p>
<p>We used Kotlin and Spring Boot on the backend, React and Typescript on the frontend.</p>
<p>I&rsquo;m really comfortable with those technologies and that&rsquo;s why I chose them.</p>
<p>Even if you&rsquo;re only using parts of our stack, I believe that some of the things I learned will be useful to you.</p>
<h1 id="it-felt-right-would-do-again-in-my-next-project">It felt right (would do again in my next project)</h1>
<h2 id="kotlin">Kotlin</h2>
<p>Kotlin is a fantastic language. It takes inspirations from scala, groovy, ruby, keeps the best parts, and has a top notch
IDE support.</p>
<p>There were a few rough edges at the start of the project (IDE performance regressions, erratic behavior on language updates)
but for the past few months I can say without reserve that Kotlin has been nothing but a joy to work with.</p>
<p>Kotlin is Java, had it been designed in the past few years instead of having 20 years of legacy.
Kotlin is Scala, had it been designed to be a productivity powerhouse instead of an academic language.</p>
<p>It is pragmatic, elegant, and with very few footguns. It would be really painful for me to start a new project with
Java instead of Kotlin.</p>
<h2 id="postgres">Postgres</h2>
<p>Postgres is an awesome database. Don&rsquo;t listen to the bells and whistle of NoSQL. I&rsquo;m completely sure that 90% of the
web applications built in 2018 will not require advanced partitioning and clustering and will fit nicely in a relational
database.</p>
<p>If you&rsquo;re building a social network, it&rsquo;s different of course, but otherwise, just take the best relational database.
Your team will probably be at-ease with SQL and you will have the peace of mind of a database schema.</p>
<h2 id="jooq-and-flyway">JOOQ and Flyway</h2>
<p><a href="https://www.jooq.org/">JooQ</a> is a java library which allows you to write type-safe SQL queries in Java.</p>
<p><a href="https://flywaydb.org/">Flyway</a> is a very simple tool that handles your database migrations using simple SQL files
(there is a bit more to it, but the concepts are very easy to grasp).</p>
<p>Both are very well designed and it felt liberating to be in control of the SQL of the application.
I came to realize how powerful SQL really is.
All of a sudden it was a world with window functions, views, schemas, users, and more, that was open to us.</p>
<p>I feel like I was never really in control of my schema when using JPA or other ORM tools in the past.</p>
<h2 id="typescript-and-react">Typescript and React</h2>
<p>For most of my career, I&rsquo;ve worked with type-safe languages. I am 100% certain that they make me more productive.
I can refactor my code and I have tremendous tools that empower me.</p>
<p>On the other hand, I have worked on a JS project without types for 2 years.
It was a successful project with a lot of javascript and a great UX, but it was hard to crank up new features or
change old code.</p>
<p>I will never start a new project without typescript or flow. My heart tells me typescript is the right tool for me, but
choosing any of the type-safe languages that compile to JS will make you more productive.</p>
<p>The only downside with typescript is finding type definitions for some libraries. There are not always of the best quality
and you might have to copy, paste, and modify some locally to get the job done.</p>
<p>I tend to have a bias towards libraries written in typescript: they come with type definitions and often have a better design.</p>
<p>React is a good library. I feel at ease with its API surface and I found that teaching React to newer developers is never
too much of a burden.</p>
<h2 id="using-a-paas">Using a PaaS</h2>
<p>Don&rsquo;t waste time setting up docker containers and a Kubernetes cluster. You just started your project, it does not have
to handle billions of requests. You just need to publish your project in one command without headaches.</p>
<p>We used <a href="https://pivotal.io/platform">Pivotal Cloud Foundry</a> and we would type <code>cf push theApplication.jar</code> and be done
with our deployment.</p>
<h2 id="no-micro-services">No micro-services</h2>
<p>A good old monolith is all you want for the exact same reasons as the above.</p>
<p>Always strive for simplicity. You can create services later on when your startup is widely successful.</p>
<p>Martin Fowler wrote a wonderful article called <a href="https://www.martinfowler.com/bliki/MonolithFirst.html">Monolith First</a>
that I encourage you to read.</p>
<h2 id="not-using-webpack">Not using webpack</h2>
<p>I have a lot of respect for the folks maintaining webpack. It is a good tool with unprecedented possibilities.
That being said, when I set up the project, and despite my two years of webpack experience, I always felt like I was
struggling with legacy software, and weird edge cases.
I had to use or write custom plugins just to overcome the shortcomings of the tool.</p>
<p>Webpack is getting better day after day but, for the sake of the project, I took a look at the competition.</p>
<p>For my JS build, I don&rsquo;t want fancy configuration and a ton of plugins.
I want something like spring-boot, with good defaults, and I want it to be fast out-of-the-box.</p>
<p>We used <a href="https://fuse-box.org/">fuse-box</a>, a very good bundler with an efficient cache.
It is written in typescript and readily supports this language. Two decisive reasons for me.</p>
<p>I never regretted trusting the fuse-box team, they&rsquo;re doing a awesome job and they really listen to their community.</p>
<p>The other tool I am following closely is <a href="https://parceljs.org/">parcel</a>.
It auto-detects the features you need and provide an all-around pleasurable developer experience with no configuration.
And it&rsquo;s faster than Webpack.</p>
<p>Parcel is still in its infancy and I expect a few rough edges in the next months but I would probably give it a shot for my
next project.</p>
<h1 id="it-felt-weird-would-probably-not-do-again">It felt weird (would probably not do again)</h1>
<h2 id="mobx-and-mobx-state-tree">Mobx and mobx-state-tree</h2>
<p>I love <a href="https://mobx.js.org/">mobx</a>. That&rsquo;s why I&rsquo;m a reluctant to list it in this category.</p>
<p>It feels simple and powerful and it is written in typescript.</p>
<p>Those were compelling reasons for the choice of this library when I started the project.</p>
<p>I have been working with Redux intensively on a past project and I found it required a lot of design and tools (boilerplate)
to get the simplest features working.</p>
<p>On the other side of the spectrum, we have Mobx. You feel really strong when you design your first stores, because
it just works.</p>
<p>On the other hand, edge cases are rough. Some libraries like react-table would just not behave.</p>
<p>After using it for a year, I can probably list a few rules of thumbs:</p>
<ul>
<li>Create wrappers using <code>&lt;Observer /&gt;</code> for libraries using <code>shouldComponentUpdate</code> aggressively, because they will mess up
with the expectations of the developers</li>
<li>Come up with strategies for serialization and deserialization early in the project with libraries like <a href="https://github.com/mobxjs/serializr">seriliazr</a>.</li>
</ul>
<p>But all of this has a cost in terms of code and mobx has a somewhat hidden learning curve that makes it difficult to grasp for junior
developers.</p>
<p>We also tried <a href="https://github.com/mobxjs/mobx-state-tree/">mobx-state-tree</a> and I love the ideas behind the library.
It comes at a cost, though and this cost, at least for now, <a href="https://github.com/mobxjs/mobx-state-tree/issues/440">is performance</a>.</p>
<p>All in all, choosing a state library for React is hard.</p>
<p>Things to watch for in this area are <a href="https://github.com/mweststrate/immer">immer</a> and <a href="https://github.com/jamiebuilds/unstated">unstated</a>.</p>
<p>I still do not have the definitive answer to the question of state management in a React application.
Remember there are no silver bullets and be careful when you design your frontend architecture early on.</p>
<h2 id="rest">REST</h2>
<p>I have an idea of what a good rest API looks like.</p>
<p>I think it involves a lot of design and bikeshedding.</p>
<p>When a developer is in charge of a new feature, they always have a lot of choices to make:</p>
<ul>
<li>Should I add attributes to an existing REST resource? (overfetching)</li>
<li>Should I add a new REST resource? (duplication)</li>
<li>Should aggregate resources on the backend or the frontend? (inconsistency)</li>
</ul>
<p>And I did not even talk about HATEOAS or documentation.</p>
<p>Creating a good REST API is definitely something you should strive for and take the time to get right, if your business
model requires it.</p>
<p>Otherwise, I would consider <a href="http://graphql.org/">GraphQL</a> very seriously.</p>
<p>In our case, our model looked like a tree and not like small separated entities. That&rsquo;s also something to consider.</p>
<p>I feel that thinking your API in terms of a cluster of objects comes more naturally to developers.
It favors emergent design and it encourages your developers and your business to get together and figure out the
<a href="https://www.martinfowler.com/bliki/DDD_Aggregate.html">aggregates</a> in your model.</p>
<p>If you want to go down this road early on and not even bother writing a fully-fledged backend server, I would review
<a href="https://github.com/graphile/postgraphile">postgraphile</a> and <a href="https://www.graph.cool">graphcool</a> as great starting points.</p>
<h2 id="not-using-strict-true-with-typescript">Not using &ldquo;strict: true&rdquo; with typescript</h2>
<p>Typescript is awesome, but you have to enable <a href="https://basarat.gitbooks.io/typescript/docs/options/strictNullChecks.html">strict null checks</a>
to make the most of it.
We started the project without strict checks and it was a significant endeavor to change it, so we never had the time
to do it.</p>
<p>Every time we got an &ldquo;X is undefined&rdquo; error in the frontend, I regretted not adding <code>strict: true</code> to the typescript
configuration at the start of the project.</p>
<h1 id="it-felt-wrong-would-never-do-again">It felt wrong (would never do again)</h1>
<h2 id="using-an-in-memory-database-for-tests-and-development">Using an in memory database for tests and development</h2>
<p>We used Postgres in production and H2 (an in-memory database) for development and tests.</p>
<p>We had too many errors that we could only see after deploying the product to production.</p>
<p>Fortunately, most of them were easy to fix.
The errors we saw the most were differences in ordering and grouping between the two DBMS.</p>
<p>Hence the rule: &ldquo;every SQL query shall have an ORDER BY clause&rdquo;.</p>
<blockquote>
<p>As Lukas Eder pointed out in the comments:
If you don&rsquo;t need ordering, you should always avoid it, as ordering mostly incurs an O(N log N) operations
(apart from those rather rare cases where you can pull the data directly from an index).</p>
</blockquote>
<p>You can probably overcome those inconsistencies by setting up a CI build where your tests run against Postgres.</p>
<p>But more importantly, we were not able to take full advantage of features like
<a href="https://blog.jooq.org/2013/11/03/probably-the-coolest-sql-feature-window-functions/">window functions</a> or
<a href="https://www.compose.com/articles/is-postgresql-your-next-json-database/">JSON data types</a>, to name a few.</p>
<p>The next time I&rsquo;m starting a project I will use the same DBMS in development and in production.</p>
<p>I feel that having a little <code>docker-compose.yml</code> at the root of your project, loose a little time (1 second) at the
start of the day to boot it, and having a slightly worst developer experience is well worth the investment.</p>
<h2 id="server-side-rendering">Server-Side Rendering</h2>
<p>When building a Single Page App, you depend on your javascript to create the HTML that the user will interact with.</p>
<p>With Server-Side Rendering (SSR), you ask the server to run the javascript for the page that was requested, and then, send the resulting
HTML directly to your clients.</p>
<p>It is believed that your users will have a better experience with this technique, especially on lower-end devices that
will struggle to process big javascript files.</p>
<p>It is also believed that this wields better SEO results, as it easier for crawlers to parse HTML than to execute javascript.</p>
<p>At the beginning of the project, I was sure I could take advantage of SSR.
I had set up a few projects in JS that leveraged SSR in the past, and studied libraries like
<a href="https://zeit.co/blog/next">nextjs</a> carefully.</p>
<p>On the JVM, it is a bit less common, but I managed to pull something off using <a href="https://github.com/eclipsesource/J2V8/">J2V8</a>.</p>
<p>The truth is SSR is a trade-off and I think most web applications don&rsquo;t need to invest time in server-rendered
javascript.</p>
<p>Besides, measuring the benefits of SSR is really tricky. You have to consider different metrics than the &ldquo;time to render&rdquo;.
Take, for example, <a href="https://developers.google.com/web/tools/lighthouse/audits/time-to-interactive">time to interactive</a>.</p>
<p>It is a fascinating subject but it was foolish to spend time on this matter as SEO and slow processors were clearly
not a priority for the business.</p>
<p>Removing Server-Side Rendering was a good call, and reduced the overall complexity of the server code.</p>
<p>That being said, there is room for a tool that would simplify SSR on the JVM. It would be a amazing side project if you&rsquo;re
interested in the challenge.</p>
<h2 id="service-layer">Service layer</h2>
<p>Not spending enough time on the simplest aspect of the architecture was something I came to regret a few months into
the project with multiple people working on the code.</p>
<p>Make sure that every layer has clear boundaries and do not hesitate to split your project in small modules early on.</p>
<p>For example, these modules can be a good starting point:</p>
<ul>
<li><code>model</code>: mapping with your database and helpers</li>
<li><code>services</code>: fetching and updating your database, only exports higher-level functions like Graphql endpoints</li>
<li><code>web-backend</code>: things that depend on HTTP libraries</li>
<li><code>web-frontend</code>: JS stuff</li>
</ul>
<p>Modules are a great way to enforce architectural decisions.
Moreover, you can only use the <code>internal</code> <a href="https://kotlinlang.org/docs/reference/visibility-modifiers.html">keyword</a>
in Kotlin by splitting your code into modules.</p>
<p>Later in the project, when you figure out cluster of domain objects that work together well, you should also split the service
layer into smaller modules.</p>
<p>Good examples might be the &ldquo;order module&rdquo;, the &ldquo;transaction module&rdquo;, or the &ldquo;security module&rdquo; depending on your domain.</p>
<p>I like to thing of this approach as a stepping stone towards &ldquo;micro-services&rdquo;, without the complexity of deploying them
as separate network entities.</p>
<p>There is actually a continuum between an integrated system and a distributed system and you probably won&rsquo;t have to
cross the line.</p>
<p>For more insights, I recommend watching the <a href="https://speakerdeck.com/axelfontaine/majestic-modular-monoliths">Majestic Modular Monoliths</a>
talk by Axel Fontaine.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Your time is precious, you don&rsquo;t want to be spending it unwisely or come to regret too many engineering decisions later.</p>
<p>Only experience can make you aware of the tradeoffs you will make in the early stages of a product. I hope that
mine will help you avoid some traps and make better choices when designing a greenfield project.</p>
]]></content:encoded></item><item><title>Consuming APIs with Redux, the Shasta way</title><link>https://geowarin.com/consuming-apis-with-redux-the-shasta-way/</link><pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/consuming-apis-with-redux-the-shasta-way/</guid><description>Connecting your REST API to Redux used to be hard&amp;hellip; But that was before Shasta!</description><content:encoded><![CDATA[<p>Since React is just the view layer of your front-end stack, the community had to
provide the solutions for the remaining problems.</p>
<p>Right now there seems to be a consensus for the best libraries. The recommended stack is:</p>
<ul>
<li>Building: <code>Webpack</code> and <code>babel</code></li>
<li>Managing your UI state: <code>Redux</code> and <code>ImmutableJS</code></li>
<li>Routing: <code>React-router</code> (<a href="https://github.com/taion/rrtr">ahem!</a>)</li>
</ul>
<p>But there seems to be <a href="https://blog.boldlisting.com/connecting-redux-to-your-api-eac51ad9ff89#.s83cs4um8">lots of options</a>
to connect Redux to your API.</p>
<p>Yesterday, I decided to see what <a href="http://shasta.tools/">Shasta</a> had in store for
us. I have to say that I was more than happy with what I saw!</p>
<p>Check out my demo project <a href="https://github.com/geowarin/shasta-preview">on github</a>.</p>
<h2 id="what-is-shasta">What is Shasta?</h2>
<p>Shasta is the latest project of <a href="https://github.com/contra">@Contra (Eric Schoffstall)</a>,
previously known for Gulp.</p>
<p>The idea is to take the best practices and libraries used by the React community
and stitch them together with nice helpers.</p>
<p>It is an <a href="http://shasta.tools/shasta/docs/Opinions.html">opinionated library</a>.</p>
<p>Without surprise, you will find support for all the libraries cited above.</p>
<p>Shasta is very ambitious and aims to help you solve Server Side Rendering, manage
security and user sessions, etc.</p>
<p>Check the <a href="https://github.com/shastajs/boilerplate">shasta-boilerplate</a> for a more comprehensive example.</p>
<p>In this article I will focus on <a href="https://github.com/shastajs/tahoe">Tahoe</a> and
the <a href="https://github.com/shastajs/shasta-data-view">shasta data view</a>.</p>
<p>I think that those two things alone are well worth a blog post!</p>
<h2 id="a-word-of-warning">A word of warning!</h2>
<p>Shasta is under development. All the dependencies in the demo are pointing to the
github repositories. There are no npm releases yet!</p>
<p>Likewise, the documentation <a href="http://shasta.tools/shasta/index.html">is very sparse</a> at
the moment.</p>
<p>Thinks are likely to change or break. You have been warned.</p>
<p>Your best bet to learn more about Shasta right now is to listen to the Javascript Jabber podcast
<a href="https://devchat.tv/js-jabber/205-jsj-shasta-with-eric-schoffstall">episode on Shasta</a>.</p>
<h2 id="the-store">The store</h2>
<p>The central element in Shasta is the store.
It is very similar to Redux&rsquo;s store but it adds the notion of plugins.</p>
<p>To get started quickly, I created a project [using nwb]({% post_url 2016-02-18-react-freshness %}).</p>
<p>Here is what the project looks like after setting up Shasta with the router and
Tahoe:</p>
<!-- raw HTML omitted -->
<p>Let&rsquo;s dig into the core package.</p>
<p><code>store.js</code> allows you to reference the store as a singleton. This is also where
you register the plugins you use:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> { createStore, createReducer } from <span style="color:#5af78e">&#39;shasta&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> localReducers from <span style="color:#5af78e">&#39;../reducers/.lookup&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> plugins from <span style="color:#5af78e">&#39;./plugins&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> createStore({
</span></span><span style="display:flex;"><span>  plugins<span style="color:#ff6ac1">:</span> plugins,
</span></span><span style="display:flex;"><span>  reducers<span style="color:#ff6ac1">:</span> [
</span></span><span style="display:flex;"><span>    createReducer(localReducers)
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p><code>plugins.js</code> is very simple. In this example, I use two plugins, Tahoe and shasta-router:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> <span style="color:#ff6ac1">*</span> as router from <span style="color:#5af78e">&#39;shasta-router&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> <span style="color:#ff6ac1">*</span> as api from <span style="color:#5af78e">&#39;tahoe&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> [
</span></span><span style="display:flex;"><span>  api,
</span></span><span style="display:flex;"><span>  router
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><p>Finally, the <code>actions.js</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> { actions as routeActions } from <span style="color:#5af78e">&#39;shasta-router&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> { createActions, createReducerActions } from <span style="color:#5af78e">&#39;shasta&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> store from <span style="color:#5af78e">&#39;./store&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> localActions from <span style="color:#5af78e">&#39;../api/.lookup&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> localReducers from <span style="color:#5af78e">&#39;../reducers/.lookup&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> createActions({
</span></span><span style="display:flex;"><span>  ...localActions,
</span></span><span style="display:flex;"><span>  ...routeActions,
</span></span><span style="display:flex;"><span>  ...createReducerActions(localReducers)
</span></span><span style="display:flex;"><span>}, store.dispatch)
</span></span></code></pre></div><h3 id="plugins">Plugins</h3>
<p>What are those plugins? Shasta defines multiple extension points.
Most notably, your plugin can export reducers and middlewares which dramatically
help reducing the boilerplate.</p>
<p>With the example above, you will get your routes stored in Redux with <code>react-router-redux</code>,
and the setup for the <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en">Redux Devtools chrome extension</a>.</p>
<p>Tahoe also adds a bunch of reducers to handle our API calls.</p>
<h3 id="what-about-the-lookup-file">What about the .lookup file?</h3>
<p>The <code>.lookup</code> files are a really nice idea, they use the <a href="https://github.com/contra/glob-loader">glob-loader</a> to re-export all the js files
according to a glob expression.</p>
<p>This avoids writing repetitive and error prone-code like:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> <span style="color:#ff6ac1">*</span> as reducer1 from <span style="color:#5af78e">&#39;./reducer1&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> <span style="color:#ff6ac1">*</span> as reducer2 from <span style="color:#5af78e">&#39;./reducer2&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> {
</span></span><span style="display:flex;"><span>  reducer1,
</span></span><span style="display:flex;"><span>  reducer2
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="the-root-component">The Root Component</h2>
<p>Here is a quick glance at the Root component of our application.
It is very classic, just note that Shasta adds support for additional PropTypes
like routes or immutable types.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> React from <span style="color:#5af78e">&#34;react&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> {Provider, Component, PropTypes} from <span style="color:#5af78e">&#34;shasta&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> {Router} from <span style="color:#5af78e">&#34;shasta-router&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> <span style="color:#ff6ac1">class</span> RootView <span style="color:#ff6ac1">extends</span> Component {
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">static</span> displayName <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#39;RootView&#39;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">static</span> propTypes <span style="color:#ff6ac1">=</span> {
</span></span><span style="display:flex;"><span>    history<span style="color:#ff6ac1">:</span> PropTypes.object.isRequired,
</span></span><span style="display:flex;"><span>    store<span style="color:#ff6ac1">:</span> PropTypes.object.isRequired,
</span></span><span style="display:flex;"><span>    routes<span style="color:#ff6ac1">:</span> PropTypes.node.isRequired
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  render () {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">const</span> {store, history, routes} <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">this</span>.props;
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> (
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">Provider</span> <span style="color:#57c7ff">store</span><span style="color:#ff6ac1">=</span>{store}&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#ff6ac1">Router</span> <span style="color:#57c7ff">history</span><span style="color:#ff6ac1">=</span>{history}&gt;
</span></span><span style="display:flex;"><span>          {routes}
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#ff6ac1">Router</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;/<span style="color:#ff6ac1">Provider</span>&gt;
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="our-first-reducer-the-counter">Our first reducer: the counter!</h2>
<p>This one took you by surprise, didn&rsquo;t it?
Just to show the ideas behind Shasta, here is the reducer for our sacred counter example.</p>
<p><code>reducers/counter.js</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> { Map } from <span style="color:#5af78e">&#39;immutable&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">const</span> initialState <span style="color:#ff6ac1">=</span> Map({ count<span style="color:#ff6ac1">:</span> <span style="color:#ff9f43">1</span> });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">const</span> increment <span style="color:#ff6ac1">=</span> (state, { payload <span style="color:#ff6ac1">=</span> <span style="color:#ff9f43">1</span> }) =&gt;
</span></span><span style="display:flex;"><span>  state.update(<span style="color:#5af78e">&#39;count&#39;</span>, c =&gt; c <span style="color:#ff6ac1">+</span> payload);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">const</span> decrement <span style="color:#ff6ac1">=</span> (state, { payload <span style="color:#ff6ac1">=</span> <span style="color:#ff9f43">1</span> }) =&gt;
</span></span><span style="display:flex;"><span>  state.update(<span style="color:#5af78e">&#39;count&#39;</span>, c =&gt; c <span style="color:#ff6ac1">-</span> payload);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">const</span> reset <span style="color:#ff6ac1">=</span> () =&gt; initialState;
</span></span></code></pre></div><p>Here, you see a very straightforward implementation of a reducer.
It leverages the ImmutableJS API to create those nice little one-liners.</p>
<p>Here is how to use those reducers as actions in your views:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> React from <span style="color:#5af78e">&#34;react&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> {connect, Component} from <span style="color:#5af78e">&#34;shasta&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> actions from <span style="color:#5af78e">&#34;../core/actions&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">@</span>connect({
</span></span><span style="display:flex;"><span>  count<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;counter.count&#39;</span>
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> <span style="color:#ff6ac1">class</span> Counter <span style="color:#ff6ac1">extends</span> Component {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  render() {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> &lt;<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">h2</span>&gt;Counter&lt;/<span style="color:#ff6ac1">h2</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">p</span>&gt;{<span style="color:#ff6ac1">this</span>.props.count}&lt;/<span style="color:#ff6ac1">p</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">button</span> <span style="color:#57c7ff">onClick</span><span style="color:#ff6ac1">=</span>{() =&gt; actions.counter.increment()}&gt;
</span></span><span style="display:flex;"><span>        Increment
</span></span><span style="display:flex;"><span>      &lt;/<span style="color:#ff6ac1">button</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">button</span> <span style="color:#57c7ff">onClick</span><span style="color:#ff6ac1">=</span>{() =&gt; actions.counter.decrement()}&gt;
</span></span><span style="display:flex;"><span>        Decrement
</span></span><span style="display:flex;"><span>      &lt;/<span style="color:#ff6ac1">button</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">button</span> <span style="color:#57c7ff">onClick</span><span style="color:#ff6ac1">=</span>{() =&gt; actions.counter.reset()}&gt;
</span></span><span style="display:flex;"><span>        Reset
</span></span><span style="display:flex;"><span>      &lt;/<span style="color:#ff6ac1">button</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>With our lookup file setup, there is nothing else to do.
Your actions will automatically be available from all components in the
<code>actions.counter</code> namespace.</p>
<p>The <code>@connect</code> annotation reminds a lot of Redux but it has been modified to
work seamlessly with immutable data types.</p>
<h2 id="lets-fetch-data">Let&rsquo;s fetch data!</h2>
<p>Let&rsquo;s create a <code>api/chuck.js</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> { createAction } from <span style="color:#5af78e">&#39;tahoe&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> { Schema } from <span style="color:#5af78e">&#39;normalizr&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> response <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Schema(<span style="color:#5af78e">&#39;some-response&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">const</span> getRandomFact <span style="color:#ff6ac1">=</span> createAction({
</span></span><span style="display:flex;"><span>  endpoint<span style="color:#ff6ac1">:</span> () =&gt; <span style="color:#5af78e">`http://api.icndb.com/jokes/random`</span>,
</span></span><span style="display:flex;"><span>  method<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;GET&#39;</span>,
</span></span><span style="display:flex;"><span>  model<span style="color:#ff6ac1">:</span> response
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>Shasta has direct support for <a href="https://github.com/gaearon/normalizr">normalizr</a>.
This will help us store our entities in a normalized way as we will see in a moment.</p>
<p>Under the hood, Tahoe uses superagent to make HTTP requests.</p>
<p>Let&rsquo;s see how to use this in a view:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> React from <span style="color:#5af78e">&#34;react&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> {connect} from <span style="color:#5af78e">&#34;shasta&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> actions from <span style="color:#5af78e">&#34;../core/actions&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> DataComponent from <span style="color:#5af78e">&#34;shasta-data-view&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">@</span>connect({
</span></span><span style="display:flex;"><span>  joke<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;api.subsets.joke&#39;</span>
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> <span style="color:#ff6ac1">class</span> ChuckFact <span style="color:#ff6ac1">extends</span> DataComponent {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  resolveData () {
</span></span><span style="display:flex;"><span>    actions.chuck.getRandomFact({
</span></span><span style="display:flex;"><span>      subset<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;joke&#39;</span>
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  renderLoader () {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> (
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>        Loading...
</span></span><span style="display:flex;"><span>      &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  renderData ({joke}) {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> &lt;<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">h2</span>&gt;Chuck Norris Fact&lt;/<span style="color:#ff6ac1">h2</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">p</span>&gt;{joke.getIn([<span style="color:#5af78e">&#39;value&#39;</span>, <span style="color:#5af78e">&#39;joke&#39;</span>])}&lt;/<span style="color:#ff6ac1">p</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  renderErrors (errors) {
</span></span><span style="display:flex;"><span>    console.error(errors);
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> (
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>        There was an error fetching Chuck Norris facts
</span></span><span style="display:flex;"><span>      &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Shasta has a <code>DataComponent</code> class that will help you manage the pattern of displaying
a loading message while fetching the data, and errors if the request fail.</p>
<p>When using a Tahoe action, you can optionally specify a subset in which the fetched
data will end up.</p>
<p>This is great to scope your fetch requests to a component.
Here, our request ends up in the <code>api.subsets.joke</code> namespace.</p>
<p>Here is the JSON returned by our API so you can understand the <code>getIn</code> call:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">&#34;type&#34;</span>: <span style="color:#5af78e">&#34;success&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">&#34;value&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&#34;id&#34;</span>: <span style="color:#ff9f43">459</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&#34;joke&#34;</span>: <span style="color:#5af78e">&#34;Chuck Norris can solve the Towers of Hanoi in one move.&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&#34;categories&#34;</span>: [
</span></span><span style="display:flex;"><span>        <span style="color:#5af78e">&#34;nerdy&#34;</span>
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="using-normalizr">Using normalizr</h2>
<p>If we use a schema for the API call, we can tell normalizr that the <code>value</code> field
in our JSON response is actually an entity.</p>
<p>As such, we will be able to retrieve it in the <code>api.entities</code> namespace.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> response <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Schema(<span style="color:#5af78e">&#39;response&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> joke <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Schema(<span style="color:#5af78e">&#39;jokes&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>response.define({
</span></span><span style="display:flex;"><span>  value<span style="color:#ff6ac1">:</span> joke
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>Normalizr will create a map of jokes indexed by ids and store it in <code>api.entities.jokes</code>.
Which allows us to write something like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#ff5c57">@</span>connect({
</span></span><span style="display:flex;"><span>  jokes<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;api.entities.jokes&#39;</span>
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> <span style="color:#ff6ac1">class</span> ChuckFact <span style="color:#ff6ac1">extends</span> DataComponent {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  renderData ({jokes}) {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">const</span> jokesEl <span style="color:#ff6ac1">=</span> jokes.valueSeq().map((joke, id) =&gt; {
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">return</span> &lt;<span style="color:#ff6ac1">div</span> <span style="color:#57c7ff">key</span><span style="color:#ff6ac1">=</span>{id}&gt;{joke.get(<span style="color:#5af78e">&#39;joke&#39;</span>)}&lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> &lt;<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">h2</span>&gt;Chuck Norris Fact&lt;/<span style="color:#ff6ac1">h2</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      {jokesEl}
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can also use a function in the <code>@connect</code> decorator:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> getFirstJoke <span style="color:#ff6ac1">=</span> (store) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">return</span> store.getIn([<span style="color:#5af78e">&#39;api&#39;</span>, <span style="color:#5af78e">&#39;subsets&#39;</span>, <span style="color:#5af78e">&#39;myJoke&#39;</span>, <span style="color:#5af78e">&#39;data&#39;</span>, <span style="color:#5af78e">&#39;value&#39;</span>, <span style="color:#5af78e">&#39;joke&#39;</span>]);
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">@</span>connect({
</span></span><span style="display:flex;"><span>  joke<span style="color:#ff6ac1">:</span> getFirstJoke
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> <span style="color:#ff6ac1">class</span> ChuckFact <span style="color:#ff6ac1">extends</span> DataComponent {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  resolveData () {
</span></span><span style="display:flex;"><span>    actions.chuck.getRandomFact({
</span></span><span style="display:flex;"><span>      subset<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;myJoke&#39;</span>
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  renderData ({joke}) {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> &lt;<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">h2</span>&gt;Chuck Norris Fact&lt;/<span style="color:#ff6ac1">h2</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      {joke}
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;m very excited about Shasta.
It solves a long-standing problem in the React community with an unmatched elegance.</p>
<p>It might be that piece that a lot of us have been missing in our projects.</p>
]]></content:encoded></item><item><title>React freshness</title><link>https://geowarin.com/react-freshness/</link><pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/react-freshness/</guid><description>We&amp;rsquo;ve heard a lot about Javascript fatigue but what if I showed you two simple ways to get started with React without a single line of configuration? Refresh!</description><content:encoded><![CDATA[<p>In the javascript community, some people have experienced <a href="https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.4ex2kn77n">javascript fatigue</a>.</p>
<p>For me, this fatigue is two folds.
First, you need to keep up to date with the frantic pace
of redux, react-router and friends and make sure you will be able to migrate your
code to the new major versions.</p>
<p>Second, Webpack configuration is not always straight-forward.
I know a lot of people that really want to see what React is like and play with
it without having to cope with a lot of configuration up-front.</p>
<p>I have no solution for the first problem. To me, innovation in this community feels
like a fantastic thing. Watching the github repos and <a href="https://medium.com/@dan_abramov/my-react-list-862227952a8c#.l1p0093pk">following people</a> on Twitter
is my way to keep up-to-date with the latest improvements.</p>
<p>I also want to point out that the most used tools seem to be more and more stable.
It is unlikely that redux or react-router will go through a full rewrite now. So
relax. If you&rsquo;re not able to update your dependencies every two days, it&rsquo;s
probably not the end of the world.</p>
<p>In this article, I will show you two ways to get started with React with <strong>zero</strong>
configuration. So you can start hacking right away when you&rsquo;re still fresh!</p>
<h2 id="quick-prototyping-with-babel-browser-transform">Quick prototyping with babel browser transform</h2>
<p>So you need to get some React code out of the door <strong>now</strong>.
You don&rsquo;t care about hot reloading and want to write some React and ES2015 code
in a web page.</p>
<p>Jim Sproch has <a href="http://www.jimsproch.com/react/">a very cool solution</a> for us.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#ff6ac1">html</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#ff6ac1">head</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">script</span> <span style="color:#57c7ff">src</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;http://www.jimsproch.com/react/future/react.js&#34;</span>&gt;&lt;/<span style="color:#ff6ac1">script</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">script</span> <span style="color:#57c7ff">src</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;http://www.jimsproch.com/react/future/react-dom.js&#34;</span>&gt;&lt;/<span style="color:#ff6ac1">script</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">script</span> <span style="color:#57c7ff">src</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;http://www.jimsproch.com/react/babel-browser.js&#34;</span>&gt;&lt;/<span style="color:#ff6ac1">script</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;/<span style="color:#ff6ac1">head</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#ff6ac1">body</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">div</span> <span style="color:#57c7ff">id</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;container&#34;</span> /&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">script</span> <span style="color:#57c7ff">type</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;text/babel&#34;</span>&gt;
</span></span><span style="display:flex;"><span>      ReactDOM.render(<span style="color:#ff6ac1">&lt;</span>div<span style="color:#ff6ac1">&gt;</span>Hello World<span style="color:#ff6ac1">!&lt;</span><span style="color:#ff5c57">/div&gt;, document.getElementById(&#39;container&#39;));</span>
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#ff6ac1">script</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;/<span style="color:#ff6ac1">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#ff6ac1">html</span>&gt;
</span></span></code></pre></div><p>And that&rsquo;s about it!
Every script tag with the <code>text/babel</code> type will be transformed with babel.
So you have support for destructuring, arrow functions and, of course, JSX.
It will even work for external scripts so you don&rsquo;t need to write all your
code in the page.</p>
<p>Now, Jim likes to work with the bleeding edge beta of React but you can easily
switch <code>react.js</code> and <code>react-dom</code> with production versions:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#ff6ac1">script</span> <span style="color:#57c7ff">src</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;//cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react.js&#34;</span>&gt;&lt;/<span style="color:#ff6ac1">script</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff6ac1">script</span> <span style="color:#57c7ff">src</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;//cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react-dom.js&#34;</span>&gt;&lt;/<span style="color:#ff6ac1">script</span>&gt;
</span></span></code></pre></div><p>The downside of this solution, of course, is that the transform is executed by the
client&rsquo;s browser so this will be slower than pre-compiled Babel.
And you don&rsquo;t have hot reloading available.</p>
<p>But still, zero config.</p>
<h2 id="a-true-react-project-with-nwb">A true React project with nwb</h2>
<p><a href="https://github.com/insin/nwb">Nwb</a> will take care of all the webpack and babel configuration.</p>
<p>Install it as a global package:</p>
<pre tabindex="0"><code>npm i -g nwb
</code></pre><p>You can then create a React project:</p>
<pre tabindex="0"><code>nwb new react-app my-nwb-app
</code></pre><p>And it will scaffold the application for you.
It is a very simple application:</p>
<pre tabindex="0"><code>nwb: new react-app
  create .gitignore
  create .travis.yml
  create README.md
  create nwb.config.js
  create package.json
  create public/index.html
  create src/App.js
  create src/index.js
  create tests/.eslintrc
  create tests/App-test.js
</code></pre><p>No configuration outside of <code>nwb.config.js</code>, which is almost empty.</p>
<p>Let&rsquo;s start the application:</p>
<pre tabindex="0"><code>npm start
</code></pre><p>Try to modify <code>App.js</code>&hellip; Hot reloading works!</p>
<p>Now let&rsquo;s run the tests:</p>
<pre tabindex="0"><code>$ nwb test

START:
18 02 2016 10:14:54.838:INFO [karma]: Karma v0.13.18 server started at http://localhost:9876/
18 02 2016 10:14:54.846:INFO [launcher]: Starting browser PhantomJS
18 02 2016 10:14:56.139:INFO [PhantomJS 1.9.8 (Mac OS X 0.0.0)]: Connected on socket IHNx80uh9I6VW9fjAAAA with id 617985
  App component
    ✔ displays a welcome message

Finished in 0.01 secs / 0.004 secs

SUMMARY:
✔ 1 test completed
</code></pre><p>We&rsquo;ve got karma and coverage pre-configured so we can start TDDing right away.</p>
<p>And the best part, we can build the application and get an optimized version
of the scripts.</p>
<pre tabindex="0"><code>$ npm run build

&gt; my-nwb-app@1.0.0 build /Users/geowarin/dev/react/my-nwb-app
&gt; nwb build

nwb: clean-app
nwb: build-react-app
Hash: 81e127933ddb73bbdfb4
Version: webpack 1.12.11
Time: 3234ms
        Asset       Size  Chunks             Chunk Names
    vendor.js     131 kB       0  [emitted]  vendor
       app.js  971 bytes       1  [emitted]  app
vendor.js.map    1.54 MB       0  [emitted]  vendor
   app.js.map    4.13 kB       1  [emitted]  app
</code></pre><p>Nwb also has support for <a href="https://github.com/insin/nwb-sass">sass</a>, <a href="https://github.com/insin/nwb-stylus">stylus</a> and <a href="https://github.com/insin/nwb-less">less</a>.</p>
<h3 id="nwb-gotchas">Nwb gotchas</h3>
<p>Nwb has opinions. And that&rsquo;s a good thing.
For example, you write tests with Karma and that&rsquo;s it.</p>
<p>Support for Babel 6 is not there yet so it&rsquo;s not completely bleeding edge.</p>
<p>But you can serenely leave the hard part of configuring your app to Nwb.
It&rsquo;s got a very impressive test suite and coverage. You&rsquo;re in good hands!</p>
<h2 id="conclusion">Conclusion</h2>
<p>Feeling fatigued? I do not!
I wish there were more projects like Nwb with strong opinions and one easy
way to do things.</p>
<p>But it is possible to get started with React and even have a production-ready
application with zero configuration.</p>
<p>Never used React? You have no more excuses. Get to work and help this community
improve!</p>
]]></content:encoded></item><item><title>Social login with Spring</title><link>https://geowarin.com/social-login-with-spring/</link><pubDate>Fri, 12 Feb 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/social-login-with-spring/</guid><description>Log-in with your social account in your Spring application</description><content:encoded><![CDATA[<p>Nowadays, it&rsquo;s getting rare and even a bit annoying when a service rolls up its own
authentication mechanism instead of relying on a OAuth sign-on with our social
networks.</p>
<p>Login via social networks means fewer passwords to remember, and stronger guarantees
in terms of security because you can check and control the authorizations of the applications
you use.</p>
<p>In this article, I will show you how to allow users to log into your application
via Twitter from a rich Javascript client (React).</p>
<p>We will also persist our users connections in database.</p>
<p>The code is available <a href="https://github.com/geowarin/boot-social-api">on github</a>.</p>
<h2 id="setting-up-your-app-on-twitter">Setting up your app on Twitter</h2>
<p>Before coding anything, you will need to create a new Twitter application
in <a href="https://apps.twitter.com/">your twitter apps page</a>.</p>
<p><img loading="lazy" src="/assets/images/articles/2016-02-twitter-app.png" alt="Creating a Twitter app"  title="Creating a Twitter app"  />
</p>
<p>Then go to the &ldquo;Keys and access tokens&rdquo; tab and note your API key and API secret
ids.</p>
<p><img loading="lazy" src="/assets/images/articles/2016-02-twitter-app-keys.png" alt="Twitter app keys"  title="Twitter app keys"  />
</p>
<h2 id="creating-a-spring-boot-app">Creating a Spring Boot app</h2>
<p>Use the <a href="http://start.spring.io">Spring initializer</a> to create a new Spring Boot
application. You will need the following dependencies:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>dependencies <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>	compile<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;org.springframework.boot:spring-boot-devtools&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>	compile<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;org.springframework.boot:spring-boot-starter-security&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>	compile<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;org.springframework.boot:spring-boot-starter-social-twitter&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>	compile<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>	compile<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;org.springframework.boot:spring-boot-starter-jdbc&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>	compile<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;com.h2database:h2&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span></code></pre></div><p>Please copy your <code>appId</code> and <code>appSecret</code> in the <code>application.properties</code> file and
configure a few things:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#57c7ff">spring.social.twitter.appId</span><span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&lt;Consumer Key&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">spring.social.twitter.appSecret</span><span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&lt;Consumer Secret&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># Disable auto views, we are making an API</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">spring.social.auto-connection-views</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">false</span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># Disable basic security</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">security.basic.enabled</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">false</span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># Persist H2 data to disk to keep connection info between reboots</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">spring.datasource.url</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">jdbc:h2:~/social-test</span>
</span></span></code></pre></div><h2 id="sign-in-and-sign-up-flows">Sign-in and Sign-up flows</h2>
<p>Spring social has two different flows when someone logs into your app via social
networks.</p>
<p>The first time someone logs into your application, they will go through the sign-up flow.
If their ID already registered in Spring Social, they will go through the sign-in
flow instead.</p>
<p>You job is to create a <code>SignInAdapter</code> that will handle the sign-in process and
a controller that will decide what to do during the sign-up process (you will receive a
request on the <code>/signup</code> URL by default).</p>
<p>Here is an overview of the authentication flow in Spring Social:</p>
<p><img loading="lazy" src="/assets/images/articles/2016-02-social-flow.png" alt="Spring Social flow"  title="Spring Social flow"  />
</p>
<ul>
<li>Your application produces a POST request to <code>/signin/{providerId}</code></li>
<li>The <code>ProviderSigninController</code> then redirects the user to the identification provider&rsquo;s sign-in screen</li>
<li>The user logs in</li>
<li>The identification provider will send the OAuth token with GET request to <code>/signin/{providerId}</code></li>
<li>If the user is not found in the <code>UsersConnectionRepository</code>, the controller will use a <code>SessionStrategy</code> to store the pending login request and will then redirect to the signupUrl page</li>
<li>If the user is found, your <code>SignInAdapter</code> interface is called</li>
</ul>
<p>If you want to know more details about Spring social inner workings, check the <code>SocialWebAutoConfiguration</code> class of Spring Boot and the <code>ProviderSignInController</code> class
of Spring Social.</p>
<p>In the above diagram, we can see that we have two more extensions points:</p>
<ul>
<li>The <code>SessionStrategy</code>. By default, it stores temporary information about the connection
in the HTTP session</li>
<li>The <code>UsersConnectionRepository</code>. By default, Spring boot provides an <code>InMemoryUsersConnectionRepository</code>. Connections will be lost when your application
reboots.</li>
</ul>
<h2 id="spring-security-config">Spring Security Config</h2>
<p>We need to enable security in our application. Let&rsquo;s create a classic security
configuration.
It will make sure that users using our REST api are authenticated but will let calls
to <code>/api/session</code>, our authentication end point, go through:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Order</span>(SecurityProperties.<span style="color:#57c7ff">ACCESS_OVERRIDE_ORDER</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SecurityConfiguration</span> <span style="color:#ff5c57">extends</span> WebSecurityConfigurerAdapter {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">configure</span>(HttpSecurity http) <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>        http
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">authorizeRequests</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">antMatchers</span>(<span style="color:#5af78e">&#34;/api/session&#34;</span>).<span style="color:#57c7ff">permitAll</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">antMatchers</span>(<span style="color:#5af78e">&#34;/h2-console/**&#34;</span>).<span style="color:#57c7ff">permitAll</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">antMatchers</span>(<span style="color:#5af78e">&#34;/api/**&#34;</span>).<span style="color:#57c7ff">authenticated</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">and</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">headers</span>().<span style="color:#57c7ff">frameOptions</span>().<span style="color:#57c7ff">disable</span>() <span style="color:#78787e">// for h2</span>
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">and</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">requestCache</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">requestCache</span>(<span style="color:#ff6ac1">new</span> NullRequestCache())
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">and</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">sessionManagement</span>().<span style="color:#57c7ff">sessionCreationPolicy</span>(SessionCreationPolicy.<span style="color:#57c7ff">IF_REQUIRED</span>)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">and</span>().<span style="color:#57c7ff">csrf</span>().<span style="color:#57c7ff">disable</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The authentication end point is very simple. It provides a way to <code>GET</code> the
current session and to <code>DELETE</code> it to logout:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@RestController</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@RequestMapping</span>(<span style="color:#5af78e">&#34;/api/session&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">AuthenticationResource</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    AuthenticationManager authenticationManager;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@RequestMapping</span>(method <span style="color:#ff6ac1">=</span> RequestMethod.<span style="color:#57c7ff">GET</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> User <span style="color:#57c7ff">session</span>(Principal user) {
</span></span><span style="display:flex;"><span>        String name <span style="color:#ff6ac1">=</span> user <span style="color:#ff6ac1">==</span> <span style="color:#ff6ac1">null</span> <span style="color:#ff6ac1">?</span> <span style="color:#ff6ac1">null</span> : user.<span style="color:#57c7ff">getName</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> User(name);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@RequestMapping</span>(method <span style="color:#ff6ac1">=</span> RequestMethod.<span style="color:#57c7ff">DELETE</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">logout</span>(HttpSession session) {
</span></span><span style="display:flex;"><span>        session.<span style="color:#57c7ff">invalidate</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="sign-in">Sign-in</h2>
<p>To handle the sign-in, we need to provide a <code>SignInAdapter</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SocialConfiguration</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> SignInAdapter <span style="color:#57c7ff">authSignInAdapter</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> (userId, connection, request) <span style="color:#ff6ac1">-&gt;</span> {
</span></span><span style="display:flex;"><span>            AuthUtil.<span style="color:#57c7ff">authenticate</span>(connection);
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">null</span>;
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can create a simple <code>authenticate</code> method that will take a Social <code>Connection</code>
and authenticate the user using Spring Security&rsquo;s context:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">AuthUtil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(AuthUtil.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">authenticate</span>(Connection<span style="color:#ff6ac1">&lt;?&gt;</span> connection) {
</span></span><span style="display:flex;"><span>        UserProfile userProfile <span style="color:#ff6ac1">=</span> connection.<span style="color:#57c7ff">fetchUserProfile</span>();
</span></span><span style="display:flex;"><span>        String username <span style="color:#ff6ac1">=</span> userProfile.<span style="color:#57c7ff">getUsername</span>();
</span></span><span style="display:flex;"><span>        UsernamePasswordAuthenticationToken authentication <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> UsernamePasswordAuthenticationToken(username, <span style="color:#ff6ac1">null</span>, <span style="color:#ff6ac1">null</span>);
</span></span><span style="display:flex;"><span>        SecurityContextHolder.<span style="color:#57c7ff">getContext</span>().<span style="color:#57c7ff">setAuthentication</span>(authentication);
</span></span><span style="display:flex;"><span>        log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;User {} {} connected.&#34;</span>, userProfile.<span style="color:#57c7ff">getFirstName</span>(), userProfile.<span style="color:#57c7ff">getLastName</span>());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Note that we have access to our user&rsquo;s profile with the <code>Connection</code>
object.</p>
<h2 id="sign-up">Sign-up</h2>
<p>Here is a simple implementation of a signup controller:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Controller</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SignupController</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> ProviderSignInUtils signInUtils;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">SignupController</span>(ConnectionFactoryLocator connectionFactoryLocator, UsersConnectionRepository connectionRepository) {
</span></span><span style="display:flex;"><span>        signInUtils <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ProviderSignInUtils(connectionFactoryLocator, connectionRepository);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@RequestMapping</span>(value <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;/signup&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">signup</span>(WebRequest request) {
</span></span><span style="display:flex;"><span>        Connection<span style="color:#ff6ac1">&lt;?&gt;</span> connection <span style="color:#ff6ac1">=</span> signInUtils.<span style="color:#57c7ff">getConnectionFromSession</span>(request);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">if</span> (connection <span style="color:#ff6ac1">!=</span> <span style="color:#ff6ac1">null</span>) {
</span></span><span style="display:flex;"><span>            AuthUtil.<span style="color:#57c7ff">authenticate</span>(connection);
</span></span><span style="display:flex;"><span>            signInUtils.<span style="color:#57c7ff">doPostSignUp</span>(connection.<span style="color:#57c7ff">getDisplayName</span>(), request);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;redirect:/&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There are two things to note here:</p>
<ul>
<li>Spring lets us decide what to do the first time we register a user. In this
example, we just authenticate him</li>
<li>The <code>SignInUtils</code> class is very handy to handle this scenario. Its constructor
optionally takes a <code>SessionStrategy</code> that will be used to retrieve the connection info.
You can customize the strategy here.</li>
</ul>
<p>A this point, your authentication process should work.
It will use the HTTP Session to store connection data and an in-memory user
repository.</p>
<h2 id="the-client">The client</h2>
<p>We can create a very simple client with any web framework.
It will need to:</p>
<ul>
<li>Issue a <code>GET /api/session</code> request to check if the user is logged</li>
<li>Display a login form that will <code>POST</code> to <code>/login/twitter</code> if not</li>
<li>Display a logout button if the user is connected. The logout button will
send a <code>DELETE /api/session</code> request.</li>
</ul>
<p>I chose to use React because of its very simple and declarative API.</p>
<p>We can use ES2015 features and JSX without a pre-compilation step thanks to
<a href="http://www.jimsproch.com/react/">this script</a>.</p>
<p>It is a bit slower because it lets the browser do the compilation but it&rsquo;s
perfect for prototyping.</p>
<p>Here is the client code:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> LoginForm <span style="color:#ff6ac1">=</span> () =&gt; (
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">form</span> <span style="color:#57c7ff">action</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;/signin/twitter&#34;</span> <span style="color:#57c7ff">method</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;post&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#ff6ac1">h1</span>&gt;Please login&lt;/<span style="color:#ff6ac1">h1</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#ff6ac1">button</span> <span style="color:#57c7ff">type</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;submit&#34;</span>&gt;Login&lt;/<span style="color:#ff6ac1">button</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#ff6ac1">form</span>&gt;
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> LogoutComponent <span style="color:#ff6ac1">=</span> (props) =&gt; (
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#ff6ac1">h2</span>&gt;Your name is {props.name}&lt;/<span style="color:#ff6ac1">h2</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#ff6ac1">button</span> <span style="color:#57c7ff">onClick</span><span style="color:#ff6ac1">=</span>{props.logout}&gt;Logout&lt;/<span style="color:#ff6ac1">button</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">class</span> Main <span style="color:#ff6ac1">extends</span> React.Component {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    constructor(...args) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">super</span>(...args);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">this</span>.state <span style="color:#ff6ac1">=</span> {name<span style="color:#ff6ac1">:</span> <span style="color:#ff6ac1">null</span>};
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    componentDidMount() {
</span></span><span style="display:flex;"><span>        fetch(<span style="color:#5af78e">&#39;/api/session&#39;</span>, {credentials<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;same-origin&#39;</span>})
</span></span><span style="display:flex;"><span>            .then(res =&gt; res.json())
</span></span><span style="display:flex;"><span>            .then(session =&gt; <span style="color:#ff6ac1">this</span>.setState({name<span style="color:#ff6ac1">:</span> session.name}));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    logout() {
</span></span><span style="display:flex;"><span>        console.log(<span style="color:#5af78e">&#34;logout&#34;</span>);
</span></span><span style="display:flex;"><span>        fetch(<span style="color:#5af78e">&#39;/api/session&#39;</span>, {method<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;delete&#39;</span>, credentials<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;same-origin&#39;</span>})
</span></span><span style="display:flex;"><span>            .then(res =&gt; <span style="color:#ff6ac1">this</span>.setState({name<span style="color:#ff6ac1">:</span> <span style="color:#ff6ac1">null</span>}));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    render() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">const</span> profile <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">this</span>.state.name <span style="color:#ff6ac1">?</span>
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#ff6ac1">LogoutComponent</span> <span style="color:#57c7ff">name</span><span style="color:#ff6ac1">=</span>{<span style="color:#ff6ac1">this</span>.state.name} <span style="color:#57c7ff">logout</span><span style="color:#ff6ac1">=</span>{() =&gt; <span style="color:#ff6ac1">this</span>.logout()}/&gt; <span style="color:#ff6ac1">:</span>
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#ff6ac1">LoginForm</span> /&gt;;
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> (
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>                {profile}
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ReactDOM.render(&lt;<span style="color:#ff6ac1">Main</span> /&gt;, <span style="color:#ff5c57">document</span>.getElementById(<span style="color:#5af78e">&#39;container&#39;</span>));
</span></span></code></pre></div><p>We use the <a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch">fetch API</a> (a modern replacement for XMLHttpRequest) to make ajax
calls so the code will only work in <a href="http://caniuse.com/#feat=fetch">FF and Chrome</a>.
You can find various polyfills in the wild.</p>
<p>Notice that we need to pass <code>{credentials: 'same-origin'}</code> to the REST API calls
to make sure we send the cookies along with the requests.</p>
<h2 id="store-the-connections-in-database">Store the connections in database</h2>
<p>In most applications, we want to store the user already known in a database.</p>
<p>Spring social provides a default JDBC implementation of the <code>UsersConnectionRepository</code>.
Take a look <a href="http://docs.spring.io/spring-social/docs/current/reference/htmlsingle/#section_jdbcConnectionFactory">the documentation</a>
to know more about the table in which it will store users&rsquo; connections data.</p>
<p>We can initialize the database with the script contained in Spring Social&rsquo;s jar:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DbInitializer</span> <span style="color:#ff5c57">implements</span> InitializingBean {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> DataSource dataSource;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">DbInitializer</span>(DataSource dataSource) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">dataSource</span> <span style="color:#ff6ac1">=</span> dataSource;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">afterPropertiesSet</span>() <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>        ClassPathResource resource <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ClassPathResource(<span style="color:#5af78e">&#34;org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.sql&#34;</span>);
</span></span><span style="display:flex;"><span>        runScript(resource);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">runScript</span>(Resource resource) {
</span></span><span style="display:flex;"><span>        ResourceDatabasePopulator populator <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ResourceDatabasePopulator();
</span></span><span style="display:flex;"><span>        populator.<span style="color:#57c7ff">setContinueOnError</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>        populator.<span style="color:#57c7ff">addScript</span>(resource);
</span></span><span style="display:flex;"><span>        DatabasePopulatorUtils.<span style="color:#57c7ff">execute</span>(populator, dataSource);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now, we need to create a <code>SocialAdapater</code> that will use Spring Social&rsquo;s
<code>JdbcUsersConnectionRepository</code> as a user repository:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DatabaseSocialConfigurer</span> <span style="color:#ff5c57">extends</span> SocialConfigurerAdapter {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> DataSource dataSource;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">DatabaseSocialConfigurer</span>(DataSource dataSource) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">dataSource</span> <span style="color:#ff6ac1">=</span> dataSource;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> UsersConnectionRepository <span style="color:#57c7ff">getUsersConnectionRepository</span>(ConnectionFactoryLocator connectionFactoryLocator) {
</span></span><span style="display:flex;"><span>        TextEncryptor textEncryptor <span style="color:#ff6ac1">=</span> Encryptors.<span style="color:#57c7ff">noOpText</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator, textEncryptor);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Don&rsquo;t forget to declare our <code>DatabaseSocialConfigurer</code> as a Spring bean and we are
good to go!</p>
<p>Please note that this works because of an &ldquo;interesting&rdquo; design decision of
Spring Social.
You can see <a href="https://github.com/spring-projects/spring-social/blob/master/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfiguration.java#L87">here</a>
that Spring Social will take the first <code>SocialConfigurer</code> that declares a non-null
<code>UsersConnectionRepository</code>.</p>
<p>Ours come before the <code>SocialConfigurer</code>s auto-configured by Spring Boot but
if you are wary of this implementation, consider disabling Spring boot auto-configuration.</p>
<p>We can use the h2 console Spring boot auto-configured for us to check the database.</p>
<p><img loading="lazy" src="/assets/images/articles/2016-02-social-db.png" alt="The data in our database"  title="The data in our database"  />
</p>
<h2 id="conclusion">Conclusion</h2>
<p>Social login with Spring is a bit tricky but definitely worth the investment!</p>
<p>Spring Boot provides default configuration for LinkedIn and Facebook as well
but there are <a href="http://projects.spring.io/spring-social/">many more connectors</a> like Github and Tripit that you can include by replicating Spring Boot&rsquo;s configuration.</p>
<p>Don&rsquo;t forget to <a href="https://github.com/geowarin/boot-social-api">check out the code</a>
and give your opinion in the comments.</p>
]]></content:encoded></item><item><title>Correctly handle JSR-310 (java 8) dates with Jackson</title><link>https://geowarin.com/correctly-handle-jsr-310-java-8-dates-with-jackson/</link><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/correctly-handle-jsr-310-java-8-dates-with-jackson/</guid><description>The DateTime API in Java 8 is awesome but default Jackson serialization is not. Let&amp;rsquo;s fix that!</description><content:encoded><![CDATA[<p>If you are starting a Spring Boot project today, chances are that you want to use
Java 8.</p>
<p>One of the most awesome features in Java 8 is the <a href="http://www.mscharhag.com/java/java-8-date-time-api">Date and Time API</a>, also known as JSR-310.</p>
<p>By default, Jackson will treat the new dates as normal objects and serialize all the
fields that they contain, which will probably not suit your needs.</p>
<p>I will show you how to fix the problem with the <a href="https://github.com/FasterXML/jackson-datatype-jsr310">jackson-datatype-jsr310</a> library,
within a Spring Boot project, but the concepts here are applicable to any application
using Jackson.</p>
<p>The code is <a href="https://github.com/geowarin/boot-jsr310">available on github</a> if you want to take a look.</p>
<h2 id="the-problem">The problem</h2>
<p>Let&rsquo;s write a simple controller:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@RestController</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DateController</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@RequestMapping</span>(<span style="color:#5af78e">&#34;/localDate&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> LocalDate <span style="color:#57c7ff">todayLocalDate</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> LocalDate.<span style="color:#57c7ff">now</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@RequestMapping</span>(<span style="color:#5af78e">&#34;/offsetDateTime&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> OffsetDateTime <span style="color:#57c7ff">todayOffsetDateTime</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> OffsetDateTime.<span style="color:#57c7ff">now</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Simple, right? What could possibly go wrong?</p>
<p><img loading="lazy" src="/assets/images/articles/2016-02-localDate.png" alt="Oh boy what am I going to do with that?"  title="Bad date time"  />
</p>
<p>Well, it&rsquo;s probably not what you expected.
This output is not going to be easy to use in your client application.</p>
<p>More importantly, are you going to send this kind of format to your server
when you are targeting a Java date?</p>
<p>The output of <code>offsetDateTime</code> is pretty similar in terms of unusualness.</p>
<h2 id="the-solution">The solution</h2>
<p>Turns out that the solution is pretty straight-forward.
Just add the following dependency to your project:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>compile <span style="color:#5af78e">&#39;com.fasterxml.jackson.datatype:jackson-datatype-jsr310&#39;</span>
</span></span></code></pre></div><p>And the result, for <code>LocalDateTime</code>:</p>
<pre tabindex="0"><code>[
  2016,
  2,
  2
]
</code></pre><p>And for <code>OffsetDateTime</code>:</p>
<pre tabindex="0"><code>1454451664.708000000
</code></pre><p>Happy? No? Let&rsquo;s try improve the solution.</p>
<h2 id="tweaking-the-output">Tweaking the output</h2>
<p>If you look at how the library works internally, you will see that the output
depends on some features being activated or not.</p>
<p>To have a better default, we can override the default <code>ObjectMapper</code> and give
it a different config:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">JacksonConfig</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Primary</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> ObjectMapper <span style="color:#57c7ff">objectMapper</span>(Jackson2ObjectMapperBuilder builder) {
</span></span><span style="display:flex;"><span>        ObjectMapper objectMapper <span style="color:#ff6ac1">=</span> builder.<span style="color:#57c7ff">createXmlMapper</span>(<span style="color:#ff6ac1">false</span>).<span style="color:#57c7ff">build</span>();
</span></span><span style="display:flex;"><span>        objectMapper.<span style="color:#57c7ff">configure</span>(SerializationFeature.<span style="color:#57c7ff">WRITE_DATES_AS_TIMESTAMPS</span>, <span style="color:#ff6ac1">false</span>);
</span></span><span style="display:flex;"><span><span style="color:#78787e">//        objectMapper.configure(SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS, false);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> objectMapper;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This time the result is, for <code>LocalDateTime</code>:</p>
<pre tabindex="0"><code>2016-02-02
</code></pre><p>And for <code>OffsetDateTime</code>:</p>
<pre tabindex="0"><code>2016-02-02T23:24:08.255+01:00
</code></pre><p>If you uncomment the second line, dates will be written as timestamps without the nanoseconds
but unfortunately, it is mutually exclusive with the first option.</p>
<p>Nevertheless, those formats are a lot more sensible and understandable by client
libraries like <a href="http://momentjs.com/">momentjs</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>It takes just a little configuration to make JSR-310 dates behave correctly with Jackson
and Spring Boot.</p>
<p>As always, check out the project <a href="https://github.com/geowarin/boot-jsr310">on github</a> and tell if
this helped!</p>
]]></content:encoded></item><item><title>A simple chat with Spring Boot and RethinkDB</title><link>https://geowarin.com/a-simple-chat-with-spring-boot-and-rethinkdb/</link><pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/a-simple-chat-with-spring-boot-and-rethinkdb/</guid><description>RethinkDB is a great database engine allowing you to receive live updates on your data. Let&amp;rsquo;s create a Spring Boot App and give it a try!</description><content:encoded><![CDATA[<p>The Java driver for <a href="https://www.rethinkdb.com/">RethinkDB</a> has recently
<a href="https://rethinkdb.com/blog/official-java-driver/">been released</a> in beta.</p>
<p>I created a little chat application with Spring Boot, you can see the result
<a href="https://github.com/geowarin/boot-rethinkdb">on github</a>.</p>
<p>There is a docker-compose file at the root of the project that you can
use to run a RethinkDB instance instead of installing it directly on your machine.</p>
<h2 id="why-rethinkdb">Why RethinkDB?</h2>
<p>I already gave RethinkDB a try a few months ago and I was very impressed
with its beautiful admin GUI, its clustering capabilities and its clever
and intuitive API.</p>
<p>But there is more! RethinkDB is a DB engine designed to push updates to the clients
in real time.</p>
<p>In the <a href="https://github.com/henryr/cap-faq">CAP theorem</a>, rethinkDB focuses on being
Consistent in case of difficulties in the cluster.</p>
<p>Relevant quote from the <a href="https://www.rethinkdb.com/docs/architecture/#cap-theorem">FAQ</a>:</p>
<!-- raw HTML omitted -->
<p>Once RethinkDB is started, you can connect on the beautiful admin GUI on port <code>8080</code>:</p>
<p><img loading="lazy" src="/assets/images/articles/2016-01-rethinkDB-admin.png" alt="The awesome GUI"  title="The RethinkDB admin GUI"  />
</p>
<h2 id="setting-up-the-project">Setting up the project</h2>
<p>I created a Gradle project with the <code>web</code> and <code>websocket</code> Spring boot starters.
I also added a couple of <a href="https://spring.io/blog/2014/01/03/utilizing-webjars-in-spring-boot">webjars</a>:
<code>jquery</code> for ajax requests, sockjs and stomp to connect to Spring&rsquo;s websockets:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>dependencies <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    compile<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>    compile<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;org.springframework.boot:spring-boot-starter-websocket&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>    compile<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;org.springframework.boot:spring-boot-devtools&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    compile <span style="color:#5af78e">&#39;org.webjars:jquery:3.0.0-alpha1&#39;</span>
</span></span><span style="display:flex;"><span>    compile <span style="color:#5af78e">&#39;org.webjars:sockjs-client:1.0.0&#39;</span>
</span></span><span style="display:flex;"><span>    compile <span style="color:#5af78e">&#39;org.webjars:stomp-websocket:2.3.3&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    compile <span style="color:#5af78e">&#39;com.rethinkdb:rethinkdb-driver:2.2-b1-SNAPSHOT&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span></code></pre></div><h2 id="getting-a-connection">Getting a connection</h2>
<p>Every action we will perform on the database will require a <code>Connection</code>.
We can create a small factory that we will later use in the code:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RethinkDBConnectionFactory</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> String host;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">RethinkDBConnectionFactory</span>(String host) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">host</span> <span style="color:#ff6ac1">=</span> host;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> Connection<span style="color:#ff6ac1">&lt;</span>ConnectionInstance<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">createConnection</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">return</span> RethinkDB.<span style="color:#57c7ff">r</span>.<span style="color:#57c7ff">connection</span>().<span style="color:#57c7ff">hostname</span>(host).<span style="color:#57c7ff">connect</span>();
</span></span><span style="display:flex;"><span>        } <span style="color:#ff6ac1">catch</span> (TimeoutException e) {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">throw</span> <span style="color:#ff6ac1">new</span> RuntimeException(e);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="initializing-the-db">Initializing the DB</h2>
<p>For this little chat, we will need a database called <code>chat</code> and a table
called <code>messages</code>.</p>
<p>To avoid creating them by hand, we can create a Spring bean that will get called
when the application starts:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DbInitializer</span> <span style="color:#ff5c57">implements</span> InitializingBean {
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> RethinkDBConnectionFactory connectionFactory;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> ChatChangesListener chatChangesListener;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> RethinkDB r <span style="color:#ff6ac1">=</span> RethinkDB.<span style="color:#57c7ff">r</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">afterPropertiesSet</span>() <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>        createDb();
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// we will see that later on</span>
</span></span><span style="display:flex;"><span>        chatChangesListener.<span style="color:#57c7ff">pushChangesToWebSocket</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">createDb</span>() {
</span></span><span style="display:flex;"><span>        Connection<span style="color:#ff6ac1">&lt;</span>ConnectionInstance<span style="color:#ff6ac1">&gt;</span> connection <span style="color:#ff6ac1">=</span> connectionFactory.<span style="color:#57c7ff">createConnection</span>();
</span></span><span style="display:flex;"><span>        List<span style="color:#ff6ac1">&lt;</span>String<span style="color:#ff6ac1">&gt;</span> dbList <span style="color:#ff6ac1">=</span> r.<span style="color:#57c7ff">dbList</span>().<span style="color:#57c7ff">run</span>(connection);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">if</span> (<span style="color:#ff6ac1">!</span>dbList.<span style="color:#57c7ff">contains</span>(<span style="color:#5af78e">&#34;chat&#34;</span>)) {
</span></span><span style="display:flex;"><span>            r.<span style="color:#57c7ff">dbCreate</span>(<span style="color:#5af78e">&#34;chat&#34;</span>).<span style="color:#57c7ff">run</span>(connection);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        List<span style="color:#ff6ac1">&lt;</span>String<span style="color:#ff6ac1">&gt;</span> tables <span style="color:#ff6ac1">=</span> r.<span style="color:#57c7ff">db</span>(<span style="color:#5af78e">&#34;chat&#34;</span>).<span style="color:#57c7ff">tableList</span>().<span style="color:#57c7ff">run</span>(connection);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">if</span> (<span style="color:#ff6ac1">!</span>tables.<span style="color:#57c7ff">contains</span>(<span style="color:#5af78e">&#34;messages&#34;</span>)) {
</span></span><span style="display:flex;"><span>            r.<span style="color:#57c7ff">db</span>(<span style="color:#5af78e">&#34;chat&#34;</span>).<span style="color:#57c7ff">tableCreate</span>(<span style="color:#5af78e">&#34;messages&#34;</span>).<span style="color:#57c7ff">run</span>(connection);
</span></span><span style="display:flex;"><span>            r.<span style="color:#57c7ff">db</span>(<span style="color:#5af78e">&#34;chat&#34;</span>).<span style="color:#57c7ff">table</span>(<span style="color:#5af78e">&#34;messages&#34;</span>).<span style="color:#57c7ff">indexCreate</span>(<span style="color:#5af78e">&#34;time&#34;</span>).<span style="color:#57c7ff">run</span>(connection);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Ignore the <code>pushChangesToWebSocket()</code> method call for now, we will see this in a minute.</p>
<p>We can already get a feel for the RethinkDB API.
It was originally designed for dynamically typed language so some things might
be a little awkward for hardcore Java developers.</p>
<p>For instance, the result of the operations can be of any type.
RethinkDB will try to coerce the result according to the return type chosen, if possible.</p>
<p>This is both good, because of the additional flexibility, and bad, because you
cannot rely on autocomplete to know the return type of an operation.</p>
<h2 id="the-chatcontroller">The ChatController</h2>
<p>The chat controller will react to two things:</p>
<ol>
<li><code>GET</code>ting the last 20 messages from the DB</li>
<li><code>POST</code>ing a new message</li>
</ol>
<p>Here is the code, which is kind of straight-forward:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@RestController</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@RequestMapping</span>(<span style="color:#5af78e">&#34;/chat&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">ChatController</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> <span style="color:#ff5c57">final</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(ChatController.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> RethinkDB r <span style="color:#ff6ac1">=</span> RethinkDB.<span style="color:#57c7ff">r</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> RethinkDBConnectionFactory connectionFactory;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@RequestMapping</span>(method <span style="color:#ff6ac1">=</span> RequestMethod.<span style="color:#57c7ff">POST</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> ChatMessage <span style="color:#57c7ff">postMessage</span>(<span style="color:#ff9f43">@RequestBody</span> ChatMessage chatMessage) {
</span></span><span style="display:flex;"><span>        chatMessage.<span style="color:#57c7ff">setTime</span>(OffsetDateTime.<span style="color:#57c7ff">now</span>());
</span></span><span style="display:flex;"><span>        Object run <span style="color:#ff6ac1">=</span> r.<span style="color:#57c7ff">db</span>(<span style="color:#5af78e">&#34;chat&#34;</span>).<span style="color:#57c7ff">table</span>(<span style="color:#5af78e">&#34;messages&#34;</span>).<span style="color:#57c7ff">insert</span>(chatMessage)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">run</span>(connectionFactory.<span style="color:#57c7ff">createConnection</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;Insert {}&#34;</span>, run);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> chatMessage;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@RequestMapping</span>(method <span style="color:#ff6ac1">=</span> RequestMethod.<span style="color:#57c7ff">GET</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> List<span style="color:#ff6ac1">&lt;</span>ChatMessage<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">getMessages</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        List<span style="color:#ff6ac1">&lt;</span>ChatMessage<span style="color:#ff6ac1">&gt;</span> messages <span style="color:#ff6ac1">=</span> r.<span style="color:#57c7ff">db</span>(<span style="color:#5af78e">&#34;chat&#34;</span>).<span style="color:#57c7ff">table</span>(<span style="color:#5af78e">&#34;messages&#34;</span>)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">orderBy</span>().<span style="color:#57c7ff">optArg</span>(<span style="color:#5af78e">&#34;index&#34;</span>, r.<span style="color:#57c7ff">desc</span>(<span style="color:#5af78e">&#34;time&#34;</span>))
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">limit</span>(20)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">orderBy</span>(<span style="color:#5af78e">&#34;time&#34;</span>)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">run</span>(connectionFactory.<span style="color:#57c7ff">createConnection</span>(), ChatMessage.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> messages;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The cool thing is that the API clean and simple to understand.</p>
<p>Some things are still a bit funny:</p>
<ul>
<li>The <code>optArg</code> after the orderBy is a bit cryptic</li>
<li>I spent some time figuring out that your POJO class must not contain any id
attribute for the auto-generation to work</li>
</ul>
<h2 id="setting-up-websockets">Setting up websockets</h2>
<p>Now that we can read and write from the DB, we need to push the updates to
the client in real time.</p>
<p>We will use websockets over <a href="http://www.rabbitmq.com/blog/2011/09/13/sockjs-websocket-emulation/">SockJS</a> for that.
The configuration for websockets is pretty classic:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableWebSocketMessageBroker</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">WebSocketConfig</span> <span style="color:#ff5c57">extends</span> AbstractWebSocketMessageBrokerConfigurer {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">configureMessageBroker</span>(MessageBrokerRegistry config) {
</span></span><span style="display:flex;"><span>        config.<span style="color:#57c7ff">enableSimpleBroker</span>(<span style="color:#5af78e">&#34;/topic&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">registerStompEndpoints</span>(StompEndpointRegistry registry) {
</span></span><span style="display:flex;"><span>        registry.<span style="color:#57c7ff">addEndpoint</span>(<span style="color:#5af78e">&#34;/chatWS&#34;</span>).<span style="color:#57c7ff">withSockJS</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>How to read that:</p>
<ul>
<li>Our clients will be able to connect to the <code>/chatWS</code> endpoint</li>
<li>The clients will then have the possibility to listen to any topic whose url begins
with <code>/topic</code> (i.e, <code>/topic/messages</code>) and get notified in real time</li>
</ul>
<h2 id="listening-to-the-updates">Listening to the updates</h2>
<p>We will now listen to database updates in a thread and broadcast the changes
to all the clients listening on the web socket.</p>
<p>We use the <code>@Async</code> annotation, so Spring will take care of running the code in a thread
for us:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">ChatChangesListener</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> <span style="color:#ff5c57">final</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(ChatChangesListener.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> RethinkDB r <span style="color:#ff6ac1">=</span> RethinkDB.<span style="color:#57c7ff">r</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> RethinkDBConnectionFactory connectionFactory;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> SimpMessagingTemplate webSocket;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Async</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">pushChangesToWebSocket</span>() {
</span></span><span style="display:flex;"><span>      Cursor<span style="color:#ff6ac1">&lt;</span>ChatMessage<span style="color:#ff6ac1">&gt;</span> cursor <span style="color:#ff6ac1">=</span> r.<span style="color:#57c7ff">db</span>(<span style="color:#5af78e">&#34;chat&#34;</span>).<span style="color:#57c7ff">table</span>(<span style="color:#5af78e">&#34;messages&#34;</span>).<span style="color:#57c7ff">changes</span>()
</span></span><span style="display:flex;"><span>              .<span style="color:#57c7ff">getField</span>(<span style="color:#5af78e">&#34;new_val&#34;</span>)
</span></span><span style="display:flex;"><span>              .<span style="color:#57c7ff">run</span>(connectionFactory.<span style="color:#57c7ff">createConnection</span>(), ChatMessage.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">while</span> (cursor.<span style="color:#57c7ff">hasNext</span>()) {
</span></span><span style="display:flex;"><span>          ChatMessage chatMessage <span style="color:#ff6ac1">=</span> cursor.<span style="color:#57c7ff">next</span>();
</span></span><span style="display:flex;"><span>          log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;New message: {}&#34;</span>, chatMessage.<span style="color:#57c7ff">message</span>);
</span></span><span style="display:flex;"><span>          webSocket.<span style="color:#57c7ff">convertAndSend</span>(<span style="color:#5af78e">&#34;/topic/messages&#34;</span>, chatMessage);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>So what happens here? Each time a change happens in the database,
we will get an update. This update will contain two fields: <code>old_val</code> and <code>new_val</code>.
See <a href="https://www.rethinkdb.com/api/java/changes/">the documentation</a>.</p>
<p>Since we are only interested in the new things, we will only retrieve the <code>new_val</code> field.</p>
<p>Note that the second (optional) argument to the <code>run</code> method is a class.
If present, RethinkDB will try to convert the data to this target class, just like
we did in the <code>ChatController</code> above.</p>
<p>Then, we simply broadcast the message to all the clients listening on <code>/topic/messages</code>.</p>
<h2 id="the-client">The client</h2>
<p>If you never used webjars before, they are simply jar packages containing frontend
dependencies. With Spring Boot we can use them in our web pages directly.
Below the <code>index.html</code> file of our application:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#78787e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff6ac1">html</span> <span style="color:#57c7ff">lang</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;en&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff6ac1">head</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">meta</span> <span style="color:#57c7ff">charset</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;UTF-8&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">title</span>&gt;Title&lt;/<span style="color:#ff6ac1">title</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">script</span> <span style="color:#57c7ff">src</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;webjars/jquery/3.0.0-alpha1/jquery.js&#34;</span>&gt;&lt;/<span style="color:#ff6ac1">script</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">script</span> <span style="color:#57c7ff">src</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;webjars/sockjs-client/1.0.0/sockjs.js&#34;</span>&gt;&lt;/<span style="color:#ff6ac1">script</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">script</span> <span style="color:#57c7ff">src</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;webjars/stomp-websocket/2.3.3/stomp.js&#34;</span>&gt;&lt;/<span style="color:#ff6ac1">script</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">script</span> <span style="color:#57c7ff">src</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;js/main.js&#34;</span>&gt;&lt;/<span style="color:#ff6ac1">script</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#ff6ac1">head</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff6ac1">body</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff6ac1">div</span> <span style="color:#57c7ff">id</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;chat&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">div</span> <span style="color:#57c7ff">id</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;messages&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">form</span> <span style="color:#57c7ff">onsubmit</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;sendMessage(); return false;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#ff6ac1">label</span>&gt;
</span></span><span style="display:flex;"><span>            Message:
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#ff6ac1">input</span> <span style="color:#57c7ff">type</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;text&#34;</span> <span style="color:#57c7ff">id</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;messageInput&#34;</span> /&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#ff6ac1">label</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#ff6ac1">button</span> <span style="color:#57c7ff">type</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;submit&#34;</span>&gt;Send&lt;/<span style="color:#ff6ac1">button</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#ff6ac1">form</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#ff6ac1">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#ff6ac1">html</span>&gt;
</span></span></code></pre></div><p>And the javascript:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#ff5c57">var</span> userName <span style="color:#ff6ac1">=</span> <span style="color:#ff5c57">window</span>.prompt(<span style="color:#5af78e">&#34;Enter your name&#34;</span>, <span style="color:#5af78e">&#34;some user&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">function</span> appendMessage(message) {
</span></span><span style="display:flex;"><span>    $(<span style="color:#5af78e">&#39;#messages&#39;</span>).append($(<span style="color:#5af78e">&#39;&lt;div /&gt;&#39;</span>).text(message.from <span style="color:#ff6ac1">+</span> <span style="color:#5af78e">&#34;: &#34;</span> <span style="color:#ff6ac1">+</span> message.message))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">function</span> getPreviousMessages() {
</span></span><span style="display:flex;"><span>    $.get(<span style="color:#5af78e">&#39;/chat&#39;</span>).done(messages =&gt; messages.forEach(appendMessage));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">function</span> sendMessage() {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">var</span> $messageInput <span style="color:#ff6ac1">=</span> $(<span style="color:#5af78e">&#39;#messageInput&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">var</span> message <span style="color:#ff6ac1">=</span> {message<span style="color:#ff6ac1">:</span> $messageInput.val(), from<span style="color:#ff6ac1">:</span> userName};
</span></span><span style="display:flex;"><span>    $messageInput.val(<span style="color:#5af78e">&#39;&#39;</span>);
</span></span><span style="display:flex;"><span>    post(<span style="color:#5af78e">&#39;/chat&#39;</span>, message);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">function</span> onNewMessage(result) {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">var</span> message <span style="color:#ff6ac1">=</span> JSON.parse(result.body);
</span></span><span style="display:flex;"><span>    appendMessage(message);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">function</span> connectWebSocket() {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">var</span> socket <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> SockJS(<span style="color:#5af78e">&#39;/chatWS&#39;</span>);
</span></span><span style="display:flex;"><span>    stompClient <span style="color:#ff6ac1">=</span> Stomp.over(socket);
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">//stompClient.debug = null;
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>    stompClient.connect({}, (frame) =&gt; {
</span></span><span style="display:flex;"><span>        console.log(<span style="color:#5af78e">&#39;Connected: &#39;</span> <span style="color:#ff6ac1">+</span> frame);
</span></span><span style="display:flex;"><span>        stompClient.subscribe(<span style="color:#5af78e">&#39;/topic/messages&#39;</span>, onNewMessage);
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>getPreviousMessages();
</span></span><span style="display:flex;"><span>connectWebSocket();
</span></span></code></pre></div><p><img loading="lazy" src="/assets/images/articles/2016-01-rethinkDB-hello.gif" alt="The chat with a bit of CSS"  title="Hello world!"  />
</p>
<h2 id="conclusion">Conclusion</h2>
<p>RethinkDB is an awesome database, especially because it lets you decouple the
code that updates the database and the code that listens to the changes.</p>
<p>The driver is brand new and still in beta but we can already salute the efforts
of the developers for such an amazing work!</p>
<p>As always, check out the project <a href="https://github.com/geowarin/boot-rethinkdb">on github</a>
and tell me what you think!</p>
]]></content:encoded></item><item><title>Test your Java application with Groovy</title><link>https://geowarin.com/test-your-java-application-with-groovy/</link><pubDate>Wed, 20 Jan 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/test-your-java-application-with-groovy/</guid><description>You can write better tests for your Java application with Spock, Groovy and very little configuration</description><content:encoded><![CDATA[<p>I think Groovy is a wonderful language.
However, I would not advise a complete rewrite of your project in Groovy!</p>
<p>We can however use Groovy to test our Java code.</p>
<p>I&rsquo;m actually a big fan of this approach.
I&rsquo;ve been using it to test legacy applications written in Java.</p>
<p>I still couldn&rsquo;t use lambdas or fancy Java 8 features but all of a sudden,
my test code was more expressive.
I could take advantage closures, power asserts, the Spock DSL and Groovy simple syntax.
The best part: every library I used was a test dependency and never impacted
the actual code.</p>
<p>In this article I will show you how to add Groovy tests to
an existing Java application built either with Maven or Gradle.</p>
<p>The code source of a demo application using Maven and Spock is <a href="https://github.com/geowarin/groovy-tests">available on github</a>.</p>
<h2 id="why-groovy">Why groovy?</h2>
<p>Groovy is a dynamic language with optional typing. It means that you can
have the guarantees of a type system when it matters and the versatility of
duck typing when you know what your are doing.</p>
<p>Groovy removes all the verbosity from the Java syntax.
Some small examples:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span><span style="color:#78787e">// map literals
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>Map<span style="color:#ff6ac1">&lt;</span>String<span style="color:#ff6ac1">,</span> String<span style="color:#ff6ac1">&gt;</span> things <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">[</span><span style="color:#5af78e">&#39;hello&#39;</span><span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;world&#39;</span><span style="color:#ff6ac1">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">// Write to a file
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span><span style="color:#ff6ac1">new</span> <span style="color:#57c7ff">File</span><span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#34;hello.txt&#34;</span><span style="color:#ff6ac1">)</span> <span style="color:#ff6ac1">&lt;&lt;</span> <span style="color:#5af78e">&#39;Hello world!&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">// Add some numbers
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>BigInteger a <span style="color:#ff6ac1">=</span> <span style="color:#ff9f43">18</span>
</span></span><span style="display:flex;"><span>BigDecimal b <span style="color:#ff6ac1">=</span> <span style="color:#ff9f43">24</span>
</span></span><span style="display:flex;"><span><span style="color:#9aedfe">int</span> sum <span style="color:#ff6ac1">=</span> a <span style="color:#ff6ac1">+</span> b
</span></span><span style="display:flex;"><span>println <span style="color:#5af78e">&#34;$sum ${sum.class}&#34;</span> <span style="color:#78787e">// 42 class java.lang.Integer
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">// List literals
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>List<span style="color:#ff6ac1">&lt;</span>Number<span style="color:#ff6ac1">&gt;</span> numbers <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">[-</span><span style="color:#ff9f43">2</span><span style="color:#ff6ac1">,</span> <span style="color:#ff9f43">12</span><span style="color:#ff6ac1">,</span> <span style="color:#ff9f43">6</span><span style="color:#ff6ac1">,</span> <span style="color:#ff9f43">3</span><span style="color:#ff6ac1">]</span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">// Closures
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span><span style="color:#9aedfe">def</span> result <span style="color:#ff6ac1">=</span> numbers
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">.</span><span style="color:#57c7ff">findAll</span> <span style="color:#ff6ac1">{</span> it <span style="color:#ff6ac1">&gt;</span> <span style="color:#ff9f43">0</span> <span style="color:#ff6ac1">}</span> <span style="color:#78787e">// filter
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>        <span style="color:#ff6ac1">.</span><span style="color:#57c7ff">collect</span> <span style="color:#ff6ac1">{</span> it <span style="color:#ff6ac1">*</span> <span style="color:#ff9f43">2</span> <span style="color:#ff6ac1">}</span> <span style="color:#78787e">// map
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>        <span style="color:#ff6ac1">.</span><span style="color:#57c7ff">sum</span><span style="color:#ff6ac1">()</span> <span style="color:#78787e">// reduce
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">// template strings
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>println <span style="color:#5af78e">&#34;This answer to life, universe and everything: ${result}&#34;</span>
</span></span></code></pre></div><p>If you want a good introduction to groovy check out the <a href="http://www.groovy-lang.org/style-guide.html">groovy style guide</a>.</p>
<p>You can also watch the amazing <a href="http://www.infoq.com/presentations/groovy-for-java">Groovy for Java developers</a> presentation by Peter Ledbrook.</p>
<p>Another thing. Groovy let you access private class members.
Although this completely violates encapsulation, you will get away
with just a warning.</p>
<p>It is nice to have this kind of ability when you add tests to a legacy application before
refactoring it.</p>
<h2 id="why-spock">Why Spock?</h2>
<p>Spock is a wonderful test framework.</p>
<p>It combines the best features of other frameworks like JUnit, jMock, and RSpec
and let you write specifications with a nice <a href="https://fr.wikipedia.org/wiki/Behavior_driven_development">BDD</a> DSL.</p>
<p>It is fully compatible with JUnit so you can use all the stuff you like (rules for instance)
and much more!</p>
<p>It will also completely remove the need for a mocking framework like Mockito.</p>
<p>If you want to learn more about Spock read: <a href="https://code.google.com/p/spock/wiki/WhySpock">why spock</a> and <a href="http://spockframework.github.io/spock/docs/1.0/spock_primer.html">spock primer</a>.</p>
<p>I also found the <a href="https://github.com/spockframework/next-level-spock">next level spock repo</a>
interesting to look at.</p>
<h2 id="how">How?</h2>
<p>You are now ready to add Spock to your tool-belt. But how?</p>
<h3 id="with-maven">With Maven</h3>
<p>Add dependencies to Groovy and Spock:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;dependencies&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.codehaus.groovy<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;artifactId&gt;</span>groovy-all<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;version&gt;</span>2.4.4<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;scope&gt;</span>test<span style="color:#ff6ac1">&lt;/scope&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.spockframework<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;artifactId&gt;</span>spock-core<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;version&gt;</span>1.0-groovy-2.4<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;scope&gt;</span>test<span style="color:#ff6ac1">&lt;/scope&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/dependencies&gt;</span>
</span></span></code></pre></div><p>Now, you need to tell maven to compile the code contained in <code>src/test/groovy</code>.
We will use the <a href="https://github.com/groovy/GMavenPlus">gmavenplus</a> plugin for that.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;build&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;plugins&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;plugin&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.codehaus.gmavenplus<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;artifactId&gt;</span>gmavenplus-plugin<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;version&gt;</span>1.0<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;executions&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;execution&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;goals&gt;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#ff6ac1">&lt;goal&gt;</span>generateStubs<span style="color:#ff6ac1">&lt;/goal&gt;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#ff6ac1">&lt;goal&gt;</span>compile<span style="color:#ff6ac1">&lt;/goal&gt;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#ff6ac1">&lt;goal&gt;</span>testGenerateStubs<span style="color:#ff6ac1">&lt;/goal&gt;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#ff6ac1">&lt;goal&gt;</span>testCompile<span style="color:#ff6ac1">&lt;/goal&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;/goals&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;/execution&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;/executions&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;dependencies&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.codehaus.groovy<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;artifactId&gt;</span>groovy-all<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;version&gt;</span>2.4.4<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;scope&gt;</span>runtime<span style="color:#ff6ac1">&lt;/scope&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;/dependencies&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;/plugin&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">&lt;!-- Optional --&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;plugin&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.apache.maven.plugins<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;artifactId&gt;</span>maven-surefire-plugin<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;version&gt;</span>2.16<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;configuration&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;parallel&gt;</span>methods<span style="color:#ff6ac1">&lt;/parallel&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;threadCount&gt;</span>5<span style="color:#ff6ac1">&lt;/threadCount&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;includes&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;include&gt;</span>**/*Test.*<span style="color:#ff6ac1">&lt;/include&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;include&gt;</span>**/*Spec.*<span style="color:#ff6ac1">&lt;/include&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;/includes&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;excludes&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;exclude&gt;</span>**/Abstract*.java<span style="color:#ff6ac1">&lt;/exclude&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;/excludes&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;/configuration&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;/plugin&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/plugins&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/build&gt;</span>
</span></span></code></pre></div><p>By convention, Spock tests are called specifications and spec files end with
<code>*Spec.groovy</code>.
This is optional but we can enable that behavior by overriding the surefire default
configuration.</p>
<h3 id="with-gradle">With gradle</h3>
<p>Just apply the groovy plugin, included by default in Gradle.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>apply <span style="color:#ff5c57">plugin:</span> <span style="color:#5af78e">&#39;groovy&#39;</span>
</span></span></code></pre></div><p>Since the plugin extends the Java convention, it will automatically compile the
Java code contained in <code>src/main/java</code> and <code>src/test/java</code> as well as the
Groovy code contained in <code>src/main/groovy</code> and <code>src/test/groovy</code>.</p>
<h2 id="your-first-spock-specification">Your first Spock specification</h2>
<p>Place this little specification in <code>src/test/groovy</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> spock.lang.Specification
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> spock.lang.Unroll
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MySpec</span> <span style="color:#ff5c57">extends</span> Specification <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Unroll</span>
</span></span><span style="display:flex;"><span>    <span style="color:#9aedfe">def</span> <span style="color:#5af78e">&#34;max(#a,#b) == #c&#34;</span><span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">expect:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// This class is in our Java code
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>        MyClass<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">max</span><span style="color:#ff6ac1">(</span>a<span style="color:#ff6ac1">,</span> b<span style="color:#ff6ac1">)</span> <span style="color:#ff6ac1">==</span> c
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">where:</span>
</span></span><span style="display:flex;"><span>        a  <span style="color:#ff6ac1">|</span> b   <span style="color:#ff6ac1">|</span> c
</span></span><span style="display:flex;"><span>        <span style="color:#ff9f43">1</span>  <span style="color:#ff6ac1">|</span> <span style="color:#ff9f43">2</span>   <span style="color:#ff6ac1">|</span> <span style="color:#ff9f43">2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff9f43">42</span> <span style="color:#ff6ac1">|</span> <span style="color:#ff6ac1">-</span><span style="color:#ff9f43">12</span> <span style="color:#ff6ac1">|</span> <span style="color:#ff9f43">42</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff9f43">42</span> <span style="color:#ff6ac1">|</span> <span style="color:#ff6ac1">-</span><span style="color:#ff9f43">12</span> <span style="color:#ff6ac1">|</span> <span style="color:#ff6ac1">-</span><span style="color:#ff9f43">42</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span></code></pre></div><p>Here is what it looks like in IntelliJ:</p>
<p><img loading="lazy" src="/assets/images/articles/2016-01-spock.png" alt="Spock test results"  title="Spock results"  />
</p>
<p>You can also verify that it works with maven by typing:</p>
<pre tabindex="0"><code>mvn test
</code></pre><p>You would get this result:</p>
<pre tabindex="0"><code>-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running MySpec
Tests run: 3, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.146 sec &lt;&lt;&lt; FAILURE! - in MySpec
max(42,-12) == -42(MySpec)  Time elapsed: 0.105 sec  &lt;&lt;&lt; FAILURE!
org.spockframework.runtime.SpockComparisonFailure: Condition not satisfied:

Math.max(a, b) == c
     |   |  |  |  |
     42  42 -12|  -42
               false

        at MySpec.max(#a,#b) == #c(MySpec.groovy:9)


Results :

Failed tests:
  MySpec.max(#a,#b) == #c:9 Condition not satisfied:

Math.max(a, b) == c
     |   |  |  |  |
     42  42 -12|  -42
               false


Tests run: 3, Failures: 1, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1.887 s
[INFO] Finished at: 2016-01-20T15:52:40+01:00
[INFO] Final Memory: 11M/309M
[INFO] ------------------------------------------------------------------------
</code></pre><h2 id="ide-integration">IDE integration</h2>
<p>Install the <a href="https://github.com/mycila/gmavenplus-intellij-plugin">gmavnen intelliJ plugin</a>
and the <a href="https://plugins.jetbrains.com/plugin/7114">spock plugin</a> for a better integration with your IDE.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Even if your whole codebase is in Java, your fellow developers will thank you
for bringing a breath of fresh air to your project with Groovy tests.</p>
<p>The configuration to get this working is very simple. You have no excuse
for not giving it a try!</p>
<p>As always, checkout the <a href="https://github.com/geowarin/groovy-tests">github repo</a> and tell me your thoughts.</p>
]]></content:encoded></item><item><title>Build a Docker image of your Spring Boot app</title><link>https://geowarin.com/build-a-docker-image-of-your-spring-boot-app/</link><pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/build-a-docker-image-of-your-spring-boot-app/</guid><description>With Gradle, you can create a Docker image of your Spring Boot application and ship it instead of shipping a jar</description><content:encoded><![CDATA[<p>If you like having a self-contained application as a deliverable
for your project, the idea of putting your Spring applications in a Docker
container might be appealing to you.</p>
<p>In this article, I will show you a simple way to make a docker image the output
of your Gradle build, thanks to the <a href="https://github.com/Transmode/gradle-docker">gradle-docker</a> plugin.</p>
<p>The code that we will build is a simple console application powered by Spring Boot
that will periodically write Chuck Norris facts to the standard output.
It is <a href="https://github.com/geowarin/sout-chuck-norris">available on github</a> and on <a href="https://hub.docker.com/r/geowarin/sout-chuck-norris/">Docker Hub</a>.</p>
<h2 id="take-a-spring-boot-application">Take a Spring boot application</h2>
<p>You can easily generate a starter project with <a href="http://start.spring.io/">start.spring.io</a>
or with <a href="https://www.jetbrains.com/idea/help/creating-spring-boot-projects.html">IntelliJ</a>.
We will create a gradle/groovy application with no Spring Boot starter to keep the code very simple.</p>
<p>Click on <a href="https://start.spring.io/#!type=gradle-project&amp;language=groovy&amp;groupId=com.github.geowarin&amp;artifactId=sout-chuck-norris">this link</a> to generate the project!</p>
<p>Unzip it and open it in your favorite IDE.
Since the application is going to loop forever, you can remove the generated test, which
would loop forever too.</p>
<p>Add the following dependency to your <code>build.gradle</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>compile <span style="color:#5af78e">&#39;org.codehaus.groovy.modules.http-builder:http-builder:0.7.1&#39;</span>
</span></span></code></pre></div><p>Since we will use the JSONSlurper, the idiomatic way to parse JSON in groovy, we will need
to the change the groovy dependency to <code>groovy-all</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>compile <span style="color:#5af78e">&#39;org.codehaus.groovy:groovy-all&#39;</span>
</span></span></code></pre></div><h2 id="the-code">The code</h2>
<p>The code is really simple:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span><span style="color:#ff6ac1">package</span> com<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">github</span><span style="color:#ff6ac1">.</span><span style="color:#57c7ff">geowarin</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> groovy.util.logging.Log4j
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> groovyx.net.http.RESTClient
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> org.apache.log4j.Level
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> org.springframework.boot.CommandLineRunner
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> org.springframework.stereotype.Component
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Log4j</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MainRunner</span> <span style="color:#ff5c57">implements</span> CommandLineRunner <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Random random <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Random<span style="color:#ff6ac1">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">run</span><span style="color:#ff6ac1">(</span>String<span style="color:#ff6ac1">...</span> args<span style="color:#ff6ac1">)</span> <span style="color:#ff5c57">throws</span> Exception <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">while</span> <span style="color:#ff6ac1">(</span><span style="color:#ff6ac1">true</span><span style="color:#ff6ac1">)</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>            log<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">log</span><span style="color:#ff6ac1">(</span>randomLevel<span style="color:#ff6ac1">(),</span> randomMessage<span style="color:#ff6ac1">())</span>
</span></span><span style="display:flex;"><span>            sleep <span style="color:#ff9f43">3000</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> Level <span style="color:#57c7ff">randomLevel</span><span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">switch</span> <span style="color:#ff6ac1">(</span>random<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">nextInt</span><span style="color:#ff6ac1">(</span><span style="color:#ff9f43">3</span><span style="color:#ff6ac1">))</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">case</span> <span style="color:#ff9f43">0</span><span style="color:#ff6ac1">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">return</span> Level<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">DEBUG</span><span style="color:#ff6ac1">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">case</span> <span style="color:#ff9f43">1</span><span style="color:#ff6ac1">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">return</span> Level<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">INFO</span><span style="color:#ff6ac1">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">case</span> <span style="color:#ff9f43">2</span><span style="color:#ff6ac1">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">return</span> Level<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">ERROR</span><span style="color:#ff6ac1">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">default</span><span style="color:#ff6ac1">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">return</span> Level<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">INFO</span><span style="color:#ff6ac1">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> String <span style="color:#57c7ff">randomMessage</span><span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#9aedfe">def</span> client <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> RESTClient<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;http://api.icndb.com/jokes/&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#9aedfe">def</span> response <span style="color:#ff6ac1">=</span> client<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">get</span><span style="color:#ff6ac1">(</span><span style="color:#ff5c57">path:</span> <span style="color:#5af78e">&#39;random&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>        response<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">data</span><span style="color:#ff6ac1">.</span><span style="color:#57c7ff">value</span><span style="color:#ff6ac1">.</span><span style="color:#57c7ff">joke</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span></code></pre></div><h2 id="build-the-docker-image">Build the docker image</h2>
<p>Add the plugin repository to find the Docker plugin:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>buildscript <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>  ext <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    springBootVersion <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#39;1.3.0.RELEASE&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>  repositories <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    mavenCentral<span style="color:#ff6ac1">()</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>  dependencies <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    classpath<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#34;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&#34;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>    classpath <span style="color:#5af78e">&#34;se.transmode.gradle:gradle-docker:1.2&#34;</span> <span style="color:#78787e">// &lt;- Here
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>  <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span></code></pre></div><p>Apply the Docker plugin:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>apply <span style="color:#ff5c57">plugin:</span> <span style="color:#5af78e">&#39;docker&#39;</span>
</span></span></code></pre></div><p>Finally, add the buildDocker task:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>task <span style="color:#57c7ff">buildDocker</span><span style="color:#ff6ac1">(</span><span style="color:#ff5c57">type:</span> Docker<span style="color:#ff6ac1">)</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>  baseImage <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#39;develar/java:latest&#39;</span>
</span></span><span style="display:flex;"><span>  push <span style="color:#ff6ac1">=</span> project<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">hasProperty</span><span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;push&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>  tag <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#39;geowarin/sout-chuck-norris&#39;</span>
</span></span><span style="display:flex;"><span>  addFile <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    from jar
</span></span><span style="display:flex;"><span>    rename <span style="color:#ff6ac1">{</span><span style="color:#5af78e">&#39;app.jar&#39;</span><span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>  entryPoint<span style="color:#ff6ac1">([</span><span style="color:#5af78e">&#39;java&#39;</span><span style="color:#ff6ac1">,</span> <span style="color:#5af78e">&#39;-Djava.security.egd=file:/dev/./urandom&#39;</span><span style="color:#ff6ac1">,</span> <span style="color:#5af78e">&#39;-jar&#39;</span><span style="color:#ff6ac1">,</span> <span style="color:#5af78e">&#39;/app.jar&#39;</span><span style="color:#ff6ac1">])</span>
</span></span><span style="display:flex;"><span>  <span style="color:#78787e">// exposePort(8080)
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span><span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>buildDocker<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">dependsOn</span><span style="color:#ff6ac1">(</span>build<span style="color:#ff6ac1">)</span>
</span></span></code></pre></div><p>With this Docker plugin, every Docker instruction is available in the Gradle build
so you don&rsquo;t even have to write a Dockerfile.</p>
<p>In this task, we create an image called <code>geowarin/sout-chuck-norris</code> (change geowarin to
your user name).
It will contain only the jar produced by our build, which will be renamed to <code>app.jar</code>.
Then, the entry point of the container is simply <code>java -jar app.jar</code>.</p>
<p>The advantage of using an entry point instead of a <code>CMD</code> is that we can append command
line arguments to the <code>docker run ...</code> command and those will be passed to our application.</p>
<p>The downside is you cannot use <code>docker exec ... bash</code> to attach to the container.</p>
<p>We use Develar&rsquo;s java 8 image. It is built on top of Alpine and weights less than
120MB.</p>
<p>You can now run <code>./gradlew buildDocker</code> to create the docker image containing
our project.</p>
<pre tabindex="0"><code>REPOSITORY                   TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
geowarin/sout-chuck-norris   latest              85ff1a728670        4 seconds ago       135.9 MB
</code></pre><h2 id="publish-the-image-to-the-docker-hub">Publish the image to the Docker hub</h2>
<p>Create an account on <a href="https://hub.docker.com/">the docker hub</a> then use
<code>docker login</code> to authenticate your client.</p>
<p>You can now run <code>./gradlew buildDocker -Ppush</code> to publish your image to docker
hub.</p>
<p>Once it is published, anyone can run you application.
If the image is not available on their machine, it will be pulled from the docker hub.</p>
<pre tabindex="0"><code>$&gt; docker run geowarin/sout-chuck-norris
Unable to find image &#39;geowarin/sout-chuck-norris:latest&#39; locally
latest: Pulling from geowarin/sout-chuck-norris
09ef480f93cc: Verifying Checksum
a6fb0a3c9260: Download complete
Pulling repository docker.io/geowarin/sout-chuck-norris
914b85281644: Pulling dependent layers
914b85281644: Download complete
Status: Downloaded newer image for geowarin/sout-chuck-norris:latest

  .   ____          _            __ _ _
 /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  &#39;  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.3.1.RELEASE)

2016-01-12 16:54:19.089  INFO 1 --- [           main] c.g.geowarin.SoutChuckNorrisApplication  : Starting SoutChuckNorrisApplication on 05d1fedaba4d with PID 1 (/app.jar started by root in /)
2016-01-12 16:54:19.093  INFO 1 --- [           main] c.g.geowarin.SoutChuckNorrisApplication  : No active profile set, falling back to default profiles: default
2016-01-12 16:54:19.205  INFO 1 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@4533542a: startup date [Tue Jan 12 16:54:19 GMT 2016]; root of context hierarchy
2016-01-12 16:54:20.609  INFO 1 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
2016-01-12 16:54:21.456  INFO 1 --- [           main] com.github.geowarin.MainRunner           : Chuck Norris can download emails with his pick-up.
</code></pre><h2 id="conclusion">Conclusion</h2>
<p>Spring boot producing runnable jars, it is fairly easy to embed them inside
of a container.</p>
<p>As usual, do not hesitate to give me your feedback and to checkout the code
<a href="https://github.com/geowarin/sout-chuck-norris">on github</a>!</p>
]]></content:encoded></item><item><title>Spring boot logs in Elastic Search with fluentd</title><link>https://geowarin.com/spring-boot-logs-in-elastic-search-with-fluentd/</link><pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/spring-boot-logs-in-elastic-search-with-fluentd/</guid><description>Redirect your Spring boot logs to Elastic Search with a simple logback appender</description><content:encoded><![CDATA[<p>If you deploy a lot of micro-services with Spring Boot (or any other technology),
you will have a hard time collecting and making sense of the all logs of your different
applications.</p>
<p>In this article, I will show you a simple way to redirect your logs to Elastic Search
with a Logback appender.</p>
<p>The demo project is <a href="https://github.com/geowarin/fluentd-boot">available on github</a>.</p>
<p>While this approach requires very little configuration, the <a href="http://12factor.net/logs">12 factors app manifesto</a> actually recommends logging to stdout.</p>
<p>We will see how we can leverage docker to do that in the conclusion.</p>
<h2 id="the-efk-stack">The EFK stack</h2>
<p>A lot of people refer to the triptych Elastic Search + Logstash + Kibana as the ELK
stack.</p>
<p>In this stack, <a href="https://www.elastic.co/products/logstash">Logstash</a> is the log collector. Its role will be to redirect our
logs to Elastic Search.
Your app can either send its logs directly to Logstash/Fluentd as we will see in this example,
or write them to a file that Logstash will regularly process.</p>
<p><a href="https://www.elastic.co/products/elasticsearch">Elastic Search</a> is used to store and process a large amount of logs.</p>
<p>We can then use <a href="https://www.elastic.co/products/kibana">Kibana</a> as a dashboard to analyze them:</p>
<p><img loading="lazy" src="/assets/images/articles/2016-01-kibana.png" alt="Kibana"  title="Kibana"  />
</p>
<p>Instead of Logstash, we will use <a href="http://www.fluentd.org/">Fluentd</a>, an alternative log collector which is really
easy to set up.</p>
<h2 id="docker-compose-to-run-your-efk">Docker compose to run your EFK</h2>
<p>With docker-compose, setting up the EFK stack is really straightforward:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ff6ac1">es</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">image</span>: elasticsearch:2
</span></span><span style="display:flex;"><span><span style="color:#78787e"># The following will store es data in your boot2docker vm</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">volumes</span>:
</span></span><span style="display:flex;"><span>    - /srv/docker/es:/usr/share/elasticsearch/data
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">ports</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ff9f43">9200</span>:<span style="color:#ff9f43">9200</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ff9f43">9300</span>:<span style="color:#ff9f43">9300</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">kibana</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">image</span>: kibana
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">ports</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ff9f43">5601</span>:<span style="color:#ff9f43">5601</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">links</span>:
</span></span><span style="display:flex;"><span>    - es:elasticsearch
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">fluentd</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">build</span>: fluent-es/
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">ports</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ff9f43">24224</span>:<span style="color:#ff9f43">24224</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">links</span>:
</span></span><span style="display:flex;"><span>    - es:es
</span></span></code></pre></div><p>If you are running docker inside a VM, like me on my Mac, you cannot easily use volumes to
persist Elastic Search data because the owner of the directory must be <code>elasticsearch</code>.
So above is a little trick to easily overcome this.</p>
<p>To delete this directory, connect to your boot2docker vm with <code>docker-machine ssh default</code>.</p>
<p>The fluentd part points to a custom docker image in which I installed the Elastic
Search plugin as well as redefined the fluentd config to look like this:</p>
<pre tabindex="0"><code>&lt;source&gt;
type forward
port 24224
bind 0.0.0.0
&lt;/source&gt;


&lt;match **&gt;
type elasticsearch
logstash_format true
host &#34;#{ENV[&#39;ES_PORT_9200_TCP_ADDR&#39;]}&#34; # dynamically configured to use Docker&#39;s link feature
port 9200
flush_interval 5s
&lt;/match&gt;
</code></pre><p>In this config, we use the environment variable that docker-compose <a href="https://docs.docker.com/compose/env/">automatically
sets</a> when we use links to find the Elastic
Search host.</p>
<h2 id="configure-logback-to-send-logs-to-fluentd">Configure logback to send logs to fluentd</h2>
<p>Add the following dependencies to you build configuration:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>compile <span style="color:#5af78e">&#39;org.fluentd:fluent-logger:0.3.2&#39;</span>
</span></span><span style="display:flex;"><span>compile <span style="color:#5af78e">&#39;com.sndyuk:logback-more-appenders:1.1.1&#39;</span>
</span></span></code></pre></div><p>We use <a href="https://github.com/sndyuk/logback-more-appenders">logback-more-appenders</a>, which
includes a fluentd appender.
It&rsquo;s not available on central so you will have to add the follwing maven repo:</p>
<pre tabindex="0"><code>repositories {
    mavenCentral()
    maven { url &#39;http://sndyuk.github.com/maven&#39; }
}
</code></pre><p>Here is the logback configuration:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#78787e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;configuration&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;include</span> <span style="color:#57c7ff">resource=</span><span style="color:#5af78e">&#34;org/springframework/boot/logging/logback/base.xml&#34;</span><span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;property</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;FLUENTD_HOST&#34;</span> <span style="color:#57c7ff">value=</span><span style="color:#5af78e">&#34;${FLUENTD_HOST:-${DOCKER_HOST:-localhost}}&#34;</span><span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;property</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;FLUENTD_PORT&#34;</span> <span style="color:#57c7ff">value=</span><span style="color:#5af78e">&#34;${FLUENTD_PORT:-24224}&#34;</span><span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;appender</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;FLUENT&#34;</span> <span style="color:#57c7ff">class=</span><span style="color:#5af78e">&#34;ch.qos.logback.more.appenders.DataFluentAppender&#34;</span><span style="color:#ff6ac1">&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;tag&gt;</span>dab<span style="color:#ff6ac1">&lt;/tag&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;label&gt;</span>normal<span style="color:#ff6ac1">&lt;/label&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;remoteHost&gt;</span>${FLUENTD_HOST}<span style="color:#ff6ac1">&lt;/remoteHost&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;port&gt;</span>${FLUENTD_PORT}<span style="color:#ff6ac1">&lt;/port&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;maxQueueSize&gt;</span>20<span style="color:#ff6ac1">&lt;/maxQueueSize&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/appender&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;logger</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;fluentd&#34;</span> <span style="color:#57c7ff">level=</span><span style="color:#5af78e">&#34;debug&#34;</span> <span style="color:#57c7ff">additivity=</span><span style="color:#5af78e">&#34;false&#34;</span><span style="color:#ff6ac1">&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;appender-ref</span> <span style="color:#57c7ff">ref=</span><span style="color:#5af78e">&#34;CONSOLE&#34;</span> <span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;appender-ref</span> <span style="color:#57c7ff">ref=</span><span style="color:#5af78e">&#34;FILE&#34;</span> <span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;appender-ref</span> <span style="color:#57c7ff">ref=</span><span style="color:#5af78e">&#34;FLUENT&#34;</span> <span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/logger&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/configuration&gt;</span>
</span></span></code></pre></div><p>Note that we use the <code>FLUENTD_HOST</code> and <code>FLUENTD_PORT</code> environment variables
to connect to Fluentd so this can be overridden in production.</p>
<h2 id="use-docker-to-natively-redirect-logs-to-fluentd">Use docker to natively redirect logs to Fluentd</h2>
<p>Redirecting to fluentd directly is kind of cool but, the <a href="http://12factor.net/logs">12 factors app manifesto</a>
says we should write our logs to stdout instead.</p>
<p>If you use docker to deploy your services, you can use a native docker feature called
log drivers to redirect your standard output to fluentd!</p>
<pre tabindex="0"><code>docker run --log-driver=fluentd --log-opt fluentd-address=192.168.2.4:24225 ubuntu echo &#34;Hello world&#34;
</code></pre><p>See <a href="http://www.fluentd.org/guides/recipes/docker-logging">the manual</a> for more information.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In a cloud environment, redirecting your app&rsquo;s logs to a file is not practical.
Sometimes, it is not even an option (no persistent filesystem available on your host).</p>
<p>Elastic Search tends to become the de-facto standard logging solution for the
cloud era.</p>
<p>Don&rsquo;t forget to checkout the project <a href="https://github.com/geowarin/fluentd-boot">on github</a>
and tell me what you think!</p>
]]></content:encoded></item><item><title>Integration tests with a Docker JUnit Rule</title><link>https://geowarin.com/integration-tests-with-a-docker-junit-rule/</link><pubDate>Wed, 06 Jan 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/integration-tests-with-a-docker-junit-rule/</guid><description>Docker can help you write better tests with a simple JUnit rule</description><content:encoded><![CDATA[<p>When writing integration tests, you might have to run a third party server
or middleware.
Your tests should remain fast to run and you should be able to run them
from your IDE.</p>
<p>Docker seems a good choice for this task!</p>
<p>I just published a <a href="https://github.com/geowarin/docker-junit-rule">small library</a> that contains a <a href="https://github.com/junit-team/junit/wiki/Rules">JUnit rule</a> allowing you
to start Docker containers before your unit tests.</p>
<p>If that sounds of interest to you, you should give it a try and tell me what
you think!</p>
<h2 id="junit-rules">JUnit rules</h2>
<p>JUnit rules allow us to do some sort of <a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming">AOP</a> applied to JUnit test.
Within a rule you are given the handle of the test to run.</p>
<p>You can decide what to do with it. Should we skip it? Should we run it?
Should we wrap it in a try catch? Should we add some behavior before or after
the test?</p>
<p>You can use the <code>@Rule</code> annotation to run the rule before each test or the
<code>@ClassRule</code> annotation to run it once in your test class.</p>
<p>You can have has many rules as you need in your any of your tests.</p>
<p>It is much more powerful than creating an abstract test class from which
test will inherit.
This is the application of the <a href="https://en.wikipedia.org/wiki/Composition_over_inheritance">composition over inheritance</a> principle.</p>
<p>Here is an example of a JUnit rule:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> com.rabbitmq.client.ConnectionFactory;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> org.junit.ClassRule;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> org.junit.Test;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> rules.RabbitContainerRule;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RabbitIntegrationTest</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@ClassRule</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> RabbitContainerRule rabbitContainerRule <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> RabbitContainerRule();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testConnectsToDocker</span>() <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>        ConnectionFactory factory <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ConnectionFactory();
</span></span><span style="display:flex;"><span>        factory.<span style="color:#57c7ff">setHost</span>(rabbitContainerRule.<span style="color:#57c7ff">getDockerHost</span>());
</span></span><span style="display:flex;"><span>        factory.<span style="color:#57c7ff">setPort</span>(rabbitContainerRule.<span style="color:#57c7ff">getRabbitServicePort</span>());
</span></span><span style="display:flex;"><span>        factory.<span style="color:#57c7ff">newConnection</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="behind-the-scene">Behind the scene</h2>
<p>Did you know that the Docker daemon is accessible via a <a href="https://docs.docker.com/engine/reference/api/docker_remote_api/">REST API</a>?
In fact when you use the docker client, it sends HTTP requests to
the daemon.</p>
<p>That also means that we can create other docker clients in any programming language.
In Java, Spotify has open-sourced a great <a href="https://github.com/spotify/docker-client">docker client</a>.</p>
<p>We will use this library to create our JUnit rule.
Here is a simplified version of what we will be doing:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DockerContainerRule</span> <span style="color:#ff5c57">extends</span> ExternalResource {
</span></span><span style="display:flex;"><span>  <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">DockerContainerRule</span>(String imageName, String<span style="color:#ff6ac1">[]</span> ports, String cmd) {
</span></span><span style="display:flex;"><span>    dockerClient <span style="color:#ff6ac1">=</span> createDockerClient();
</span></span><span style="display:flex;"><span>    ContainerConfig containerConfig <span style="color:#ff6ac1">=</span> createContainerConfig(imageName, ports, cmd);
</span></span><span style="display:flex;"><span>    dockerClient.<span style="color:#57c7ff">pull</span>(imageName);
</span></span><span style="display:flex;"><span>    container <span style="color:#ff6ac1">=</span> dockerClient.<span style="color:#57c7ff">createContainer</span>(containerConfig);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff5c57">protected</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">before</span>() <span style="color:#ff5c57">throws</span> Throwable {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">super</span>.<span style="color:#57c7ff">before</span>();
</span></span><span style="display:flex;"><span>    dockerClient.<span style="color:#57c7ff">startContainer</span>(container.<span style="color:#57c7ff">id</span>());
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff5c57">protected</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">after</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">super</span>.<span style="color:#57c7ff">after</span>();
</span></span><span style="display:flex;"><span>    dockerClient.<span style="color:#57c7ff">killContainer</span>(container.<span style="color:#57c7ff">id</span>());
</span></span><span style="display:flex;"><span>    dockerClient.<span style="color:#57c7ff">removeContainer</span>(container.<span style="color:#57c7ff">id</span>(), <span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>    dockerClient.<span style="color:#57c7ff">close</span>();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Simple, isn&rsquo;t it?
You can check out the full code <a href="https://github.com/geowarin/docker-junit-rule/blob/master/src/main/java/com/github/geowarin/junit/DockerContainerRule.java">here</a></p>
<p>This class will allow users to create their own rules, extending this one:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RabbitContainerRule</span> <span style="color:#ff5c57">extends</span> DockerContainerRule {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> String RABBIT_CONTAINER_IMAGE_NAME <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;rabbitmq:management&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">RabbitContainerRule</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// List the ports to open on the container.</span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// They will automatically be bound to random unused ports on your host</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">super</span>(RABBIT_CONTAINER_IMAGE_NAME, <span style="color:#ff6ac1">new</span> String<span style="color:#ff6ac1">[]</span>{<span style="color:#5af78e">&#34;5672&#34;</span>, <span style="color:#5af78e">&#34;15672&#34;</span>});
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">before</span>() <span style="color:#ff5c57">throws</span> Throwable {
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">super</span>.<span style="color:#57c7ff">before</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// wait for container to boot</span>
</span></span><span style="display:flex;"><span>        waitForPort(getRabbitServicePort());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">int</span> <span style="color:#57c7ff">getRabbitServicePort</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> getHostPort(<span style="color:#5af78e">&#34;5672/tcp&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">int</span> <span style="color:#57c7ff">getRabbitManagementPort</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> getHostPort(<span style="color:#5af78e">&#34;15672/tcp&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="bonus">Bonus</h2>
<p>There is an annoying thing with docker containers: you cannot tell if the
process running inside is in a ready state and waiting for your to use
it or if it is still booting.</p>
<p>Most people use <a href="https://en.wikipedia.org/wiki/Netcat"><code>netcat</code></a> on a specific
port to <a href="https://github.com/aanand/docker-wait">wait for a container</a>.</p>
<p>In Java, we can do the same thing with good old sockets!</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">waitForPort</span>(<span style="color:#9aedfe">int</span> port, <span style="color:#9aedfe">long</span> timeoutInMillis) {
</span></span><span style="display:flex;"><span>  SocketAddress address <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> InetSocketAddress(getDockerHost(), port);
</span></span><span style="display:flex;"><span>  <span style="color:#9aedfe">long</span> totalWait <span style="color:#ff6ac1">=</span> 0;
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">while</span> (<span style="color:#ff6ac1">true</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>      SocketChannel.<span style="color:#57c7ff">open</span>(address);
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">return</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#ff6ac1">catch</span> (IOException e) {
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>        Thread.<span style="color:#57c7ff">sleep</span>(100);
</span></span><span style="display:flex;"><span>        totalWait <span style="color:#ff6ac1">+=</span> 100;
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">if</span> (totalWait <span style="color:#ff6ac1">&gt;</span> timeoutInMillis) {
</span></span><span style="display:flex;"><span>          <span style="color:#ff6ac1">throw</span> <span style="color:#ff6ac1">new</span> IllegalStateException(<span style="color:#5af78e">&#34;Timeout while waiting for port &#34;</span> <span style="color:#ff6ac1">+</span> port);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      } <span style="color:#ff6ac1">catch</span> (InterruptedException ie) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">throw</span> <span style="color:#ff6ac1">new</span> IllegalStateException(ie);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>JUnit rules are a very cool way to improve the readability and the expressiveness of our tests.
Check out the <a href="http://stefanbirkner.github.io/system-rules/">system rules</a> for
a good example.</p>
<p>Don&rsquo;t forget to give a try to the project, which is available <a href="https://github.com/geowarin/docker-junit-rule">on github</a> and give me your feedback.</p>
]]></content:encoded></item><item><title>The modern java developer</title><link>https://geowarin.com/the-modern-java-developer/</link><pubDate>Mon, 28 Dec 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/the-modern-java-developer/</guid><description>What to learn in 2016 to be a top notch Java dev?</description><content:encoded><![CDATA[<p>My dear colleague Fruzenshtein asked me what
I think a modern Java developer should know or learn in 2016.</p>
<p>This is a mix of techniques and tools I&rsquo;ve learned and found useful
the past year and the one that I wish to learn in the coming year.</p>
<h2 id="practices">Practices</h2>
<p>Kent Beck once said he was &ldquo;just a good programmer with great habits&rdquo;.
As professional developers, we should all strive to cultivate better habits.</p>
<h3 id="tdd">TDD</h3>
<p>Java developers are lucky to work in a very rich ecosystem with extremely good
testing libraries.
If you do not have the healthy habit of writing <a href="http://martinfowler.com/bliki/TestDrivenDevelopment.html">tests first</a>,
you should at least make an effort to learn the tools that will help you craft quality software.</p>
<p>In no particular order, here is a curated list of the frameworks and tools I use
to write better tests:</p>
<ul>
<li><a href="http://spockframework.github.io/spock/docs/1.0/index.html">Spock</a></li>
<li><a href="http://www.gebish.org/">Geb</a> / <a href="https://github.com/FluentLenium/FluentLenium">Fluentlenium</a></li>
<li><a href="https://github.com/fakemongo/fongo">Fake Mongo</a></li>
<li><a href="http://joel-costigliola.github.io/assertj/">AssertJ</a></li>
<li><a href="http://dbunit.sourceforge.net/">DbUnit</a> / <a href="https://github.com/lordofthejars/nosql-unit">NoSqlUnit</a></li>
<li><a href="http://junit.org/junit-lambda.html">Junit lambda</a></li>
</ul>
<p>I find that writing tests in groovy is particularly awesome, if you do not know groovy
yet, give it a try this year!</p>
<h3 id="modern-build-and-ci">Modern build and CI</h3>
<p>Maven is great, fast and well integrated with IDEs.
However, I have definitely switched to <a href="http://gradle.org/">gradle</a> for all
my projects.</p>
<p>Gradle is synonym of less boilerplate, custom tasks, polyglot and truly incremental
builds.</p>
<p>You should also look at a modern Continuous integration setup.
I have been using
<a href="https://docs.travis-ci.com/user/languages/java/">travis</a> for my open source
projects.</p>
<p>At work, I&rsquo;ve been very happy to use <a href="https://about.gitlab.com/">gitlab</a>. It
has a very cool CI environment called <a href="https://about.gitlab.com/gitlab-ci/">gitlab CI</a>,
which borrows a lot of concepts from travis.</p>
<p>Better yet, deploying Gitlab with docker should take you <a href="http://www.damagehead.com/docker-gitlab-ci/">5 minutes!</a>.</p>
<p>In the Continuous deployment world, <a href="http://techblog.netflix.com/2015/11/global-continuous-delivery-with.html">Spinnaker</a> looks
very promising.</p>
<h3 id="good-tools">Good tools</h3>
<p>If your are stuck with svn do yourself a favor and learn git as soon as possible.</p>
<p>Here are some resources I found useful while learning git:</p>
<ul>
<li><a href="https://try.github.io/">Learn git in 15 minutes</a></li>
<li><a href="http://pcottle.github.io/learnGitBranching/">Learn git branching</a></li>
</ul>
<p>And of course, a <a href="https://www.jetbrains.com/idea/">great IDE</a> will change your life.</p>
<h2 id="infrastructure-docker-and-cloud">Infrastructure: Docker and cloud</h2>
<p>The past two years have been all about docker.
For a good reason in my opinion!</p>
<p>I&rsquo;ve had tons of fun and success using <a href="https://docs.docker.com/compose/">docker-compose</a>
to set up development and QA environments.</p>
<p>If you never deployed one of your pet projects to the cloud, it has never been easier.
Give a try at pivotal Web Services, Heroku or Digital Ocean if you are running docker
containers.</p>
<p>If you are looking to deploy Spring applications at scale, be sure to take a look at <a href="http://cloud.spring.io/spring-cloud-netflix/">netflix OSS</a>.
With great projects like Ribbon, Eureka and Hystrix, you&rsquo;ve got everything to
run your own cloud!</p>
<h2 id="web-and-js">Web and JS</h2>
<p>Javascript has evolved a lot this year and you should definitely look at
<a href="https://facebook.github.io/react/">React</a> or follow <a href="http://www.infoq.com/news/2015/10/angular-connect-keynote-summary">angular 2</a>&rsquo;s progress</p>
<p>The main problem with those libraries is the setup of a good development environment.
Webpack, JSPM or Browserify? How to properly setup hot reloading?
How to design your build pipeline? Those question are still difficult to answer
but I&rsquo;m confident 2016 will solve those problems.</p>
<p>If you want to get started with Spring boot and react, have a look at my
<a href="https://github.com/geowarin/boot-react">boot-react</a> project.</p>
<h2 id="functional-programming">Functional programming</h2>
<p>With lambdas in Java 8, I think the java community has begun to look more and
more at the functional programming paradigms.</p>
<p>Personally, my gateway to FP has been javascript.
With react and redux borrowing a lot of concepts from the <a href="https://github.com/evancz/elm-architecture-tutorial/">elm architecture</a> to the
excellent course I am taking called <a href="https://frontendmasters.com/courses/functional-javascript/">&ldquo;Hardcore functional programming in javascript&rdquo;</a>,
it seems that this community has a lot of interest for FP.</p>
<p>I will also have a look at <a href="http://livescript.net/">livescript</a>, an Haskell-like
language that compiles to javascript.</p>
<p>Naturally, I will also try to use those functional paradigms on
the backend.
I&rsquo;m not a big fan of Scala yet so I think I will look more closely at <a href="https://kotlinlang.org/">kotlin</a>, which is now in beta with top tier IDE support and <a href="https://kotlinlang.org/docs/tutorials/spring-boot-restful.html">compatible with spring</a></p>
<h2 id="conclusion">Conclusion</h2>
<p>What do you think of this list? Would you add something?
Do not forget to check out the <a href="http://fruzenshtein.com/successful-java-developer-2016">profile of successful Java developer in 2016
</a> on Fruzenshtein&rsquo;s notes!</p>
]]></content:encoded></item><item><title>Spring Boot and React hot loader</title><link>https://geowarin.com/spring-boot-and-react-hot-loader/</link><pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/spring-boot-and-react-hot-loader/</guid><description>The perfect setup for Spring boot and React hot loader</description><content:encoded><![CDATA[<p>When I develop web applications, I love using React.
I&rsquo;m also a Spring and groovy addict.</p>
<p>Those two stacks make me more productive.
Can we have the best of both worlds?</p>
<p>I will show you step by step how I created
<a href="https://github.com/geowarin/boot-react">this project</a>.
Feel free to fiddle with it and give me your feedback.</p>
<h2 id="goal">Goal</h2>
<p>My perfect stack on the backend is to use Spring boot and groovy.
With the latest version of Spring boot, there is a new tool called
<a href="https://spring.io/blog/2015/06/17/devtools-in-spring-boot-1-3">dev-tools</a> that
will automatically reload the embedded server when you recompile your project.</p>
<p>On the frontend, most React developers use <a href="http://webpack.github.io/">webpack</a>.
React has awesome support for hot reloading with <a href="https://github.com/gaearon/react-hot-loader">react-hot-loader</a>.
It will magically update your views without requiring you to refresh your browser.
Because React encourages your to have a unidirectional data flow, your whole
application can use hot reloading every time you save.
For this to work, we have to launch a <a href="http://webpack.github.io/docs/webpack-dev-server.html">webpack dev server</a>.</p>
<p>The problem when you launch your Spring boot server on the port 8080 and the
dev server on the port 3000 is that you will get cross origin requests preventing
the two servers from interacting.</p>
<p>We also want to isolate the two projects and make separate gradle modules.</p>
<p>This blog post will show a solution to this problem and will provide an
enjoyable dev environment.</p>
<p>This might not be the perfect solution and I&rsquo;d love any feedback from
both communities to help me improve it.</p>
<h2 id="the-backend">The backend</h2>
<p>We will generate the backend. To do that, you can go on <a href="http://start.spring.io/">http://start.spring.io/</a>
and create a <strong>gradle project</strong> using <strong>groovy</strong>, <strong>java 8</strong> and the latest Spring boot
(<strong>1.3.0 M2</strong> at the time of writing).</p>
<p>For the dependencies tick <strong>DevTools</strong> and <strong>Web</strong>.</p>
<p>If you want to do it command line style just type the following in your console:</p>
<pre tabindex="0"><code>curl https://start.spring.io/starter.tgz \
-d name=boot-react  \
-d bootVersion=1.3.0.M2 \
-d dependencies=devtools,web \
-d language=groovy \
-d JavaVersion=1.8 \
-d type=gradle-project \
-d packageName=react \
-d packaging=jar \
-d artifactId=boot-react \
-d baseDir=boot-react | tar -xzvf -
</code></pre><p>This will create a base project with the latest spring boot, the devtools, groovy
and gradle.</p>
<p>Don&rsquo;t forget to generate the gradle wrapper:</p>
<pre tabindex="0"><code>gradle wrapper
</code></pre><p>See the <a href="https://github.com/geowarin/boot-react/commit/c290269a9e105688b38dcc6cc0b3293ec85199e6">commit</a></p>
<p>Great so now we have tomcat embedded, hot reloading and supernatural groovy
strength. The usual.</p>
<p>We will create a simple REST resource that we would like our frontend to consume:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span><span style="color:#ff9f43">@RestController</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SimpleResource</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@RequestMapping</span><span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;/api/simple&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>    Map <span style="color:#57c7ff">resource</span><span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">[</span><span style="color:#ff5c57">simple:</span> <span style="color:#5af78e">&#39;resource&#39;</span><span style="color:#ff6ac1">]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span></code></pre></div><h2 id="the-frontend">The frontend</h2>
<p>As mentioned before, we want the frontend to be a separated project.
We will create a gradle module for that.</p>
<p>At the root of your project add a <code>settings.gradle</code> file with the following
content:</p>
<pre tabindex="0"><code>include &#39;frontend&#39;
</code></pre><p>Now, create a <code>frontend</code> directory under the project root and add a build.gradle
file in it:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>plugins <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    id <span style="color:#5af78e">&#34;com.moowork.node&#34;</span> version <span style="color:#5af78e">&#34;0.10&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>version <span style="color:#5af78e">&#39;0.0.1&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>task <span style="color:#57c7ff">bundle</span><span style="color:#ff6ac1">(</span><span style="color:#ff5c57">type:</span> NpmTask<span style="color:#ff6ac1">)</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    args <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">[</span><span style="color:#5af78e">&#39;run&#39;</span><span style="color:#ff6ac1">,</span> <span style="color:#5af78e">&#39;bundle&#39;</span><span style="color:#ff6ac1">]</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>task <span style="color:#57c7ff">start</span><span style="color:#ff6ac1">(</span><span style="color:#ff5c57">type:</span> NpmTask<span style="color:#ff6ac1">)</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    args <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">[</span><span style="color:#5af78e">&#39;start&#39;</span><span style="color:#ff6ac1">]</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>start<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">dependsOn</span><span style="color:#ff6ac1">(</span>npm_install<span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>bundle<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">dependsOn</span><span style="color:#ff6ac1">(</span>npm_install<span style="color:#ff6ac1">)</span>
</span></span></code></pre></div><p>See the <a href="https://github.com/geowarin/boot-react/commit/6788e068c9071d0368879bee8188b7aeb194388e">commit</a></p>
<p>We will use the <a href="https://github.com/srs/gradle-node-plugin">gradle node plugin</a>
to call the two main tasks in our application:</p>
<ul>
<li><code>npm run bundle</code> will create the minified app in the <code>dist</code> directory</li>
<li><code>npm start</code> will start our dev server</li>
</ul>
<p>We can call them from the gradle build with <code>./gradlew frontend:start</code> and
<code>./gradlew frontend:bundle</code></p>
<p>The content of the project will basically be the same as
<a href="https://github.com/gaearon/react-hot-boilerplate">react-hot-boilerplate</a></p>
<p>Let&rsquo;s get the sources of this project as a zip file from github and unzip them into the
frontend directory.
With bash, type the following command at the root of your project:</p>
<pre tabindex="0"><code>wget -qO- -O tmp.zip https://github.com/gaearon/react-hot-boilerplate/archive/master.zip &amp;&amp; unzip tmp.zip &amp;&amp; mv react-hot-boilerplate-master/* frontend &amp;&amp; rm -rf react-hot-boilerplate-master &amp;&amp; rm tmp.zip
</code></pre><p>See the <a href="https://github.com/geowarin/boot-react/commit/a3de637d0d94f48d1cdd0379038115e5b98b79d3">commit</a></p>
<p>If everything goes well, typing <code>./gradlew fronted:start</code>, will start the react
application at <code>http://localhost:3000</code>.</p>
<p>The first problem arises when you <code>ctrl+c</code> out of the gradle build,
the server will still hang. You can kill it with <code>killall node</code>.
This is a problem I&rsquo;d like help solving, if you have a solution, please tell me.</p>
<p>In the rest of the article I will use <code>npm start</code> directly, which presupposes that
you have <code>npm</code> available on your development machine.
The whole build will only require Java.</p>
<p>We will use the <a href="https://github.com/ampedandwired/html-webpack-plugin">webpack-html-plugin</a>
to automatically generate the index.html page.</p>
<pre tabindex="0"><code>npm install --save-dev html-webpack-plugin
</code></pre><p>Since using the document body as a root for our application is a bad practice,
we need to tweak the default html template.</p>
<p>I created a file called <code>index-template.html</code> in a newly created <code>assets</code> directory.
It will serve as a template to generate our <code>index.html</code> file:</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>As you can see, it contains a div with the id <code>root</code>.</p>
<p>Let&rsquo;s tweak the dev server a little bit to <a href="http://webpack.github.io/docs/webpack-dev-server.html#combining-with-an-existing-server">combine it with another server</a>.</p>
<p>Let&rsquo;s change <code>webpack.config.js</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#ff5c57">var</span> path <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;path&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">var</span> webpack <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;webpack&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">var</span> HtmlWebpackPlugin <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;html-webpack-plugin&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>module.exports <span style="color:#ff6ac1">=</span> {
</span></span><span style="display:flex;"><span>  devtool<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;eval&#39;</span>,
</span></span><span style="display:flex;"><span>  entry<span style="color:#ff6ac1">:</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#5af78e">&#39;webpack-dev-server/client?http://localhost:3000&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#5af78e">&#39;webpack/hot/only-dev-server&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#5af78e">&#39;./src/index&#39;</span>
</span></span><span style="display:flex;"><span>  ],
</span></span><span style="display:flex;"><span>  output<span style="color:#ff6ac1">:</span> {
</span></span><span style="display:flex;"><span>    path<span style="color:#ff6ac1">:</span> path.join(__dirname, <span style="color:#5af78e">&#39;dist&#39;</span>),
</span></span><span style="display:flex;"><span>    filename<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;bundle.js&#39;</span>,
</span></span><span style="display:flex;"><span>    publicPath<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;http://localhost:3000/&#39;</span>
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  plugins<span style="color:#ff6ac1">:</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">new</span> webpack.HotModuleReplacementPlugin(),
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">new</span> webpack.NoErrorsPlugin(),
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">new</span> HtmlWebpackPlugin({
</span></span><span style="display:flex;"><span>      title<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;Boot React&#39;</span>,
</span></span><span style="display:flex;"><span>      template<span style="color:#ff6ac1">:</span> path.join(__dirname, <span style="color:#5af78e">&#39;assets/index-template.html&#39;</span>)
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>  ],
</span></span><span style="display:flex;"><span>  resolve<span style="color:#ff6ac1">:</span> {
</span></span><span style="display:flex;"><span>    extensions<span style="color:#ff6ac1">:</span> [<span style="color:#5af78e">&#39;&#39;</span>, <span style="color:#5af78e">&#39;.js&#39;</span>]
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  module<span style="color:#ff6ac1">:</span> {
</span></span><span style="display:flex;"><span>    loaders<span style="color:#ff6ac1">:</span> [{
</span></span><span style="display:flex;"><span>      test<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">/\.js$/</span>,
</span></span><span style="display:flex;"><span>      loaders<span style="color:#ff6ac1">:</span> [<span style="color:#5af78e">&#39;react-hot&#39;</span>, <span style="color:#5af78e">&#39;babel&#39;</span>],
</span></span><span style="display:flex;"><span>      include<span style="color:#ff6ac1">:</span> path.join(__dirname, <span style="color:#5af78e">&#39;src&#39;</span>)
</span></span><span style="display:flex;"><span>    }]
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>We changed the <code>publicPath</code> to point directly at our dev server and included the
<code>HtmlWebpackPlugin</code>.</p>
<p>Now we can get rid of the old index.html and start our dev server with <code>npm start</code>.
The index will be automatically generated for us.</p>
<p>See the <a href="https://github.com/geowarin/boot-react/commit/10e3fdae8ac53bea40c585076363a4cc54ed9d9e">commit</a></p>
<h2 id="include-the-frontend-in-the-boot-jar">Include the frontend in the boot jar</h2>
<p>We have to create the npm <code>bundle</code> task, which will generate an optimized
web application in the <code>dist</code> directory.</p>
<p>In the <code>package.json</code> file, update the <code>scripts</code>:</p>
<pre tabindex="0"><code>&#34;scripts&#34;: {
  &#34;start&#34;: &#34;node server.js&#34;,
  &#34;bundle&#34;: &#34;webpack --optimize-minimize --optimize-dedupe --output-public-path &#39;&#39;&#34;
}
</code></pre><p>Now if you launch <code>./gradlew frontend:bundle</code>, it will generate an optimized
<code>bundle.js</code> file and the <code>index.html</code> in the <code>dist</code> directory.</p>
<p>The last step is to include this <code>dist</code> directory in our application&rsquo;s jar as
static assets.
Add the following task to our main gradle build:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>jar <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>  from<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;frontend/dist&#39;</span><span style="color:#ff6ac1">)</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    into <span style="color:#5af78e">&#39;static&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>processResources<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">dependsOn</span><span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;frontend:bundle&#39;</span><span style="color:#ff6ac1">)</span>
</span></span></code></pre></div><p>If you generate your jar with <code>./gradlew assemble</code>, you will see that the
built jar includes the frontend resources.</p>
<p>If you run the jar (<code>java -jar build/libs/boot-react-0.0.1-SNAPSHOT.jar</code>), you should
see the React hello world on <code>localhost:8080</code></p>
<p>See the <a href="https://github.com/geowarin/boot-react/commit/99b89a19200fe847bc0740346a0c4e5668b4e3c2">commit</a></p>
<h2 id="launch-it-in-dev">Launch it in dev</h2>
<p>When working on our application, it would be nice if:</p>
<ol>
<li>Launching the spring boot server in dev launched the webpack dev server</li>
<li>Our dev-server proxied the request to <code>localhost:8080</code> so we can access
the application on <code>localhost:3000</code> and not get cross-origin requests</li>
</ol>
<p>Add the following <code>WebpackLauncher</code> to the project:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Profile</span><span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;dev&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">class</span> <span style="color:#f3f99d">WebpackLauncher</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>  WebpackRunner <span style="color:#57c7ff">frontRunner</span><span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">new</span> <span style="color:#57c7ff">WebpackRunner</span><span style="color:#ff6ac1">()</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">WebpackRunner</span> <span style="color:#ff5c57">implements</span> InitializingBean <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> String WEBPACK_SERVER_PROPERTY <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#39;webpack-server-loaded&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">boolean</span> <span style="color:#57c7ff">isWindows</span><span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>      System<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">getProperty</span><span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;os.name&#39;</span><span style="color:#ff6ac1">).</span><span style="color:#57c7ff">toLowerCase</span><span style="color:#ff6ac1">().</span><span style="color:#57c7ff">contains</span><span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;windows&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">afterPropertiesSet</span><span style="color:#ff6ac1">()</span> <span style="color:#ff5c57">throws</span> Exception <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">if</span> <span style="color:#ff6ac1">(!</span>System<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">getProperty</span><span style="color:#ff6ac1">(</span>WEBPACK_SERVER_PROPERTY<span style="color:#ff6ac1">))</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>        startWebpackDevServer<span style="color:#ff6ac1">()</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">startWebpackDevServer</span><span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>      String cmd <span style="color:#ff6ac1">=</span> isWindows<span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">?</span> <span style="color:#5af78e">&#39;cmd /c npm start&#39;</span> <span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;npm start&#39;</span>
</span></span><span style="display:flex;"><span>      cmd<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">execute</span><span style="color:#ff6ac1">(</span><span style="color:#ff6ac1">null</span><span style="color:#ff6ac1">,</span> <span style="color:#ff6ac1">new</span> File<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;frontend&#39;</span><span style="color:#ff6ac1">)).</span><span style="color:#57c7ff">consumeProcessOutput</span><span style="color:#ff6ac1">(</span>System<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">out</span><span style="color:#ff6ac1">,</span> System<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">err</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>      System<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">setProperty</span><span style="color:#ff6ac1">(</span>WEBPACK_SERVER_PROPERTY<span style="color:#ff6ac1">,</span> <span style="color:#5af78e">&#39;true&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span></code></pre></div><p>This will take care of the first task by launching <code>npm start</code> when our server starts.
I used a system property to make sure the dev-tools will not reload the frontend
when we make a change in the backend code.
This class will be available when we start the application with the <code>dev</code>
<a href="http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html">profile</a></p>
<p>We can make a simple proxy with webpack-dev-server.
Change the <code>server.js</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#ff5c57">var</span> webpack <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;webpack&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">var</span> WebpackDevServer <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;webpack-dev-server&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">var</span> config <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;./webpack.dev.config&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">new</span> WebpackDevServer(webpack(config), {
</span></span><span style="display:flex;"><span>  publicPath<span style="color:#ff6ac1">:</span> config.output.publicPath,
</span></span><span style="display:flex;"><span>  hot<span style="color:#ff6ac1">:</span> <span style="color:#ff6ac1">true</span>,
</span></span><span style="display:flex;"><span>  historyApiFallback<span style="color:#ff6ac1">:</span> <span style="color:#ff6ac1">true</span>,
</span></span><span style="display:flex;"><span>  proxy<span style="color:#ff6ac1">:</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#5af78e">&#34;*&#34;</span><span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#34;http://localhost:8080&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}).listen(<span style="color:#ff9f43">3000</span>, <span style="color:#5af78e">&#39;localhost&#39;</span>, <span style="color:#ff5c57">function</span> (err, result) {
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">if</span> (err) {
</span></span><span style="display:flex;"><span>    console.log(err);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  console.log(<span style="color:#5af78e">&#39;Listening at localhost:3000&#39;</span>);
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>Launch your application with the <code>--spring.profiles.active=dev</code> flag.</p>
<p>You should be able see the react hello world on <a href="http://localhost:3000">http://localhost:3000</a>. If you make some changes to it,
it will automatically reload.</p>
<p>See the old commit <a href="https://github.com/geowarin/boot-react/commit/af66c4b2f9798ad50f4e6be30ba5fb6c5f56f79f">commit</a></p>
<p>And the new <a href="https://github.com/geowarin/boot-react/commit/2eb6460812c2f2022b49e04f8ed4034dda402c2c">commit</a></p>
<h2 id="fetch-the-resource">Fetch the resource</h2>
<p>We can check that we do not get cross-origin errors using <a href="https://github.com/mzabriskie/axios">axios</a>,
a simple library to do http requests. It supports promises and automatically
handles json.</p>
<pre tabindex="0"><code>npm i -S axios
</code></pre><p>Let&rsquo;s amend our <code>App.js</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> React, { Component } from <span style="color:#5af78e">&#39;react&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> axios from <span style="color:#5af78e">&#39;axios&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> <span style="color:#ff6ac1">class</span> App <span style="color:#ff6ac1">extends</span> Component {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  componentDidMount() {
</span></span><span style="display:flex;"><span>    axios.get(<span style="color:#5af78e">&#39;/api/simple&#39;</span>)
</span></span><span style="display:flex;"><span>      .then(res =&gt; console.log(res.data))
</span></span><span style="display:flex;"><span>      .<span style="color:#ff6ac1">catch</span>(err =&gt; console.error(err))
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  render() {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> (
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">&lt;</span>h1<span style="color:#ff6ac1">&gt;</span>Hello, guys.<span style="color:#ff6ac1">&lt;</span><span style="color:#ff5c57">/h1&gt;</span>
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>See the <a href="https://github.com/geowarin/boot-react/blob/079f0c8afcd8266355b77a094941c8cdbe1349fd/frontend/src/App.js">commit</a></p>
<h2 id="better-optimization-of-the-javascript-assets">Better optimization of the javascript assets</h2>
<p>We can further improve the compression of the javascript assets by separating our dev
webpack configuration from our production configuration.</p>
<p>In the production configuration, we can use the DefinePlugin to set the NODE_ENV
variable to production. This will allow webpack to automatically remove all the
code intended for development purposes in our libraries:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#ff6ac1">new</span> webpack.DefinePlugin({
</span></span><span style="display:flex;"><span>  <span style="color:#5af78e">&#34;process.env&#34;</span><span style="color:#ff6ac1">:</span> {
</span></span><span style="display:flex;"><span>    NODE_ENV<span style="color:#ff6ac1">:</span> JSON.stringify(<span style="color:#5af78e">&#34;production&#34;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>See the <a href="https://github.com/geowarin/boot-react/commit/a095ebca7672d2f12bb559e37e01784984a6abc1">commit</a></p>
<h2 id="feedback-needed">Feedback needed</h2>
<p>Well, this works pretty well!</p>
<p><img loading="lazy" src="/assets/images/articles/2015-08-hot-reload.gif" alt="Hot hot reload"  title="Hot reload"  />
</p>
<p>What do you think? Care to comment and help me make something better?
Your feedback is welcome!</p>
<p>The project is available <a href="https://github.com/geowarin/boot-react">on github</a>.
Pull requests and issues are gladly accepted.</p>
]]></content:encoded></item><item><title>Completable futures with Spring async</title><link>https://geowarin.com/completable-futures-with-spring-async/</link><pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/completable-futures-with-spring-async/</guid><description>Use Java 8 new CompletableFuture with Spring async</description><content:encoded><![CDATA[<p>Since version 8, java has a way better abstraction than <code>java.util.Future</code>
called <code>CompletableFuture</code>.
This new API along with the lambdas enables new ways of reasoning with futures
by composing, listening and joining them.</p>
<p>Futures are traditionally created by submitting tasks to an <code>Executor</code>.
Spring allows declaring one or multiple executors and will submit any method
annotated with <code>@Async</code> as tasks for those executors.</p>
<p>The big problem is that executors still return <code>Future</code>s and not <code>CompletableFuture</code>s.</p>
<p>We are going to create our own Executor to solve this problem.
Then we will study a solution to handle timeouts with those futures and
as a bonus, do a little bit of AOP to debug our threads.</p>
<p>You can see the resulting application <a href="https://github.com/geowarin/spring-completable">on my gihtub</a>.</p>
<h2 id="creating-an-executor-for-completablefutures">Creating an Executor for CompletableFutures</h2>
<p>If you try to return a <code>CompletableFuture</code> from an Async method in Spring,
you will get the following error:</p>
<pre tabindex="0"><code>Caused by: java.lang.ClassCastException: java.util.concurrent.FutureTask cannot be cast to java.util.concurrent.CompletableFuture
</code></pre><p>The idea is to use delegation to decorate an existing instance of <code>ExecutorService</code>.
We will implement the <code>ExecutorService</code> and use type covariance to return
<code>CompletableFuture</code>s instead of <code>Future</code>.</p>
<p>The following code has been greatly inspired by this <a href="http://binkley.blogspot.fr/2014/12/completablefuture-and-executorservice.html">blog post</a>. Many thanks to Brian Oxley!</p>
<p>So the first thing we need to do is to create a decorator for an executor service
and delegate every method to that service:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">static</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DelegatingExecutorService</span> <span style="color:#ff5c57">implements</span> ExecutorService {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> ExecutorService delegate;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">DelegatingExecutorService</span>(ExecutorService executorService) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">delegate</span> <span style="color:#ff6ac1">=</span> executorService;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> Future<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Callable<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> task) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> delegate.<span style="color:#57c7ff">submit</span>(task);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> Future<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Runnable task, T result) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> delegate.<span style="color:#57c7ff">submit</span>(task, result);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">// Override and delegate everything</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can create an interface that will extends <code>ExecutorService</code> and return
<code>CompletableFuture</code>s instead of <code>Future</code>s:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * DelegatingCompletableExecutorService {@code ExecutorService} to covariantly return {@code
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * CompletableFuture} in place of {@code Future}.
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">interface</span> <span style="color:#f3f99d">CompletableExecutorService</span> <span style="color:#ff5c57">extends</span> ExecutorService {
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * @return a completable future representing pending completion of the
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * task, never missing
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Callable<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> task);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * @return a completable future representing pending completion of the
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * task, never missing
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Runnable task, T result);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * @return a completable future representing pending completion of the
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * task, never missing
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> CompletableFuture<span style="color:#ff6ac1">&lt;?&gt;</span> submit(Runnable task);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can then implement this new interface using our decorator as a base:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">static</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DelegatingCompletableExecutorService</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">extends</span> DelegatingExecutorService
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">implements</span> CompletableExecutorService {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     DelegatingCompletableExecutorService(ExecutorService threads) {
</span></span><span style="display:flex;"><span>         <span style="color:#ff5c57">super</span>(threads);
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Callable<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> task) {
</span></span><span style="display:flex;"><span>         <span style="color:#ff5c57">final</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> cf <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> CompletableFuture<span style="color:#ff6ac1">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>         delegate.<span style="color:#57c7ff">submit</span>(() <span style="color:#ff6ac1">-&gt;</span> {
</span></span><span style="display:flex;"><span>             <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>                 cf.<span style="color:#57c7ff">complete</span>(task.<span style="color:#57c7ff">call</span>());
</span></span><span style="display:flex;"><span>             } <span style="color:#ff6ac1">catch</span> (CancellationException e) {
</span></span><span style="display:flex;"><span>                 cf.<span style="color:#57c7ff">cancel</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>             } <span style="color:#ff6ac1">catch</span> (Exception e) {
</span></span><span style="display:flex;"><span>                 cf.<span style="color:#57c7ff">completeExceptionally</span>(e);
</span></span><span style="display:flex;"><span>             }
</span></span><span style="display:flex;"><span>         });
</span></span><span style="display:flex;"><span>         <span style="color:#ff6ac1">return</span> cf;
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Runnable task, T result) {
</span></span><span style="display:flex;"><span>         <span style="color:#ff6ac1">return</span> submit(callable(task, result));
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> CompletableFuture<span style="color:#ff6ac1">&lt;?&gt;</span> submit(Runnable task) {
</span></span><span style="display:flex;"><span>         <span style="color:#ff6ac1">return</span> submit(callable(task));
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We also need to create an utility method to create a <code>CompletableExecutorService</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> CompletableExecutorService <span style="color:#57c7ff">completable</span>(ExecutorService delegate) {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> DelegatingCompletableExecutorService(delegate);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>See <a href="https://gist.github.com/geowarin/bc40acd46791aa114c30">this gist</a> for the final result.</p>
<h2 id="creating-an-async-service">Creating an async service</h2>
<p>To enable asynchronous methods in Spring, you will need this kind of configuration
class:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableAsync</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SpringAsyncConfig</span> <span style="color:#ff5c57">implements</span> AsyncConfigurer {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> <span style="color:#ff5c57">final</span> Log logger <span style="color:#ff6ac1">=</span> LogFactory.<span style="color:#57c7ff">getLog</span>(getClass());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> Executor <span style="color:#57c7ff">getAsyncExecutor</span>() {
</span></span><span style="display:flex;"><span>        ThreadFactory threadFactory <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ThreadFactoryBuilder().<span style="color:#57c7ff">setNameFormat</span>(<span style="color:#5af78e">&#34;async-%d&#34;</span>).<span style="color:#57c7ff">build</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> CompletableExecutors.<span style="color:#57c7ff">completable</span>(Executors.<span style="color:#57c7ff">newFixedThreadPool</span>(10, threadFactory));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> AsyncUncaughtExceptionHandler <span style="color:#57c7ff">getAsyncUncaughtExceptionHandler</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> (ex, method, params) <span style="color:#ff6ac1">-&gt;</span> logger.<span style="color:#57c7ff">error</span>(<span style="color:#5af78e">&#34;Uncaught async error&#34;</span>, ex);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>As you can see, we can specify which executor will handle our <code>@Async</code> methods.</p>
<p>We can now return <code>CompletableFuture</code>s from our services!</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">AsyncService</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> String<span style="color:#ff6ac1">[]</span> greetings <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> String<span style="color:#ff6ac1">[]</span>{
</span></span><span style="display:flex;"><span>            <span style="color:#5af78e">&#34;hallo&#34;</span>, <span style="color:#5af78e">&#34;hallo&#34;</span>, <span style="color:#5af78e">&#34;hej&#34;</span>, <span style="color:#5af78e">&#34;hej&#34;</span>, <span style="color:#5af78e">&#34;bonjour&#34;</span>, <span style="color:#5af78e">&#34;hola&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#5af78e">&#34;ciao&#34;</span>, <span style="color:#5af78e">&#34;shalom&#34;</span>, <span style="color:#5af78e">&#34;fáilte&#34;</span>, <span style="color:#5af78e">&#34;kaixo&#34;</span>, <span style="color:#5af78e">&#34;konnichiwa&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#5af78e">&#34;saluton&#34;</span>, <span style="color:#5af78e">&#34;päivää&#34;</span>, <span style="color:#5af78e">&#34;selamat pagi&#34;</span>, <span style="color:#5af78e">&#34;gut de&#34;</span>, <span style="color:#5af78e">&#34;olá&#34;</span>
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Async</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>String<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">asyncGreeting</span>() {
</span></span><span style="display:flex;"><span>        AsyncUtil.<span style="color:#57c7ff">randomSleep</span>(3000, TimeUnit.<span style="color:#57c7ff">MILLISECONDS</span>);
</span></span><span style="display:flex;"><span>        String result <span style="color:#ff6ac1">=</span> AsyncUtil.<span style="color:#57c7ff">getThreadName</span>() <span style="color:#ff6ac1">+</span> <span style="color:#5af78e">&#34; - &#34;</span> <span style="color:#ff6ac1">+</span> random(greetings);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> CompletableFuture.<span style="color:#57c7ff">completedFuture</span>(result);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@SafeVarargs</span> <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">final</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> T <span style="color:#57c7ff">random</span>(T... elements) {
</span></span><span style="display:flex;"><span>        LinkedList<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> greetings <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> LinkedList<span style="color:#ff6ac1">&lt;&gt;</span>(Arrays.<span style="color:#57c7ff">asList</span>(elements));
</span></span><span style="display:flex;"><span>        Collections.<span style="color:#57c7ff">shuffle</span>(greetings, ThreadLocalRandom.<span style="color:#57c7ff">current</span>());
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> greetings.<span style="color:#57c7ff">getFirst</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here is the <code>AsyncUtil</code> class in case you are wondering what&rsquo;s going on:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">AsyncUtil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">randomSleep</span>(<span style="color:#9aedfe">int</span> duration, TimeUnit timeUnit) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>            timeUnit.<span style="color:#57c7ff">sleep</span>(ThreadLocalRandom.<span style="color:#57c7ff">current</span>().<span style="color:#57c7ff">nextInt</span>(duration));
</span></span><span style="display:flex;"><span>        } <span style="color:#ff6ac1">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>            Throwables.<span style="color:#57c7ff">propagate</span>(e);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> String <span style="color:#57c7ff">getThreadName</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> Thread.<span style="color:#57c7ff">currentThread</span>().<span style="color:#57c7ff">getName</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Our service will say hello in a random language within 3 seconds of time.
How do we handle the result?</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">Runner</span> <span style="color:#ff5c57">implements</span> CommandLineRunner {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> AsyncService asyncService;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">run</span>(String... args) <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        IntStream.<span style="color:#57c7ff">rangeClosed</span>(1, 10)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">mapToObj</span>(__ <span style="color:#ff6ac1">-&gt;</span> asyncService.<span style="color:#57c7ff">asyncGreeting</span>().<span style="color:#57c7ff">exceptionally</span>(Throwable::getMessage))
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">forEach</span>(<span style="color:#ff6ac1">this</span>::printResult);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">printResult</span>(CompletableFuture<span style="color:#ff6ac1">&lt;</span>String<span style="color:#ff6ac1">&gt;</span> future) {
</span></span><span style="display:flex;"><span>        future.<span style="color:#57c7ff">thenRun</span>(() <span style="color:#ff6ac1">-&gt;</span> System.<span style="color:#57c7ff">out</span>.<span style="color:#57c7ff">println</span>(future.<span style="color:#57c7ff">join</span>()));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>My what a beauty! In the above class, we create a stream of ten elements
to call our async service ten times, make sure that we handle exceptions and
print each result on the console.</p>
<p>Please, notice that <strong>nothing is blocking</strong> in the above code.
The <code>join()</code> method will wait for a result but since we are calling it in a
callback after completion, we get a fully asynchronous code.</p>
<p>This code will produce the following output, printing each lines at different
timings:</p>
<pre tabindex="0"><code>async-7 - gut de
async-5 - konnichiwa
async-4 - hallo
async-2 - hallo
async-6 - saluton
async-1 - fáilte
async-9 - päivää
async-0 - hej
async-8 - hallo
async-3 - saluton
</code></pre><h2 id="handling-timeouts">Handling timeouts</h2>
<p>An interesting question with future is how to set a timeout and cancel them
if they run late.</p>
<p>My solution is to create another executor like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">static</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">TimeOutExecutorService</span> <span style="color:#ff5c57">extends</span> CompletableExecutors.<span style="color:#57c7ff">DelegatingCompletableExecutorService</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> Duration timeout;
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> ScheduledExecutorService schedulerExecutor;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    TimeOutExecutorService(ExecutorService delegate, Duration timeout) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">super</span>(delegate);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">timeout</span> <span style="color:#ff6ac1">=</span> timeout;
</span></span><span style="display:flex;"><span>        schedulerExecutor <span style="color:#ff6ac1">=</span> Executors.<span style="color:#57c7ff">newScheduledThreadPool</span>(1);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Callable<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> task) {
</span></span><span style="display:flex;"><span>        CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> cf <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> CompletableFuture<span style="color:#ff6ac1">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        Future<span style="color:#ff6ac1">&lt;?&gt;</span> future <span style="color:#ff6ac1">=</span> delegate.<span style="color:#57c7ff">submit</span>(() <span style="color:#ff6ac1">-&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>                cf.<span style="color:#57c7ff">complete</span>(task.<span style="color:#57c7ff">call</span>());
</span></span><span style="display:flex;"><span>            } <span style="color:#ff6ac1">catch</span> (CancellationException e) {
</span></span><span style="display:flex;"><span>                cf.<span style="color:#57c7ff">cancel</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>            } <span style="color:#ff6ac1">catch</span> (Throwable ex) {
</span></span><span style="display:flex;"><span>                cf.<span style="color:#57c7ff">completeExceptionally</span>(ex);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        schedulerExecutor.<span style="color:#57c7ff">schedule</span>(() <span style="color:#ff6ac1">-&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">if</span> (<span style="color:#ff6ac1">!</span>cf.<span style="color:#57c7ff">isDone</span>()) {
</span></span><span style="display:flex;"><span>                cf.<span style="color:#57c7ff">completeExceptionally</span>(<span style="color:#ff6ac1">new</span> TimeoutException(<span style="color:#5af78e">&#34;Timeout after &#34;</span> <span style="color:#ff6ac1">+</span> timeout));
</span></span><span style="display:flex;"><span>                future.<span style="color:#57c7ff">cancel</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }, timeout.<span style="color:#57c7ff">toMillis</span>(), TimeUnit.<span style="color:#57c7ff">MILLISECONDS</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> cf;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This implementation was inspired by <a href="http://stackoverflow.com/questions/23575067/timeout-with-default-value-in-java-8-completablefuture/24457111#24457111">a discussion</a> on stackoverflow.</p>
<p>We can now create a new executor as a Spring bean:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Bean</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;timed&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> Executor <span style="color:#57c7ff">timeoutExecutor</span>() {
</span></span><span style="display:flex;"><span>    ThreadFactory threadFactory <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ThreadFactoryBuilder().<span style="color:#57c7ff">setNameFormat</span>(<span style="color:#5af78e">&#34;timed-%d&#34;</span>).<span style="color:#57c7ff">build</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> TimedCompletables.<span style="color:#57c7ff">timed</span>(Executors.<span style="color:#57c7ff">newFixedThreadPool</span>(10, threadFactory), Duration.<span style="color:#57c7ff">ofSeconds</span>(2));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>An use it like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Async</span>(<span style="color:#5af78e">&#34;timed&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>String<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">asyncTimeoutGreeting</span>() {
</span></span><span style="display:flex;"><span>    AsyncUtil.<span style="color:#57c7ff">randomSleep</span>(3000, TimeUnit.<span style="color:#57c7ff">MILLISECONDS</span>);
</span></span><span style="display:flex;"><span>    String result <span style="color:#ff6ac1">=</span> AsyncUtil.<span style="color:#57c7ff">getThreadName</span>() <span style="color:#ff6ac1">+</span> <span style="color:#5af78e">&#34; - &#34;</span> <span style="color:#ff6ac1">+</span> random(greetings);
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> CompletableFuture.<span style="color:#57c7ff">completedFuture</span>(result);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now if we run the application again, about one third of the tasks will time out:</p>
<pre tabindex="0"><code>timed-4 - saluton
timed-3 - hallo
timed-7 - saluton
timed-8 - fáilte
timed-1 - saluton
timed-5 - hallo
Timeout after PT2S
Timeout after PT2S
Timeout after PT2S
Timeout after PT2S
</code></pre><h2 id="profiling-threads-with-aop">Profiling threads with AOP</h2>
<p>Let&rsquo;s add a dependency to <code>spring-boot-starter-aop</code> to automatically profile the
execution of our async methods:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Aspect</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">ServiceProfiler</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#ff9f43">@Pointcut</span>(<span style="color:#5af78e">&#34;execution(java.util.concurrent.CompletableFuture completable.service.*.*(..))&#34;</span>)
</span></span><span style="display:flex;"><span>   <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">serviceMethods</span>() {
</span></span><span style="display:flex;"><span>   }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#ff9f43">@Around</span>(<span style="color:#5af78e">&#34;serviceMethods()&#34;</span>)
</span></span><span style="display:flex;"><span>   <span style="color:#ff5c57">public</span> Object <span style="color:#57c7ff">profile</span>(ProceedingJoinPoint pjp) <span style="color:#ff5c57">throws</span> Throwable {
</span></span><span style="display:flex;"><span>       StopWatch stopWatch <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> StopWatch();
</span></span><span style="display:flex;"><span>       stopWatch.<span style="color:#57c7ff">start</span>();
</span></span><span style="display:flex;"><span>       Object output <span style="color:#ff6ac1">=</span> pjp.<span style="color:#57c7ff">proceed</span>();
</span></span><span style="display:flex;"><span>       stopWatch.<span style="color:#57c7ff">stop</span>();
</span></span><span style="display:flex;"><span>       <span style="color:#ff6ac1">if</span> (output <span style="color:#ff6ac1">instanceof</span> CompletableFuture) {
</span></span><span style="display:flex;"><span>           CompletableFuture future <span style="color:#ff6ac1">=</span> (CompletableFuture) output;
</span></span><span style="display:flex;"><span>           String debug <span style="color:#ff6ac1">=</span> String.<span style="color:#57c7ff">format</span>(<span style="color:#5af78e">&#34;(%d ms)&#34;</span>, stopWatch.<span style="color:#57c7ff">getTotalTimeMillis</span>());
</span></span><span style="display:flex;"><span>           future.<span style="color:#57c7ff">thenAccept</span>(o <span style="color:#ff6ac1">-&gt;</span> System.<span style="color:#57c7ff">out</span>.<span style="color:#57c7ff">println</span>(o <span style="color:#ff6ac1">+</span> <span style="color:#5af78e">&#34; - &#34;</span> <span style="color:#ff6ac1">+</span> debug));
</span></span><span style="display:flex;"><span>       }
</span></span><span style="display:flex;"><span>       <span style="color:#ff6ac1">return</span> output;
</span></span><span style="display:flex;"><span>   }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is a bit unnecessary but I used one of the callbacks of <code>CompletableFuture</code>
to display the profiling message :)</p>
<h2 id="conclusion">Conclusion</h2>
<p>Java 8 <code>CompletableFuture</code>s provide an awesome API to deal with async
tasks. Too bad that no Executor is able to create them without a bit of code
on our part.</p>
<p>I&rsquo;m not a concurrency expert so please tell me what you think of this solution
in the comments.</p>
]]></content:encoded></item><item><title>The missing fish shell tutorial</title><link>https://geowarin.com/the-missing-fish-shell-tutorial/</link><pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/the-missing-fish-shell-tutorial/</guid><description>Fish is an awesome shell but requires a bit of practice. Here are a few tips I wish people gave me when I started using it.</description><content:encoded><![CDATA[<p>I must admit it after years of trying to avoid writing script shells: I&rsquo;m not a big fan of bash.
Sure you can do amazing things when you become a script guru but for someone who spends his life trying to write
readable code, it feels a bit unnatural.</p>
<p>So it was with great pleasure and a bit of excitation that I began playing with the new kid in the shell block:
<a href="http://fishshell.com/">fish</a>.</p>
<p>After a few weeks of practice, I can tell you that I love it.
Here are a few tips to get you started using fish.</p>
<h2 id="installation">Installation</h2>
<p>The following command will install fish:</p>
<pre tabindex="0"><code>brew install fish
</code></pre><p>To add it as an available shell, you should <code>sudo vi /etc/shells</code> and add the following line <code>/usr/local/bin/fish</code>.
Now to use it as default, type:</p>
<pre tabindex="0"><code>chsh -s /usr/local/bin/fish
</code></pre><h2 id="configure-you-shell">Configure you shell</h2>
<p>First thing you can do is to configure fish. Type:</p>
<pre tabindex="0"><code>fish_config
</code></pre><p>You will be brought to a web page where you can configure your prompt and various options of fish.
Personally, I use the <code>Classic + Git</code> prompt which is still minimalist but will display useful information when you
are inside a git repository.</p>
<p>You can see right away one of the big pros of fish: it is very fast, easy to customize and has very good defaults.</p>
<h2 id="install-oh-my-fish">Install oh my fish</h2>
<p>There is one small problem with fish: <em>it is not compatible with POSIX</em>.
This means that you cannot directly use bash commands or scripts directly in fish.</p>
<p>Of course, you can invoke bash inside of fish: <code>bash my-command</code>.
But there is a simpler solution for a handful of very handy scripts called <a href="https://github.com/bpinto/oh-my-fish">oh-my-fish</a>.</p>
<p>Oh-my-fish allows you to use plugins (some kind of functions with shell loading hooks) to easily
customize your shell.</p>
<p>Follow the very simple <a href="htps://github.com/bpinto/oh-my-fish#installation">installation instructions</a>.
This will create a new fish configuration.
The main configuration file in fish is located in <code>~/.config/fish/config.fish</code> and it will be replaced by oh-my-fish (it
will be backed up don&rsquo;t worry).</p>
<p>In a nutshell, installing oh-my-fish will add the following line to your config:</p>
<pre tabindex="0"><code># Load oh-my-fish configuration.
source $OMF_PATH/init.fish
</code></pre><h2 id="navigate-with-z">Navigate with z</h2>
<p>If you don&rsquo;t know <a href="https://github.com/rupa/z">z</a>, try it out immediately, it is guaranteed to change your life.
It will allow you to navigate to the most frequent directories with fuzzy commands.</p>
<p>For instance, issuing <code>z fun</code> would bring me to <code>/Users/geowarin/.configfish/functions</code> since it is a directory I often
visit.</p>
<p>To install it:</p>
<pre tabindex="0"><code>brew install z
</code></pre><p>This will install z&hellip; For bash.</p>
<p>This is where oh-my-fish comes into play.
Simply install the <code>z</code> plugin with:</p>
<pre tabindex="0"><code>omf install z
</code></pre><h2 id="backward-history-search-with-re-search">Backward history search with re-search</h2>
<p>One of the most useful features of bash is the ability to search a term in your recent history with <code>CTRL + R</code>.
This feature is not enabled by default but somebody wrote a little program called <a href="https://github.com/jbonjean/re-search">re-search</a>.</p>
<p>Follow the instructions to install it.
You will have to <code>git clone</code> it, <code>make</code>, add it to the path, add a function to fish and finally define a keyboard shortcut to
call it.</p>
<p>Those are really interesting steps. To add something to the path, open <code>~/.config/fish/config.fish</code> and use the
<a href="">set function</a>:</p>
<pre tabindex="0"><code>set -gx PATH $PATH ~/bin
</code></pre><p>This will add <code>~/bin</code> to the path, you can put <code>re-search</code> in there.</p>
<p>To add a function, you simply have to add files to <code>~/.config/fish/functions</code>.
The functions contained in the files of this directory will automatically be loaded by fish.</p>
<p>Finally you can see it is very easy to bind a function to a shortcut simply by editing <code>~/.config/fish/functions/fish_user_key_bindings.fish</code></p>
<pre tabindex="0"><code>bind \cr re_search
</code></pre><h2 id="define-your-own-functions">Define your own functions</h2>
<p>The final step to your fish initiation is to define your own functions.
I might not be super fluent with bash but I was able to define my own functions when I had something repetitive to do.</p>
<p>One thing I like is to directly <code>cd</code> into a directory I created.
A simple solution with bash is to define a function that will do something like this:</p>
<pre tabindex="0"><code>function mkd() {
	mkdir -p &#34;$@&#34; &amp;&amp; cd &#34;$@&#34;
}
</code></pre><p>With fish, simply create a file in <code>~/.config/fish/functions</code> and write:</p>
<pre tabindex="0"><code>function mkd
	mkdir -p $argv; and cd $argv
end
</code></pre><p>You can see that fish syntax is actually pretty simple.</p>
<p>Another thing I like is to define a variable linking to a binary before invoking it, like this:</p>
<pre tabindex="0"><code>function office
	set -l office /Applications/LibreOffice.app/Contents/MacOS/soffice
	eval $office --headless --convert-to $argv[1] --outdir (pwd) $argv[2]
end
</code></pre><p>This will allow you to invoke Libre Office in command line to convert a file from one format to another:</p>
<pre tabindex="0"><code>office docx myDoc.odt
</code></pre><p>A last one, invoke a web server in the current directory and open it in the browser:</p>
<pre tabindex="0"><code>function server
	python -m SimpleHTTPServer&amp;
	sleep 1
	open http://localhost:8000
end
</code></pre><h2 id="working-around-posix-limitation-with-bash--c">Working around POSIX limitation with bash -c</h2>
<p>In simple cases, you can get pretty far by calling bash scripts with
<code>bash -c</code>.</p>
<p>A tool I love is <a href="http://sdkman.io/">sdkman</a>, which will manage JVM-based binaries
like groovy or gradle.</p>
<p>Just add the following function in fish:</p>
<pre tabindex="0"><code>function sdk
  bash -c &#39;. ~/.sdkman/bin/sdkman-init.sh; sdk &#34;$@&#34;&#39; sdk $argv
end
</code></pre><p>I also wanted the current versions of the binaries managed by skdman to be in my
path so I added the following to my <code>config.fish</code>:</p>
<pre tabindex="0"><code># sdkman
set PATH $PATH (find ~/.sdkman/*/current/bin -maxdepth 0)
</code></pre><h2 id="working-around-posix-limitation-with-bass">Working around POSIX limitation with bass</h2>
<p>In most cases, you will find good plugins compatible with oh-my-fish.
If it is not the case, I have found <a href="https://github.com/edc/bass">bass</a> to be
incredibly useful.</p>
<p>It is a simple python wrapper that will call scripts in bash and pass in and out
environment variables.</p>
<p>Simply git clone the project and use <code>make</code> to install it.</p>
<p>I have used it successfully to make <a href="https://github.com/creationix/nvm">nvm</a>
compatible with fish.</p>
<p>For nvm, I added the following function:</p>
<pre tabindex="0"><code>function nvm
  bass source (brew --prefix nvm)/nvm.sh &#39;;&#39; nvm $argv
end
</code></pre><p>Here you go! I hope this will help you get started with fish.</p>
]]></content:encoded></item><item><title>Understanding Spring Boot</title><link>https://geowarin.com/understanding-spring-boot/</link><pubDate>Fri, 06 Mar 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/understanding-spring-boot/</guid><description>Wonder how spring boot&amp;rsquo;s magic operates behind the scenes? You&amp;rsquo;ve come to the right place!</description><content:encoded><![CDATA[<p>Spring boot is an opinionated library that allows to create executable Spring applications with a convention over configuration approach.</p>
<p>The magic behind this framework lies in the <code>@EnableAutoConfiguration</code> annotation,
which will automatically load all the beans the application requires depending
on what Spring Boot finds in the classpath.</p>
<h2 id="the-enable-annotations">The <code>@Enable*</code> annotations</h2>
<p>The <code>@Enable...</code> annotations are not new, they were first introduced in Spring 3 when the idea of replacing the XML files with java annotated classes is born.</p>
<p>A lot of Spring users already know <code>@EnableTransactionManagement</code>, which will enable declarative transaction management,
<code>@EnableWebMvc</code>, which enables Spring MVC, or <code>@EnableScheduling</code>, which will initialize a scheduler.</p>
<p>These annotations are in fact a simple configuration import with the <code>@Import</code> annotation.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Target</span>(ElementType.<span style="color:#57c7ff">TYPE</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Retention</span>(RetentionPolicy.<span style="color:#57c7ff">RUNTIME</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Documented</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Import</span>({ EnableAutoConfigurationImportSelector.<span style="color:#57c7ff">class</span>,
</span></span><span style="display:flex;"><span>        AutoConfigurationPackages.<span style="color:#57c7ff">Registrar</span>.<span style="color:#57c7ff">class</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff9f43">@interface</span> EnableAutoConfiguration {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * Exclude specific auto-configuration classes such that they will never be applied.
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     */</span>
</span></span><span style="display:flex;"><span>    Class<span style="color:#ff6ac1">&lt;?&gt;[]</span> exclude() <span style="color:#ff6ac1">default</span> {};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>EnableAutoConfigurationImportSelector</code> uses <code>SpringFactoriesLoader#loadFactoryNames</code> of Spring core.
SpringFactoriesLoader will look for jars containing a file with the path <code>META-INF/spring.factories</code>.</p>
<p>When it finds such a file, the <code>SpringFactoriesLoader</code> will look for the property named after our configuration file.
In our case, <code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>.</p>
<p>Let&rsquo;s take a look at the <code>spring-boot-autoconfigure</code> jar, which indeed contains a <code>spring.factories</code> file copied below:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-properties" data-lang="properties"><span style="display:flex;"><span><span style="color:#78787e"># Initializers</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">org.springframework.context.ApplicationContextInitializer</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># Auto Configure</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.data.JpaRepositoriesAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.data.MongoRepositoriesAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.jms.JmsTemplateAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.mongo.MongoTemplateAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration</span>
</span></span></code></pre></div><p>In this file, we can see a list of the Spring Boot auto-configurations.
Let&rsquo;s take a closer look at one of those configurations, <code>MongoAutoConfiguration</code> for instance:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ConditionalOnClass</span>(Mongo.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableConfigurationProperties</span>(MongoProperties.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MongoAutoConfiguration</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> MongoProperties properties;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> Mongo mongo;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@PreDestroy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">close</span>() <span style="color:#ff5c57">throws</span> UnknownHostException {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">if</span> (<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mongo</span> <span style="color:#ff6ac1">!=</span> <span style="color:#ff6ac1">null</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mongo</span>.<span style="color:#57c7ff">close</span>();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@ConditionalOnMissingBean</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> Mongo <span style="color:#57c7ff">mongo</span>() <span style="color:#ff5c57">throws</span> UnknownHostException {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mongo</span> <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">properties</span>.<span style="color:#57c7ff">createMongoClient</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mongo</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This simple Spring configuration class declares typical beans needed to use mongoDb.</p>
<p>This classes, like a lot of others in Spring Boot relies heavily on Spring annotations:</p>
<ul>
<li><code>@ConditionOnClass</code> activates a configuration only if one or several classes are present on the classpath</li>
<li><code>@EnableConfigurationProperties</code> automatically maps a POJO to a set of properties in the Spring Boot configuration file
(by default <code>application.properties</code>)</li>
<li><code>@ConditionalOnMissingBean</code> enables a bean definition only if the bean wasn&rsquo;t previously defined</li>
</ul>
<p>You can also refine the order in which those configuration classes load with <code>@AutoConfigureBefore</code> et <code>@AutoConfigureAfter</code>.</p>
<h2 id="properties-mapping">Properties Mapping</h2>
<p>Let&rsquo;s look at <code>MongoProperties</code>, which is a classic example of Spring Boot properties mapping:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@ConfigurationProperties</span>(prefix <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;spring.data.mongodb&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MongoProperties</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> String host;
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#9aedfe">int</span> port <span style="color:#ff6ac1">=</span> DBPort.<span style="color:#57c7ff">PORT</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> String uri <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;mongodb://localhost/test&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> String database;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">// ... getters/ setters omitted</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>@ConfigurationProperties</code> will associate every properties with a particular prefix to the POJO.
For instance, the property <code>spring.data.mongodb.port</code> will be mapped to the port attribute of this class.</p>
<p>If you&rsquo;re a Spring Boot user, I strongly encourage you to use those capabilities to remove the boiler plate code
associated with configuration properties.</p>
<h2 id="the-conditional-annotations">The <code>@Conditional</code> annotations</h2>
<p>The power of Spring Boot lies in one of Spring 4 new features: the <code>@Conditional</code> annotations,
which will enable some configuration only if a specific condition is met.</p>
<p>A sneak peek in the <code>org.springframework.boot.autoconfigure.condition</code> package in Spring Boot will give us an overview of what
we can do with those annotations:</p>
<ul>
<li><code>@ConditionalOnBean</code></li>
<li><code>@ConditionalOnClass</code></li>
<li><code>@ConditionalOnExpression</code></li>
<li><code>@ConditionalOnMissingBean</code></li>
<li><code>@ConditionalOnMissingClass</code></li>
<li><code>@ConditionalOnNotWebApplication</code></li>
<li><code>@ConditionalOnResource</code></li>
<li><code>@ConditionalOnWebApplication</code></li>
</ul>
<p>Let&rsquo;s take a closer look at <code>@ConditionalOnExpression</code>, which allows you to write a condition in the <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html">Spring Expression language</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Conditional</span>(OnExpressionCondition.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Retention</span>(RetentionPolicy.<span style="color:#57c7ff">RUNTIME</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Target</span>({ ElementType.<span style="color:#57c7ff">TYPE</span>, ElementType.<span style="color:#57c7ff">METHOD</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff9f43">@interface</span> ConditionalOnExpression {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * The SpEL expression to evaluate. Expression should return {@code true} if the
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * condition passes or {@code false} if it fails.
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     */</span>
</span></span><span style="display:flex;"><span>    String <span style="color:#57c7ff">value</span>() <span style="color:#ff6ac1">default</span> <span style="color:#5af78e">&#34;true&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this class, we indeed make use of the <code>@Conditional</code> annotation. The condition is defined in the <code>OnExpressionCondition</code> class:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">OnExpressionCondition</span> <span style="color:#ff5c57">extends</span> SpringBootCondition {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> ConditionOutcome <span style="color:#57c7ff">getMatchOutcome</span>(ConditionContext context, AnnotatedTypeMetadata metadata) {
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// ...</span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// we first get a handle on the EL context via the ConditionContext</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#9aedfe">boolean</span> result <span style="color:#ff6ac1">=</span> (Boolean) resolver.<span style="color:#57c7ff">evaluate</span>(expression, expressionContext);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// ...</span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// here we create a message the user will see when debugging</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> ConditionOutcome(result, message.<span style="color:#57c7ff">toString</span>());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the end, the <code>@Conditional</code> are resolved to simple booleans, via the <code>ConditionOutcome.isMatch</code> method.</p>
<h2 id="the-applicationcontextinitializers">The <code>ApplicationContextInitializer</code>s</h2>
<p>The second possibility that the <code>spring.factories</code> file offers, is to define application initializers.
They allow us to manipulate Spring&rsquo;s <code>applicationContext</code> before the application is loaded.</p>
<p>In particular, they can create listeners on the context thanks to the <code>ConfigurableApplicationContext#addApplicationListener</code>
method.</p>
<p>Spring Boot does that in the <code>AutoConfigurationReportLoggingInitializer</code> which listens to system events, like context refresh or the application&rsquo;s failure to start.
This will help create the auto-configuration report when you start your application
in debug mode.</p>
<p>You can start your application in debug mode with either the <code>-Ddebug</code> flag or add the property <code>debug=true</code> to <code>application.properties</code>.</p>
<h2 id="debug-spring-boot-auto-configuration">Debug Spring Boot Auto-Configuration</h2>
<p>The documentation gives us <a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-troubleshoot-auto-configuration">some advice</a> to
understand what happened during the auto-configuration.</p>
<p>When launched in debug mode, Spring Boot will generate a report that looks like this one:</p>
<pre tabindex="0"><code>Positive matches:
-----------------

   MessageSourceAutoConfiguration
      - @ConditionalOnMissingBean (types: org.springframework.context.MessageSource; SearchStrategy: all) found no beans (OnBeanCondition)

   JmxAutoConfiguration
      - @ConditionalOnClass classes found: org.springframework.jmx.export.MBeanExporter (OnClassCondition)
      - SpEL expression on org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration: ${spring.jmx.enabled:true} (OnExpressionCondition)
      - @ConditionalOnMissingBean (types: org.springframework.jmx.export.MBeanExporter; SearchStrategy: all) found no beans (OnBeanCondition)

   DispatcherServletAutoConfiguration
      - found web application StandardServletEnvironment (OnWebApplicationCondition)
      - @ConditionalOnClass classes found: org.springframework.web.servlet.DispatcherServlet (OnClassCondition)


Negative matches:
-----------------

   DataSourceAutoConfiguration
      - required @ConditionalOnClass classes not found: org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType (OnClassCondition)

   DataSourceTransactionManagerAutoConfiguration
      - required @ConditionalOnClass classes not found: org.springframework.jdbc.core.JdbcTemplate,org.springframework.transaction.PlatformTransactionManager (OnClassCondition)

   MongoAutoConfiguration
      - required @ConditionalOnClass classes not found: com.mongodb.Mongo (OnClassCondition)

   FallbackWebSecurityAutoConfiguration
      - SpEL expression on org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration: !${security.basic.enabled:true} (OnExpressionCondition)

   SecurityAutoConfiguration
      - required @ConditionalOnClass classes not found: org.springframework.security.authentication.AuthenticationManager (OnClassCondition)

   EmbeddedServletContainerAutoConfiguration.EmbeddedJetty
      - required @ConditionalOnClass classes not found: org.eclipse.jetty.server.Server,org.eclipse.jetty.util.Loader (OnClassCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#localeResolver
      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.LocaleResolver; SearchStrategy: all) found no beans (OnBeanCondition)
      - SpEL expression: &#39;${spring.mvc.locale:}&#39; != &#39;&#39; (OnExpressionCondition)

   WebSocketAutoConfiguration
      - required @ConditionalOnClass classes not found: org.springframework.web.socket.WebSocketHandler,org.apache.tomcat.websocket.server.WsSci (OnClassCondition)
</code></pre><p>For each auto-configuration, we can see why it was initiated or why it failed.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Spring Boot&rsquo;s approach leverages the possibilities of Spring 4 and allows to create an auto-configured
<a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-first-application-executable-jar">executable jar</a>.</p>
<p>Don&rsquo;t forget that, as <a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-replacing-auto-configuration">the documentation states</a>, you can gradually replace the auto-configuration by declaring your own beans.</p>
<p>What I love about Spring Boot is that it allows you to prototype an application very quickly but also to learn with its
source. Auto-configurations are neat pieces of code that can teach you a thing or two about Spring.</p>
<p>As Josh Long, developer advocate at Pivotal, said:</p>
<!-- raw HTML omitted -->
]]></content:encoded></item><item><title>Review of Learning Spring Boot</title><link>https://geowarin.com/review-of-learning-spring-boot/</link><pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/review-of-learning-spring-boot/</guid><description>Review of the book Learning Spring Boot by Greg L. Turnquist</description><content:encoded><![CDATA[<p>Today, I&rsquo;ll be reviewing the first book ever written on Spring Boot, <a href="https://www.packtpub.com/application-development/learning-spring-boot">Learning Spring Boot</a>, by Greg L. Turnquist.
Packt Publishing, the editor, contacted me to review it during its writing but I&rsquo;ll remain as unbiased as possible.</p>
<p>It&rsquo;s a good book, well worth reading if you want to learn how spring boot works but more globally, it will
give you good insights and tips on the capabilities of Spring and its integration with other technologies.</p>
<h2 id="summary">Summary</h2>
<p>The book has five chapters:</p>
<ol>
<li>Quick Start with Groovy</li>
<li>Quick Start with java</li>
<li>Debugging and Managing Your App</li>
<li>Data Access with Spring boot</li>
<li>Securing your App with Spring Boot</li>
</ol>
<p>Each chapter is one big tutorial that you can follow along by coding. I guess you will be better off with the e-book version
for copy-paste even if the entire code is <a href="https://github.com/learning-spring-boot/learning-spring-boot-code">available on github</a>.</p>
<p>It will be a better experience for mac users, as the author gives some instructions on how to install the dependencies (like Active MQ)
with brew. I guess you can achieve the same results with a small effort on other platforms as well.</p>
<h2 id="the-topics">The topics</h2>
<h3 id="quick-start-with-groovy">Quick Start with Groovy</h3>
<p>In the first chapter you will get started fast, using <a href="http://docs.spring.io/spring-boot/docs/current/reference/html/cli-using-the-cli.html">Spring Boot&rsquo;s CLI</a> and groovy.
I dig groovy so it&rsquo;s a nice start.</p>
<p>You will get some basic notions of testing with <a href="https://code.google.com/p/spock/">spock</a>, manage javascript dependencies
with WebJars and bower and learn how to use <a href="http://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-remote-shell.html">CRaSH</a> to consult and monitor
your app through a remote shell which is amazing.</p>
<h3 id="quick-start-with-java">Quick Start with java</h3>
<p>In this chapter, you will build a classic java application with Spring Boot.
But you&rsquo;ll also use the <a href="https://github.com/spring-projects/spring-social-github">Spring Social Github</a>, consume its API and leverage <a href="http://projects.spring.io/spring-mobile/">Spring Mobile</a> and jQuery mobile to
develop a simple application working on mobile devices.</p>
<h3 id="debugging-and-managing-your-app">Debugging and Managing Your App</h3>
<p>This chapter is about <a href="http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-messaging.html">JMS integration</a> with either an in memory broker or with ActiveMQ.
You will also add health checks, custom CRaSH commands and connect to your app with JMX to monitor your queue.</p>
<h3 id="data-access-with-spring-boot">Data Access with Spring Boot</h3>
<p>In this chapter, you will use Spring Data and <a href="http://projects.spring.io/spring-data-rest/">Spring Data Rest</a> with either H2 and MySQL or Mongo
and produce a RESTful, discoverable json API.
You will use profiles to use different configuration in development and in production.</p>
<h3 id="securing-your-app-with-spring-boot">Securing Your App with Spring Boot</h3>
<p>In this chapter you will get dig into <a href="http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-security.html">Spring Security</a>
with basic http auth, in memory authentication and create a real in database security model.
You will also learn how to configure your Tomcat to be more secure <a href="http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-configure-ssl">using SSL</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Whatever are your current skills with Spring, you will undoubtedly learn some new things reading the book.
I did and I enjoyed the experience. The topics addressed by Greg L. Turnquist are diverse and interesting
and the book is easy to follow.</p>
<p>If you work with Spring often, you have to understand how Spring Boot works.
It&rsquo;s an amazing tool for fast prototyping and a wonderful way to dig deeper into the framework by small increments.</p>
]]></content:encoded></item><item><title>Writing a book on Spring MVC 4</title><link>https://geowarin.com/book/writing-a-book-on-spring-mvc-4.html</link><pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/book/writing-a-book-on-spring-mvc-4.html</guid><description>I&amp;#39;m writing a book on Spring MVC 4 called &amp;#39;Mastering Spring MVC 4&amp;#39; for Packt Publishing</description><content:encoded><![CDATA[<p>Good news everyone!</p>
<p>After reviewing the awesome <a href="https://www.packtpub.com/application-development/learning-spring-boot">Learning Spring Boot</a> by <a href="https://twitter.com/gregturn">Greg Lee Turnquist</a>,
Packt Publishing asked me to write a book of my own on Spring MVC 4.</p>
<p>Of course I said! I just signed the contract and I&rsquo;m getting ready for five months of intense writing with a publishing date somewhere around
the last quarter of 2015.</p>
<p>I&rsquo;m glad to seize this opportunity to answer the questions you guys have been asking me after the publication of
[my article on spring MVC]({% post_url 2013-01-23-complete-example-of-a-spring-mvc-3-2-project %}) last year.</p>
<p>Here is a peek of the topics I will cover in the book:</p>
<p><strong>Master Spring MVC 4</strong></p>
<ol>
<li>Setting up a Spring web application in no time</li>
<li>Mastering the MVC Architecture</li>
<li>Handling forms and complex URL mapping</li>
<li>Crafting a RESTful application</li>
<li>Leaving nothing to luck: Unit tests and Acceptance Tests</li>
<li>Securing your application</li>
<li>Optimizing your requests</li>
<li>Deploying to the cloud</li>
<li>Beyond Spring Web</li>
</ol>
<p>I hope that you like the outline and that the book will help you achieve ultimate mastery of Spring MVC!</p>
<p>I created a section on the blog where you can <a href="/mastering-spring-mvc4.html">follow my progress</a>.</p>
]]></content:encoded></item><item><title>A simple Spring Boot and Jersey Application</title><link>https://geowarin.com/a-simple-spring-boot-and-jersey-application/</link><pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate><guid>https://geowarin.com/a-simple-spring-boot-and-jersey-application/</guid><description>How to setup a simple spring-boot and jersey application</description><content:encoded><![CDATA[<p>Spring boot RC1 <a href="https://spring.io/blog/2014/01/22/spring-boot-1-0-0-rc1-released">is available</a>.</p>
<p><em>Update</em> : <a href="https://spring.io/blog/2014/02/12/spring-boot-1-0-0-rc2-released">RC3 released</a> I updated the project.</p>
<p>It takes spring development and fast prototyping to a whole new level by taking care of all the dependencies for you, auto-detecting your configuration, providing an executable jar (great for deploying in the cloud), and much more.</p>
<p>In this post we&rsquo;ll see how to integrate spring-boot with jersey, including testing of Jersey controllers with <a href="https://jersey.java.net/documentation/latest/test-framework.html">jersey-test</a>.</p>
<p>Of course, the source code is available <a href="https://github.com/geowarin/springboot-jersey">on my github</a>.</p>
<h2 id="setting-up-spring-boot">Setting up spring-boot</h2>
<p><a href="http://projects.spring.io/spring-boot/">Spring boot</a> aims towards simplicity and convention over configuration. First step is to include the necessary configuration in your pom.xml :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;parent&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;artifactId&gt;</span>spring-boot-starter-parent<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;version&gt;</span>1.0.0.RC3<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/parent&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;dependencies&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;artifactId&gt;</span>spring-boot-starter-web<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/dependencies&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;repositories&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;repository&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;id&gt;</span>spring-milestones<span style="color:#ff6ac1">&lt;/id&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;name&gt;</span>Spring Milestones<span style="color:#ff6ac1">&lt;/name&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;url&gt;</span>http://repo.spring.io/milestone<span style="color:#ff6ac1">&lt;/url&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;snapshots&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;enabled&gt;</span>false<span style="color:#ff6ac1">&lt;/enabled&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;/snapshots&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/repository&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/repositories&gt;</span>
</span></span></code></pre></div><p>One of the good ideas of spring boot is to provide all the &lsquo;boilerplate&rsquo; configuration for you by letting you inherit their parent configuration.</p>
<p>Then, you&rsquo;ll select a starter, in this case, we are going to develop a web application, so starter-web is fine.</p>
<p>Now, we&rsquo;ll create a main function for our application :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@EnableAutoConfiguration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">Application</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">main</span>(String<span style="color:#ff6ac1">[]</span> args) <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">new</span> SpringApplicationBuilder(Application.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">showBanner</span>(<span style="color:#ff6ac1">false</span>)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">run</span>(args);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We will just add an index.html file in the webapp directory and we should be ok.
With this configuration, you can run the main function and you&rsquo;ll see your index file.</p>
<p>Awesome.</p>
<h2 id="runnable-jar">Runnable jar</h2>
<p>Spring boot allows you to package your application as a runnable jar. Include the following in your <code>pom.xml</code> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;build&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;plugins&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;plugin&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;/plugin&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/plugins&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/build&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;pluginRepositories&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;pluginRepository&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;id&gt;</span>spring-milestones<span style="color:#ff6ac1">&lt;/id&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;url&gt;</span>http://repo.spring.io/milestone<span style="color:#ff6ac1">&lt;/url&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/pluginRepository&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/pluginRepositories&gt;</span>
</span></span></code></pre></div><p>With this, when running <code>mvn package</code>, you will generate the runnable jar.
Just <code>java -jar</code> it to launch an embedded Tomcat containing your webapp!</p>
<h2 id="integrating-jersey">Integrating jersey</h2>
<p>Jersey has a spring support project <a href="https://jersey.java.net/documentation/latest/spring.html">jersey-spring-3</a>. Despite what its name suggests, the project is (still?) compatible with spring 4.0 so we&rsquo;ll use it.</p>
<p>It basically allows you to inject spring beans in your jersey controllers.</p>
<p>To complete our configuration we&rsquo;ll add the jersey servlet to our application together with a small class to configure it.</p>
<p>In the Application :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> ServletRegistrationBean <span style="color:#57c7ff">jerseyServlet</span>() {
</span></span><span style="display:flex;"><span>    ServletRegistrationBean registration <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ServletRegistrationBean(<span style="color:#ff6ac1">new</span> ServletContainer(), <span style="color:#5af78e">&#34;/rest/*&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">// our rest resources will be available in the path /rest/*</span>
</span></span><span style="display:flex;"><span>    registration.<span style="color:#57c7ff">addInitParameter</span>(ServletProperties.<span style="color:#57c7ff">JAXRS_APPLICATION_CLASS</span>, JerseyConfig.<span style="color:#57c7ff">class</span>.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> registration;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We also need to add the <code>@ComponentScan</code> annotation to find our spring services and components (including jersey)</p>
<p>Next, we&rsquo;ll create the JerseyConfig class :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">JerseyConfig</span> <span style="color:#ff5c57">extends</span> ResourceConfig {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">JerseyConfig</span>() {
</span></span><span style="display:flex;"><span>        register(RequestContextFilter.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>        packages(<span style="color:#5af78e">&#34;com.geowarin.rest&#34;</span>);
</span></span><span style="display:flex;"><span>        register(LoggingFilter.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here we are providing the package(s) in which our rest resources are.</p>
<p>Speaking about our rest resources, we&rsquo;ll create a simple one :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Path</span>(<span style="color:#5af78e">&#34;/&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RestResource</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@GET</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Produces</span>(MediaType.<span style="color:#57c7ff">APPLICATION_JSON</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Path</span>(<span style="color:#5af78e">&#34;/hello&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">hello</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;Hello World&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There you have it : the dreadful hello world !</p>
<p>In the <a href="https://github.com/geowarin/springboot-jersey">complete example</a>, I show you how to generate JSON from a domain class.</p>
<p>Basically all you have to do is provide classes with the <code>@XmlRootElement</code> annotation, add the getters and setters for the properties you want serialized and don&rsquo;t forget to provide a default constructor (see <a href="https://github.com/geowarin/springboot-jersey/blob/master/src/main/java/com/geowarin/domain/Message.java">here</a>).</p>
<p>To show that dependency injection works, we&rsquo;ll add a simple service :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Singleton</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MessageService</span> {
</span></span><span style="display:flex;"><span>    List<span style="color:#ff6ac1">&lt;</span>Message<span style="color:#ff6ac1">&gt;</span> messages <span style="color:#ff6ac1">=</span> Collections.<span style="color:#57c7ff">synchronizedList</span>(<span style="color:#ff6ac1">new</span> ArrayList<span style="color:#ff6ac1">&lt;</span>Message<span style="color:#ff6ac1">&gt;</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@PostConstruct</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">init</span>() {
</span></span><span style="display:flex;"><span>        messages.<span style="color:#57c7ff">add</span>(<span style="color:#ff6ac1">new</span> Message(<span style="color:#5af78e">&#34;Joe&#34;</span>, <span style="color:#5af78e">&#34;Hello&#34;</span>));
</span></span><span style="display:flex;"><span>        messages.<span style="color:#57c7ff">add</span>(<span style="color:#ff6ac1">new</span> Message(<span style="color:#5af78e">&#34;Jane&#34;</span>, <span style="color:#5af78e">&#34;Spring boot is cool !&#34;</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> List<span style="color:#ff6ac1">&lt;</span>Message<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">getMessages</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> messages;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can now autowire it to our Jersey controller!</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Path</span>(<span style="color:#5af78e">&#34;/&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RestResource</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> MessageService messageService;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@GET</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Produces</span>(MediaType.<span style="color:#57c7ff">APPLICATION_JSON</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Path</span>(<span style="color:#5af78e">&#34;/messages&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> List<span style="color:#ff6ac1">&lt;</span>Message<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">message</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> messageService.<span style="color:#57c7ff">getMessages</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><a href="http://www.eclipse.org/eclipselink/moxy.php">Moxy</a> will automatically convert
the returned result to JSON.</p>
<h2 id="testing">Testing</h2>
<p>Real programmers do tests. We want to test our controller right? There is a framework for that: <a href="https://jersey.java.net/documentation/latest/test-framework.html">jersey-test</a>.</p>
<p><em>The Problem?</em> it does not (yet) support annotated configuration.</p>
<!-- raw HTML omitted -->
<p><em>Update</em> : I submitted a <a href="https://github.com/jersey/jersey/pull/59">pull request</a> which has been accepted by Jersey. I updated the project to use the 2.6 snapshot release of jersey which includes the modified <code>SpringComponentProvider</code>.</p>
<p>Now the test :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RestResourceTest</span> <span style="color:#ff5c57">extends</span> JerseyTest {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> Application <span style="color:#57c7ff">configure</span>() {
</span></span><span style="display:flex;"><span>        ApplicationContext context <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> AnnotationConfigApplicationContext(TestConfig.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> JerseyConfig()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">property</span>(<span style="color:#5af78e">&#34;contextConfig&#34;</span>, context);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testHello</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">final</span> String hello <span style="color:#ff6ac1">=</span> target(<span style="color:#5af78e">&#34;hello&#34;</span>).<span style="color:#57c7ff">request</span>().<span style="color:#57c7ff">get</span>(String.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>        assertThat(hello).<span style="color:#57c7ff">isEqualTo</span>(<span style="color:#5af78e">&#34;Hello World&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testMessages</span>() <span style="color:#ff5c57">throws</span> JSONException {
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">final</span> String messages <span style="color:#ff6ac1">=</span> target(<span style="color:#5af78e">&#34;messages&#34;</span>).<span style="color:#57c7ff">request</span>().<span style="color:#57c7ff">get</span>(String.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>        String expected <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;[ &#34;</span> <span style="color:#ff6ac1">+</span>
</span></span><span style="display:flex;"><span>                <span style="color:#5af78e">&#34;{ &#39;author&#39;: &#39;Joe&#39;, &#39;contents&#39;: &#39;Hello&#39;},&#34;</span> <span style="color:#ff6ac1">+</span>
</span></span><span style="display:flex;"><span>                <span style="color:#5af78e">&#34;{ &#39;author&#39;: &#39;Jane&#39;, &#39;contents&#39;: &#39;Spring boot is cool !&#39;}&#34;</span> <span style="color:#ff6ac1">+</span>
</span></span><span style="display:flex;"><span>                <span style="color:#5af78e">&#34;]&#34;</span>;
</span></span><span style="display:flex;"><span>        JSONAssert.<span style="color:#57c7ff">assertEquals</span>(expected, messages, JSONCompareMode.<span style="color:#57c7ff">LENIENT</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Jersey Test will automatically select a provider from your classpath, in the example I&rsquo;m using the in memory provider which I believe to be the fastest but you can also use <a href="https://grizzly.java.net/">grizzly</a> and others instead.</p>
<p>I&rsquo;m using <a href="https://github.com/skyscreamer/JSONassert">JSONassert</a> to test json results.</p>
<p>In the example, we are providing a simple, lighter <code>TestConfig</code> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ComponentScan</span>(basePackageClasses <span style="color:#ff6ac1">=</span> RestResource.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">TestConfig</span> {
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Testing with Jersey Test is fast and intuitive.</p>
<p>Spring boot is a nice addition to the spring ecosystem. Now that everything should be accessible from the cloud, so should be spring webapps !</p>
]]></content:encoded></item><item><title>Fun with xpath</title><link>https://geowarin.com/fun-with-xpath/</link><pubDate>Thu, 30 Jan 2014 00:00:00 +0000</pubDate><guid>https://geowarin.com/fun-with-xpath/</guid><description>How to select nodes with xPath and keep the file structure of the original document in java with dom4j</description><content:encoded><![CDATA[<p>I had fun today at work when I had to design a program that allows users to select nodes with xPath but keep the same hierarchical structure as the original xml file.</p>
<p>The result with tests is available <a href="https://github.com/geowarin/xpath-dom4j">on github</a>.</p>
<p>For instance, the following xPath <code>/persons/person[@age &gt; 18]/project[@language = 'java']</code>, would select the lines highlighted in the file below :</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>Normal xPath result would be a list of nodes like that</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;project</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#39;dom4j&#39;</span> <span style="color:#57c7ff">language=</span><span style="color:#5af78e">&#39;java&#39;</span><span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;project</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#39;dom4j&#39;</span> <span style="color:#57c7ff">language=</span><span style="color:#5af78e">&#39;java&#39;</span><span style="color:#ff6ac1">/&gt;</span>
</span></span></code></pre></div><p>But the desired output should look like this :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;persons&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;person</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#39;Joe&#39;</span> <span style="color:#57c7ff">age=</span><span style="color:#5af78e">&#39;26&#39;</span><span style="color:#ff6ac1">&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">&lt;project</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#39;dom4j&#39;</span> <span style="color:#57c7ff">language=</span><span style="color:#5af78e">&#39;java&#39;</span><span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;/person&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;person</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#39;Jane&#39;</span> <span style="color:#57c7ff">age=</span><span style="color:#5af78e">&#39;23&#39;</span><span style="color:#ff6ac1">&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">&lt;project</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#39;dom4j&#39;</span> <span style="color:#57c7ff">language=</span><span style="color:#5af78e">&#39;java&#39;</span><span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;/person&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/persons&gt;</span>
</span></span></code></pre></div><p>So I decided to write a small class to handle this use case :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">XPathFilter</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> Document xmlDocument;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">XPathFilter</span>(String xml) {
</span></span><span style="display:flex;"><span>        xmlDocument <span style="color:#ff6ac1">=</span> readXml(xml);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">filter</span>(String xPath) {
</span></span><span style="display:flex;"><span>        Element root <span style="color:#ff6ac1">=</span> xmlDocument.<span style="color:#57c7ff">getRootElement</span>();
</span></span><span style="display:flex;"><span>        List<span style="color:#ff6ac1">&lt;</span>Element<span style="color:#ff6ac1">&gt;</span> resultNodes <span style="color:#ff6ac1">=</span> root.<span style="color:#57c7ff">selectNodes</span>(xPath);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">if</span> (resultNodes.<span style="color:#57c7ff">isEmpty</span>()) {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">throw</span> <span style="color:#ff6ac1">new</span> IllegalStateException(<span style="color:#5af78e">&#34;No result found for xpath &#34;</span> <span style="color:#ff6ac1">+</span> xPath);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        deleteNonResultNodes(resultNodes);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> write(root);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">deleteNonResultNodes</span>(List<span style="color:#ff6ac1">&lt;</span>Element<span style="color:#ff6ac1">&gt;</span> resultNodes) {
</span></span><span style="display:flex;"><span>        Set<span style="color:#ff6ac1">&lt;</span>Element<span style="color:#ff6ac1">&gt;</span> nodesToKeep <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> HashSet<span style="color:#ff6ac1">&lt;&gt;</span>(resultNodes);
</span></span><span style="display:flex;"><span>        Set<span style="color:#ff6ac1">&lt;</span>Element<span style="color:#ff6ac1">&gt;</span> parents;
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">do</span> {
</span></span><span style="display:flex;"><span>            parents <span style="color:#ff6ac1">=</span> getParentNodes(nodesToKeep);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">for</span> (Element parent : parents) {
</span></span><span style="display:flex;"><span>                List<span style="color:#ff6ac1">&lt;</span>Element<span style="color:#ff6ac1">&gt;</span> children <span style="color:#ff6ac1">=</span> parent.<span style="color:#57c7ff">elements</span>();
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">for</span> (Element child : children) {
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">if</span> (<span style="color:#ff6ac1">!</span>nodesToKeep.<span style="color:#57c7ff">contains</span>(child)) {
</span></span><span style="display:flex;"><span>                        parent.<span style="color:#57c7ff">remove</span>(child);
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            nodesToKeep <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> HashSet<span style="color:#ff6ac1">&lt;&gt;</span>(parents);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">while</span> (<span style="color:#ff6ac1">!</span>parents.<span style="color:#57c7ff">isEmpty</span>());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> Set<span style="color:#ff6ac1">&lt;</span>Element<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">getParentNodes</span>(Collection<span style="color:#ff6ac1">&lt;</span>Element<span style="color:#ff6ac1">&gt;</span> nodes) {
</span></span><span style="display:flex;"><span>        Set<span style="color:#ff6ac1">&lt;</span>Element<span style="color:#ff6ac1">&gt;</span> parents <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> HashSet<span style="color:#ff6ac1">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">for</span> (Element node : nodes) {
</span></span><span style="display:flex;"><span>            Element parent <span style="color:#ff6ac1">=</span> node.<span style="color:#57c7ff">getParent</span>();
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">if</span> (parent <span style="color:#ff6ac1">!=</span> <span style="color:#ff6ac1">null</span>) {
</span></span><span style="display:flex;"><span>                parents.<span style="color:#57c7ff">add</span>(parent);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> parents;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> Document <span style="color:#57c7ff">readXml</span>(String xml) {
</span></span><span style="display:flex;"><span>        Document document;
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">try</span> (StringReader reader <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> StringReader(xml)) {
</span></span><span style="display:flex;"><span>            DocumentFactory factory <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> DocumentFactory();
</span></span><span style="display:flex;"><span>            SAXReader saxReader <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> SAXReader();
</span></span><span style="display:flex;"><span>            saxReader.<span style="color:#57c7ff">setDocumentFactory</span>(factory);
</span></span><span style="display:flex;"><span>            document <span style="color:#ff6ac1">=</span> saxReader.<span style="color:#57c7ff">read</span>(reader);
</span></span><span style="display:flex;"><span>        } <span style="color:#ff6ac1">catch</span> (DocumentException e) {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">throw</span> <span style="color:#ff6ac1">new</span> IllegalArgumentException(e);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> document;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> String <span style="color:#57c7ff">write</span>(Element rootElement) {
</span></span><span style="display:flex;"><span>        Document documentOut <span style="color:#ff6ac1">=</span> DocumentHelper.<span style="color:#57c7ff">createDocument</span>();
</span></span><span style="display:flex;"><span>        documentOut.<span style="color:#57c7ff">add</span>((Element) rootElement.<span style="color:#57c7ff">clone</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        StringWriter writer <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> StringWriter();
</span></span><span style="display:flex;"><span>        XMLWriter xmlWriter <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> XMLWriter(writer, OutputFormat.<span style="color:#57c7ff">createPrettyPrint</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>            xmlWriter.<span style="color:#57c7ff">write</span>(documentOut);
</span></span><span style="display:flex;"><span>        } <span style="color:#ff6ac1">catch</span> (IOException e) {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">throw</span> <span style="color:#ff6ac1">new</span> IllegalStateException(e);
</span></span><span style="display:flex;"><span>        } <span style="color:#ff6ac1">finally</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>                xmlWriter.<span style="color:#57c7ff">close</span>();
</span></span><span style="display:flex;"><span>            } <span style="color:#ff6ac1">catch</span> (IOException ignored) {
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> writer.<span style="color:#57c7ff">toString</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>readXml</code> and <code>write</code> methods are just standard <em>dom4j</em> stuff.</p>
<p>The real code lies in the <code>deleteNonResultNodes</code> function which traverses XML nodes
from the results to the root.
On each level, we will look at the parents of the current nodes (the selected ones at first) and delete every child which is not a result.</p>
<p>The parents will become the current nodes and will keep on until we reach the root.
At this point we would have kept only the xml structure that actually wrap our xPath results.</p>
<p>That&rsquo;s all folks ! Check out the result <a href="https://github.com/geowarin/xpath-dom4j">on github</a>, unit tests included.</p>
]]></content:encoded></item><item><title>Complete example of a Spring MVC 3.2 project</title><link>https://geowarin.com/complete-example-of-a-spring-mvc-3.2-project/</link><pubDate>Wed, 23 Jan 2013 00:00:00 +0000</pubDate><guid>https://geowarin.com/complete-example-of-a-spring-mvc-3.2-project/</guid><description>Awesome spring mvc 3.2 starter with sitemesh, localization, UTF-8, boostrap and spring test mvc</description><content:encoded><![CDATA[<p>You want to get started with Spring MVC 3.2 with a complete XML-less configuration? Have a cool simple project with a lot of the nice-to-have features?</p>
<ol>
<li>A templating framework (we will use <a href="http://wiki.sitemesh.org/display/sitemesh/Home">SiteMesh</a> for this example - I think it is one of the simplest, most powerful frameworks out there)</li>
<li>Localized and custom text and validation messages with reloadable bundles in development</li>
<li>UTF-8 encoding filter for your user inputs</li>
<li>Use the <a href="http://twitter.github.com/bootstrap/">twitter boostrap</a> for a responsive, slick design</li>
<li>Unit tests of your controllers using <a href="https://github.com/SpringSource/spring-test-mvc">spring-test-mvc</a></li>
<li>Be able to run it with embedded tomcat or jetty maven plugins?</li>
</ol>
<p>Then you can directly git clone this project : <a href="https://github.com/geowarin/spring-mvc-examples/tree/master/mvc-base">https://github.com/geowarin/spring-mvc-examples/tree/master/mvc-base</a></p>
<p>This article will explain how this can be done with 5 classes and 1 jsp.</p>
<h2 id="the-configuration-with-spring-32-and-servlet-30">The configuration with spring 3.2 and servlet 3.0</h2>
<p>Since spring 3.1, it is possible to run spring MVC without a web.xml if you are in a servlet 3.0 environment. But spring 3.2 takes things a little bit further by providing a set of abstract classes to enable a <a href="http://static.springsource.org/spring-framework/docs/3.2.0.RELEASE/spring-framework-reference/html/mvc.html#mvc-container-config">very easy configuration</a>. Check this :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">WebInitializer</span> <span style="color:#ff5c57">extends</span> AbstractAnnotationConfigDispatcherServletInitializer {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">protected</span> Class<span style="color:#ff6ac1">&lt;?&gt;[]</span> getRootConfigClasses() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">null</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">protected</span> Class<span style="color:#ff6ac1">&lt;?&gt;[]</span> getServletConfigClasses() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> Class<span style="color:#ff6ac1">&lt;?&gt;[]</span> { WebConfig.<span style="color:#57c7ff">class</span> };
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">protected</span> String<span style="color:#ff6ac1">[]</span> <span style="color:#57c7ff">getServletMappings</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> String<span style="color:#ff6ac1">[]</span> { <span style="color:#5af78e">&#34;/&#34;</span> };
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">protected</span> Filter<span style="color:#ff6ac1">[]</span> <span style="color:#57c7ff">getServletFilters</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		CharacterEncodingFilter characterEncodingFilter <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> CharacterEncodingFilter();
</span></span><span style="display:flex;"><span>		characterEncodingFilter.<span style="color:#57c7ff">setEncoding</span>(<span style="color:#5af78e">&#34;UTF-8&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> Filter<span style="color:#ff6ac1">[]</span> { characterEncodingFilter, <span style="color:#ff6ac1">new</span> SiteMeshFilter()};
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The filters are not mandatory, it just demonstrates how to add them to this configuration (site mesh requires a small xml file to point to a template - it won&rsquo;t be covered by this article but check out the <a href="http://wiki.sitemesh.org/display/sitemesh/Start+Using+SiteMesh+in+10+Minutes">documentation</a> or have a look at this project on <a href="https://github.com/geowarin/spring-mvc-examples/tree/master/mvc-base">github</a>).</p>
<p>The UTF-8 filter will prevent encoding problems with your user inputs.</p>
<p>Spring MVC also requires a <strong>WebConfig</strong> class. This is the minimal one :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableWebMvc</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ComponentScan</span>(basePackages <span style="color:#ff6ac1">=</span> { <span style="color:#5af78e">&#34;com.geowarin.mvc.base.controller&#34;</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">WebConfig</span> <span style="color:#ff5c57">extends</span> WebMvcConfigurerAdapter {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">addResourceHandlers</span>(ResourceHandlerRegistry registry) {
</span></span><span style="display:flex;"><span>		registry.<span style="color:#57c7ff">addResourceHandler</span>(<span style="color:#5af78e">&#34;/resources/**&#34;</span>).<span style="color:#57c7ff">addResourceLocations</span>(<span style="color:#5af78e">&#34;/resources/&#34;</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> ViewResolver <span style="color:#57c7ff">viewResolver</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		InternalResourceViewResolver viewResolver <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> InternalResourceViewResolver();
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setViewClass</span>(JstlView.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setPrefix</span>(<span style="color:#5af78e">&#34;/WEB-INF/views&#34;</span>);
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setSuffix</span>(<span style="color:#5af78e">&#34;.jsp&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> viewResolver;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <strong>@ComponentScan</strong> annotation will indicate the package in which our controllers are found.
The <strong>ViewResolver</strong> bean will indicate both where our views can be found and what their extension is.</p>
<p>In this example for instance we will just have a simple view in <strong>/WEB-INF/views/home.jsp</strong>. The <strong>ResourceHandler</strong> indicates where our static resources can be found (css, js, images, etc.).</p>
<p>Here is our controller :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Controller</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">HomeController</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@RequestMapping</span>(value <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;/&#34;</span>, method <span style="color:#ff6ac1">=</span> RequestMethod.<span style="color:#57c7ff">GET</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">displayHome</span>(Model model) {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;/home&#34;</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>At this point, you can write &ldquo;hello&rdquo; in your home.jsp, launch a tomcat and enjoy our 3 classes spring MVC hello world. No web.xml, nothing else.</p>
<h2 id="interceptors-locales-messages">Interceptors, locales, messages</h2>
<p>Let me just show you the full configuration for our project :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableWebMvc</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ComponentScan</span>(basePackages <span style="color:#ff6ac1">=</span> { <span style="color:#5af78e">&#34;com.geowarin.mvc.base.controller&#34;</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">WebConfig</span> <span style="color:#ff5c57">extends</span> WebMvcConfigurerAdapter {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">addResourceHandlers</span>(ResourceHandlerRegistry registry) {
</span></span><span style="display:flex;"><span>		registry.<span style="color:#57c7ff">addResourceHandler</span>(<span style="color:#5af78e">&#34;/resources/**&#34;</span>).<span style="color:#57c7ff">addResourceLocations</span>(<span style="color:#5af78e">&#34;/resources/&#34;</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">addInterceptors</span>(InterceptorRegistry registry) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		LocaleChangeInterceptor localeChangeInterceptor <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> LocaleChangeInterceptor();
</span></span><span style="display:flex;"><span>		localeChangeInterceptor.<span style="color:#57c7ff">setParamName</span>(<span style="color:#5af78e">&#34;lang&#34;</span>);
</span></span><span style="display:flex;"><span>		registry.<span style="color:#57c7ff">addInterceptor</span>(localeChangeInterceptor);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> LocaleResolver <span style="color:#57c7ff">localeResolver</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		CookieLocaleResolver cookieLocaleResolver <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> CookieLocaleResolver();
</span></span><span style="display:flex;"><span>		cookieLocaleResolver.<span style="color:#57c7ff">setDefaultLocale</span>(StringUtils.<span style="color:#57c7ff">parseLocaleString</span>(<span style="color:#5af78e">&#34;en&#34;</span>));
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> cookieLocaleResolver;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> ViewResolver <span style="color:#57c7ff">viewResolver</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		InternalResourceViewResolver viewResolver <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> InternalResourceViewResolver();
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setViewClass</span>(JstlView.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setPrefix</span>(<span style="color:#5af78e">&#34;/WEB-INF/views&#34;</span>);
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setSuffix</span>(<span style="color:#5af78e">&#34;.jsp&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> viewResolver;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> MessageSource <span style="color:#57c7ff">messageSource</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		ReloadableResourceBundleMessageSource messageSource <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ReloadableResourceBundleMessageSource();
</span></span><span style="display:flex;"><span>		messageSource.<span style="color:#57c7ff">setBasenames</span>(<span style="color:#5af78e">&#34;classpath:messages/messages&#34;</span>, <span style="color:#5af78e">&#34;classpath:messages/validation&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// if true, the key of the message will be displayed if the key is not</span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// found, instead of throwing a NoSuchMessageException</span>
</span></span><span style="display:flex;"><span>		messageSource.<span style="color:#57c7ff">setUseCodeAsDefaultMessage</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>		messageSource.<span style="color:#57c7ff">setDefaultEncoding</span>(<span style="color:#5af78e">&#34;UTF-8&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// # -1 : never reload, 0 always reload</span>
</span></span><span style="display:flex;"><span>		messageSource.<span style="color:#57c7ff">setCacheSeconds</span>(0);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> messageSource;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <strong>localeInterceptor</strong> will provide a way to switch the language in any page just by passing the lang=&lsquo;en&rsquo;, lang=&lsquo;fr&rsquo;, and so on to your url.
The <strong>localeResolver</strong> will work with a simple cookie to memorize the user preference (you don&rsquo;t want to pass the lang argument through your whole site, do you?).</p>
<p>With the messageSource, you will get access to properties bundle usable in your web pages. Here it is configured to be developper friendly (always reload, no error).</p>
<p>These bundled can be localized. You can have as many as you want :</p>
<ul>
<li><strong>messages_en.properties</strong> for english language text</li>
<li><strong>message_fr.properties</strong> for french</li>
<li><strong>message_cn.properties</strong>, etc.</li>
</ul>
<h2 id="a-form-a-dto-some-validation">A form, a DTO, some validation</h2>
<p>Next we will show a very simple usage of a form to demonstrate the localized, custom validation messages.</p>
<p>In your home.jsp, write this code :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#ff6ac1">form:form</span> <span style="color:#57c7ff">id</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;form&#34;</span> <span style="color:#57c7ff">method</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;post&#34;</span> <span style="color:#57c7ff">modelAttribute</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;formDTO&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#ff6ac1">form:input</span> <span style="color:#57c7ff">path</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;messageFromUser&#34;</span> /&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#ff6ac1">form:errors</span> <span style="color:#57c7ff">path</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;messageFromUser&#34;</span> <span style="color:#57c7ff">cssClass</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;errorMessage&#34;</span> <span style="color:#57c7ff">element</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;div&#34;</span> /&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#ff6ac1">c:if</span> <span style="color:#57c7ff">test</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;${not empty message}&#34;</span>&gt;
</span></span><span style="display:flex;"><span>		&lt;<span style="color:#ff6ac1">div</span> <span style="color:#57c7ff">id</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;message&#34;</span> <span style="color:#57c7ff">class</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;alert alert-success&#34;</span>&gt;
</span></span><span style="display:flex;"><span>			&lt;<span style="color:#ff6ac1">spring:message</span> <span style="color:#57c7ff">code</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;message.youWrote&#34;</span> <span style="color:#57c7ff">arguments</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;${message}&#34;</span> <span style="color:#57c7ff">htmlEscape</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;true&#34;</span> /&gt;
</span></span><span style="display:flex;"><span>		&lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>	&lt;/<span style="color:#ff6ac1">c:if</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#ff6ac1">button</span> <span style="color:#57c7ff">type</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;submit&#34;</span> <span style="color:#57c7ff">class</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;btn&#34;</span>&gt;Submit&lt;/<span style="color:#ff6ac1">button</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#ff6ac1">form:form</span>&gt;
</span></span></code></pre></div><p>This will bind your form to a model attribute called <strong>formDTO</strong>, we will see it in the controller shortly. You could also provide an action attribute but we will just map the action to <strong>&quot;/&quot;</strong>, just like our jsp.</p>
<p>Then the input will be bound to the <strong>messageFromUser</strong> attribute of the <strong>formDTO</strong>. You can also see the associated error message if validation fails.</p>
<p>Lastly, if a success message is present in the request (the controller will place it), we will display it with a localized text taking an argument. We also want to escape the text given by the user to prevent XSS injection.</p>
<p>The message bundle for this example would look like this :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-properties" data-lang="properties"><span style="display:flex;"><span><span style="color:#57c7ff">message.youWrote</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">You wrote : {0}</span>
</span></span></code></pre></div><p>Our new controller :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Controller</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">HomeController</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@RequestMapping</span>(value <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;/&#34;</span>, method <span style="color:#ff6ac1">=</span> RequestMethod.<span style="color:#57c7ff">GET</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">displayHome</span>(Model model) {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;/home&#34;</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@ModelAttribute</span>(<span style="color:#5af78e">&#34;formDTO&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> FormDTO <span style="color:#57c7ff">createFormBean</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> FormDTO();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@RequestMapping</span>(value <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;/&#34;</span>, method<span style="color:#ff6ac1">=</span>RequestMethod.<span style="color:#57c7ff">POST</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">submitMessage</span>(<span style="color:#ff9f43">@Valid</span> FormDTO formDTO, BindingResult result,
</span></span><span style="display:flex;"><span>					SessionStatus sessionStatus,
</span></span><span style="display:flex;"><span>					RedirectAttributes redirectAttrs) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">if</span> (result.<span style="color:#57c7ff">hasErrors</span>()) {
</span></span><span style="display:flex;"><span>			<span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;/home&#34;</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		String message <span style="color:#ff6ac1">=</span> formDTO.<span style="color:#57c7ff">toString</span>();
</span></span><span style="display:flex;"><span>		sessionStatus.<span style="color:#57c7ff">setComplete</span>();
</span></span><span style="display:flex;"><span>		redirectAttrs.<span style="color:#57c7ff">addFlashAttribute</span>(<span style="color:#5af78e">&#34;message&#34;</span>, message);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;redirect:/&#34;</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>You can see we expose our <strong>FormDTO</strong> to the Model.
Then we process this action of posting on &ldquo;/&rdquo;. With spring MVC request mapping you can inject whatever is relevant to the context of your page.
Here we will ask Spring MVC to give us the form posted with indication on its correctness as far as validation rules are concerned (we will see that below).</p>
<p>We also want some other small things : access to redirect attributes to display a single time (flash) message, access to the session to dispose our form, etc.</p>
<p>If the user input is correct, we will redirect him (yes with spring MVC you have some <a href="http://en.wikipedia.org/wiki/Post/Redirect/Get">PRG</a> for free) to the home. You can also use the instruction &lsquo;forward:url&rsquo;.</p>
<p>I strongly advise you to check out <a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/mvc.html">the documentation</a> to learn what can be injected in your controllers.</p>
<p>Our <strong>FormDTO</strong> is a simple POJO, annotated with <a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/mvc.html">hibernate-validator</a> annotation :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">FormDTO</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@NotEmpty</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> String messageFromUser;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Getters and setters omitted</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Hibernate validator provides a lot of useful annotations like @Min, @Max, @Email. You can even stack them or create your own rules.</p>
<p>That&rsquo;s it ! To customize validation message, just write properties with the same name as the annotations :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-properties" data-lang="properties"><span style="display:flex;"><span><span style="color:#78787e"># This will override validation messages caused by @NotEmpty annotation</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">NotEmpty</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">This cannot be empty !</span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># This will override @NotEmpty validation messages with a path of messageFromUser</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">NotEmpty.messageFromUser</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">Don&#39;t you have anything to say?</span>
</span></span></code></pre></div><h2 id="wait--how-do-we-test-a-controller">Wait ! How do we test a controller?</h2>
<p>With spring mvc test ! Have a look :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff6ac1">import static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import static</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@RunWith</span>(SpringJUnit4ClassRunner.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@WebAppConfiguration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ContextConfiguration</span>(classes <span style="color:#ff6ac1">=</span> WebConfig.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">HomeControllerTest</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> WebApplicationContext wac;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> MockMvc mockMvc;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Before</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">setup</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mockMvc</span> <span style="color:#ff6ac1">=</span> MockMvcBuilders.<span style="color:#57c7ff">webAppContextSetup</span>(<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">wac</span>).<span style="color:#57c7ff">build</span>();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">getHome</span>() <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mockMvc</span>.<span style="color:#57c7ff">perform</span>(get(<span style="color:#5af78e">&#34;/&#34;</span>))
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andDo</span>(print())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(status().<span style="color:#57c7ff">isOk</span>())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(forwardedUrl(<span style="color:#5af78e">&#34;/WEB-INF/views/home.jsp&#34;</span>));
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">postEmptyData</span>() <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mockMvc</span>.<span style="color:#57c7ff">perform</span>(post(<span style="color:#5af78e">&#34;/&#34;</span>))
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andDo</span>(print())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(status().<span style="color:#57c7ff">isOk</span>())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(model().<span style="color:#57c7ff">attributeHasFieldErrors</span>(<span style="color:#5af78e">&#34;formDTO&#34;</span>, <span style="color:#5af78e">&#34;messageFromUser&#34;</span>))
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(forwardedUrl(<span style="color:#5af78e">&#34;/WEB-INF/views/home.jsp&#34;</span>));
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">postSomething</span>() <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mockMvc</span>.<span style="color:#57c7ff">perform</span>(post(<span style="color:#5af78e">&#34;/&#34;</span>).<span style="color:#57c7ff">param</span>(<span style="color:#5af78e">&#34;messageFromUser&#34;</span>, <span style="color:#5af78e">&#34;hello&#34;</span>))
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andDo</span>(print())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(status().<span style="color:#57c7ff">isMovedTemporarily</span>()) <span style="color:#78787e">// 302 redirect</span>
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(model().<span style="color:#57c7ff">hasNoErrors</span>())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(flash().<span style="color:#57c7ff">attributeExists</span>(<span style="color:#5af78e">&#34;message&#34;</span>))
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(redirectedUrl(<span style="color:#5af78e">&#34;/&#34;</span>));
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I think the code is pretty understandable as it uses a syntax which is very close to natural language.
But it is quite difficult to get it right the first time. You definitely have to check out <a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/htmlsingle/#unit-testing-spring-mvc">the documentation</a>.</p>
<h2 id="tomcat-and-jetty">Tomcat and jetty</h2>
<p>To add them to your pom.xml, check out my <a href="http://geowarin.wordpress.com/2013/01/22/basic-configuration-for-jetty-and-tomcat-maven-plugins/">previous article</a> or download the <a href="https://github.com/geowarin/spring-mvc-examples/tree/master/mvc-base">github project</a> of this article which also provides a very handsome SiteMesh template featuring twitter bootstrap and responsive design.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Since version 3.2, Spring MVC is now very easy to configure and use. Spring mvc test, now integrated in the framework, is a really unique feature in terms of controller unit testing and is really worth a try.</p>
<p>Its action based request mapping &lsquo;a la rest&rsquo; makes it both versatile, easy to integrate with ajax solutions and a very good replacement for the <a href="http://struts.apache.org/">old-timer</a>.</p>
<p>It also provides easy XML, RSS, plain text or JSON publishing and can almost be used as a replacement for a rest framework !</p>
<p>Of course, be sure to check the <a href="https://github.com/SpringSource/spring-mvc-showcase">spring-mvc-showcase</a>, a real goldmine.</p>
]]></content:encoded></item><item><title>Basic configuration for Jetty and tomcat maven plugins</title><link>https://geowarin.com/basic-configuration-for-jetty-and-tomcat-maven-plugins/</link><pubDate>Tue, 22 Jan 2013 04:07:49 +0000</pubDate><guid>https://geowarin.com/basic-configuration-for-jetty-and-tomcat-maven-plugins/</guid><description>Cheatsheet for jetty and tomcat maven plugins</description><content:encoded><![CDATA[<p>This is a quick memento on how to set up <a href="http://tomcat.apache.org/maven-plugin-2.0/">tomcat7-maven-plugin</a> and <a href="http://wiki.eclipse.org/Jetty/Feature/Jetty_Maven_Plugin">jetty-maven plugin</a> (current version is 8).</p>
<p>It is interesting to note both of these servers are servlet 3.0 compatible.</p>
<p>Setting up Jetty :</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>Now your can run <code>mvn jetty:run</code></p>
<p>To set up tomcat-7 plugin, you will have to add either the plugin to the pluginManagement section of your pom (more portable) - see below - or adding the pluginGroup to your settings.xml.</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>Now your can run <code>mvn tomcat7:run</code></p>
<p>pluginGroup :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;pluginGroups&gt;</span>
</span></span><span style="display:flex;"><span>    ....
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;pluginGroup&gt;</span>org.apache.tomcat.maven<span style="color:#ff6ac1">&lt;/pluginGroup&gt;</span>
</span></span><span style="display:flex;"><span>    ....
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/pluginGroups&gt;</span>
</span></span></code></pre></div>]]></content:encoded></item><item><title>Generate DDL with hibernate</title><link>https://geowarin.com/generate-ddl-with-hibernate/</link><pubDate>Mon, 21 Jan 2013 23:44:07 +0000</pubDate><guid>https://geowarin.com/generate-ddl-with-hibernate/</guid><description>How to generate SQL schemas with hibernate built-in classes</description><content:encoded><![CDATA[<p>I don&rsquo;t know if it&rsquo;s a well known feature but there is a bunch of methods on hibernate <a href="http://docs.jboss.org/hibernate/orm/3.5/api/org/hibernate/cfg/Configuration.html">Configuration</a> class which will produce <a href="http://en.wikipedia.org/wiki/Data_definition_language">DDL</a> for your database according to the dialect in use.</p>
<p>In this blog post we will see how to use those methods to generate a DDL script to set up our database and get rid of those annoying DBAs (just kidding, always review these scripts, they&rsquo;re not production ready).</p>
<p>The source code of this article is available on github : <a href="https://github.com/geowarin/hibernate-examples/tree/master/generate-ddl-hibernate">https://github.com/geowarin/hibernate-examples/tree/master/generate-ddl-hibernate</a></p>
<p>So the goal of this article is, given a dialect and a package to scan containing our entities, generate a DDL.</p>
<p>With hibernate in the classpath, you can create a new configuration like this :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>hibernateConfiguration <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Configuration();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>hibernateConfiguration.<span style="color:#57c7ff">addAnnotatedClass</span>(myEntity.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>hibernateConfiguration.<span style="color:#57c7ff">addAnnotatedClass</span>(mySecondEntity.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>hibernateConfiguration.<span style="color:#57c7ff">setProperty</span>(AvailableSettings.<span style="color:#57c7ff">DIALECT</span>, dialect);
</span></span></code></pre></div><p>That&rsquo;s cool but pretty boring.
Cooler is to use the <a href="http://code.google.com/p/reflections/">reflections project</a> to provide some package scanning.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">private</span> Configuration <span style="color:#57c7ff">createHibernateConfig</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	hibernateConfiguration <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Configuration();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">final</span> Reflections reflections <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Reflections(entityPackage);
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">for</span> (Class<span style="color:#ff6ac1">&lt;?&gt;</span> cl : reflections.<span style="color:#57c7ff">getTypesAnnotatedWith</span>(MappedSuperclass.<span style="color:#57c7ff">class</span>)) {
</span></span><span style="display:flex;"><span>		hibernateConfiguration.<span style="color:#57c7ff">addAnnotatedClass</span>(cl);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">for</span> (Class<span style="color:#ff6ac1">&lt;?&gt;</span> cl : reflections.<span style="color:#57c7ff">getTypesAnnotatedWith</span>(Entity.<span style="color:#57c7ff">class</span>)) {
</span></span><span style="display:flex;"><span>		hibernateConfiguration.<span style="color:#57c7ff">addAnnotatedClass</span>(cl);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	hibernateConfiguration.<span style="color:#57c7ff">setProperty</span>(AvailableSettings.<span style="color:#57c7ff">DIALECT</span>, dialect);
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">return</span> hibernateConfiguration;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then you can get your creation scripts lines like that :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>String<span style="color:#ff6ac1">[]</span> createSQL <span style="color:#ff6ac1">=</span> hibernateConfiguration.<span style="color:#57c7ff">generateSchemaCreationScript</span>(hibDialect);
</span></span><span style="display:flex;"><span>String<span style="color:#ff6ac1">[]</span> dropSQL <span style="color:#ff6ac1">=</span> hibernateConfiguration.<span style="color:#57c7ff">generateDropSchemaScript</span>(hibDialect);
</span></span></code></pre></div><p>For the create script, each line will contain either a database creation or a constraint.</p>
<p>So here is the final result :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * This class will create an hibernate {@link Configuration} with the given dialect and will scan provided
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * package for {@link MappedSuperclass} and {@link Entity}.
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * You can then use the export methods to generate your schema DDL.
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> *
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * @author Geoffroy Warin (https://github.com/geowarin)
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> *
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">HibernateExporter</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(HibernateExporter.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> String dialect;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> String entityPackage;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">boolean</span> generateCreateQueries <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">true</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">boolean</span> generateDropQueries <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">false</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> Configuration hibernateConfiguration;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#57c7ff">HibernateExporter</span>(String dialect, String entityPackage) {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">dialect</span> <span style="color:#ff6ac1">=</span> dialect;
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">entityPackage</span> <span style="color:#ff6ac1">=</span> entityPackage;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		hibernateConfiguration <span style="color:#ff6ac1">=</span> createHibernateConfig();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">export</span>(OutputStream out, <span style="color:#9aedfe">boolean</span> generateCreateQueries, <span style="color:#9aedfe">boolean</span> generateDropQueries) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		Dialect hibDialect <span style="color:#ff6ac1">=</span> Dialect.<span style="color:#57c7ff">getDialect</span>(hibernateConfiguration.<span style="color:#57c7ff">getProperties</span>());
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">try</span> (PrintWriter writer <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> PrintWriter(out)) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#ff6ac1">if</span> (generateCreateQueries) {
</span></span><span style="display:flex;"><span>				String<span style="color:#ff6ac1">[]</span> createSQL <span style="color:#ff6ac1">=</span> hibernateConfiguration.<span style="color:#57c7ff">generateSchemaCreationScript</span>(hibDialect);
</span></span><span style="display:flex;"><span>				write(writer, createSQL, FormatStyle.<span style="color:#57c7ff">DDL</span>.<span style="color:#57c7ff">getFormatter</span>());
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>			<span style="color:#ff6ac1">if</span> (generateDropQueries) {
</span></span><span style="display:flex;"><span>				String<span style="color:#ff6ac1">[]</span> dropSQL <span style="color:#ff6ac1">=</span> hibernateConfiguration.<span style="color:#57c7ff">generateDropSchemaScript</span>(hibDialect);
</span></span><span style="display:flex;"><span>				write(writer, dropSQL, FormatStyle.<span style="color:#57c7ff">DDL</span>.<span style="color:#57c7ff">getFormatter</span>());
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">export</span>(File exportFile) <span style="color:#ff5c57">throws</span> FileNotFoundException {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		export(<span style="color:#ff6ac1">new</span> FileOutputStream(exportFile), generateCreateQueries, generateDropQueries);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">exportToConsole</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		export(System.<span style="color:#57c7ff">out</span>, generateCreateQueries, generateDropQueries);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">write</span>(PrintWriter writer, String<span style="color:#ff6ac1">[]</span> lines, Formatter formatter) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">for</span> (String string : lines)
</span></span><span style="display:flex;"><span>			writer.<span style="color:#57c7ff">println</span>(formatter.<span style="color:#57c7ff">format</span>(string) <span style="color:#ff6ac1">+</span> <span style="color:#5af78e">&#34;;&#34;</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> Configuration <span style="color:#57c7ff">createHibernateConfig</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		hibernateConfiguration <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Configuration();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff5c57">final</span> Reflections reflections <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Reflections(entityPackage);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">for</span> (Class<span style="color:#ff6ac1">&lt;?&gt;</span> cl : reflections.<span style="color:#57c7ff">getTypesAnnotatedWith</span>(MappedSuperclass.<span style="color:#57c7ff">class</span>)) {
</span></span><span style="display:flex;"><span>			hibernateConfiguration.<span style="color:#57c7ff">addAnnotatedClass</span>(cl);
</span></span><span style="display:flex;"><span>			log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;Mapped = &#34;</span> <span style="color:#ff6ac1">+</span> cl.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">for</span> (Class<span style="color:#ff6ac1">&lt;?&gt;</span> cl : reflections.<span style="color:#57c7ff">getTypesAnnotatedWith</span>(Entity.<span style="color:#57c7ff">class</span>)) {
</span></span><span style="display:flex;"><span>			hibernateConfiguration.<span style="color:#57c7ff">addAnnotatedClass</span>(cl);
</span></span><span style="display:flex;"><span>			log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;Mapped = &#34;</span> <span style="color:#ff6ac1">+</span> cl.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		hibernateConfiguration.<span style="color:#57c7ff">setProperty</span>(AvailableSettings.<span style="color:#57c7ff">DIALECT</span>, dialect);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> hibernateConfiguration;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">boolean</span> <span style="color:#57c7ff">isGenerateDropQueries</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> generateDropQueries;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">setGenerateDropQueries</span>(<span style="color:#9aedfe">boolean</span> generateDropQueries) {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">generateDropQueries</span> <span style="color:#ff6ac1">=</span> generateDropQueries;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> Configuration <span style="color:#57c7ff">getHibernateConfiguration</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> hibernateConfiguration;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">setHibernateConfiguration</span>(Configuration hibernateConfiguration) {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">hibernateConfiguration</span> <span style="color:#ff6ac1">=</span> hibernateConfiguration;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And its usage :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">main</span>(String<span style="color:#ff6ac1">[]</span> args) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">//		HibernateExporter exporter = new HibernateExporter(&#34;org.hibernate.dialect.HSQLDialect&#34;, &#34;com.geowarin.model&#34;);</span>
</span></span><span style="display:flex;"><span>	HibernateExporter exporter <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> HibernateExporter(<span style="color:#5af78e">&#34;org.hibernate.dialect.MySQL5Dialect&#34;</span>, <span style="color:#5af78e">&#34;com.geowarin.model&#34;</span>);
</span></span><span style="display:flex;"><span>	exporter.<span style="color:#57c7ff">exportToConsole</span>();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This will produce this kind of output :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span> <span style="color:#ff6ac1">create</span> <span style="color:#ff6ac1">table</span> groups (
</span></span><span style="display:flex;"><span>        id <span style="color:#ff5c57">bigint</span> <span style="color:#ff6ac1">not</span> <span style="color:#ff6ac1">null</span> auto_increment,
</span></span><span style="display:flex;"><span>        createdOn datetime,
</span></span><span style="display:flex;"><span>        modifiedOn datetime,
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">version</span> <span style="color:#ff5c57">bigint</span> <span style="color:#ff6ac1">not</span> <span style="color:#ff6ac1">null</span>,
</span></span><span style="display:flex;"><span>        name <span style="color:#ff5c57">varchar</span>(<span style="color:#ff9f43">50</span>) <span style="color:#ff6ac1">not</span> <span style="color:#ff6ac1">null</span>,
</span></span><span style="display:flex;"><span>        user_id <span style="color:#ff5c57">bigint</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">primary</span> <span style="color:#ff6ac1">key</span> (id)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">create</span> <span style="color:#ff6ac1">table</span> users (
</span></span><span style="display:flex;"><span>        id <span style="color:#ff5c57">bigint</span> <span style="color:#ff6ac1">not</span> <span style="color:#ff6ac1">null</span> auto_increment,
</span></span><span style="display:flex;"><span>        createdOn datetime,
</span></span><span style="display:flex;"><span>        modifiedOn datetime,
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">version</span> <span style="color:#ff5c57">bigint</span> <span style="color:#ff6ac1">not</span> <span style="color:#ff6ac1">null</span>,
</span></span><span style="display:flex;"><span>        email <span style="color:#ff5c57">varchar</span>(<span style="color:#ff9f43">255</span>) <span style="color:#ff6ac1">not</span> <span style="color:#ff6ac1">null</span>,
</span></span><span style="display:flex;"><span>        password <span style="color:#ff5c57">varchar</span>(<span style="color:#ff9f43">80</span>) <span style="color:#ff6ac1">not</span> <span style="color:#ff6ac1">null</span>,
</span></span><span style="display:flex;"><span>        user_name <span style="color:#ff5c57">varchar</span>(<span style="color:#ff9f43">50</span>) <span style="color:#ff6ac1">not</span> <span style="color:#ff6ac1">null</span> <span style="color:#ff6ac1">unique</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">primary</span> <span style="color:#ff6ac1">key</span> (id)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">alter</span> <span style="color:#ff6ac1">table</span> groups
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">add</span> <span style="color:#ff6ac1">index</span> FKB63DD9D4CA46C100 (user_id),
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">add</span> <span style="color:#ff6ac1">constraint</span> FKB63DD9D4CA46C100
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">foreign</span> <span style="color:#ff6ac1">key</span> (user_id)
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">references</span> users (id);
</span></span></code></pre></div><p>As I said, it is not suitable for your production environment but it provides some starter DDL if you are the code first kind (and don&rsquo;t want to use hibernate-tools).</p>
]]></content:encoded></item><item><title>Using Spring Data JPA in a Java SE environment and run tests with dbUnit</title><link>https://geowarin.com/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/</link><pubDate>Mon, 21 Jan 2013 15:25:11 +0000</pubDate><guid>https://geowarin.com/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/</guid><description>Demonstration of how to set up spring data JPA in java SE and test with dbUnit</description><content:encoded><![CDATA[<p>This blog post follows my previous articles on using <a href="http://geowarin.wordpress.com/2013/01/20/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/">hibernate as a standalone JPA provider</a> and how to use <a href="http://geowarin.wordpress.com/2013/01/20/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/">spring in a Java SE</a> environment.</p>
<p>In this post, I will show you how to use <a href="http://geowarin.wordpress.com/2013/01/21/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/">Spring Data JPA</a>, a great project which improves your productivity by generating all CRUD operations for you. Then we will use <a href="http://springtestdbunit.github.com/spring-test-dbunit/">springtestdbunit</a> to run some very clean tests on our database with spring and <a href="http://www.dbunit.org/">dbUnit</a>.</p>
<p>The code source of this example is available on github : <a href="https://github.com/geowarin/hibernate-examples/tree/master/standalone-data-jpa">https://github.com/geowarin/hibernate-examples/tree/master/standalone-data-jpa</a></p>
<h2 id="what-is-spring-data-jpa">What is Spring Data JPA?</h2>
<p>Are you tired of always implementing the findOne(long id), findAll(), save()&hellip; methods on your repositories? Having to come up with clever tricks to generate a generic DAO?</p>
<p>Then give Spring Data JPA a try ! This project lets you implement a very simple interface for your repositories and takes care of all the rest, allowing you to focus on your real queries.</p>
<h2 id="the-configuration">The configuration</h2>
<p>The configuration we will set up here is pretty similar to the one we used in the <a href="http://geowarin.wordpress.com/2013/01/20/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/">spring standalone article.</a> We will just add a bunch of classes to make use of spring data jpa :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableJpaRepositories</span>(<span style="color:#5af78e">&#34;com.geowarin.standalonedatajpa.repository&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableTransactionManagement</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">StandaloneDataJpaConfig</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> DataSource <span style="color:#57c7ff">dataSource</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> EmbeddedDatabaseBuilder().<span style="color:#57c7ff">setType</span>(EmbeddedDatabaseType.<span style="color:#57c7ff">HSQL</span>)
</span></span><span style="display:flex;"><span>				.<span style="color:#57c7ff">addScript</span>(<span style="color:#5af78e">&#34;classpath:sql/schema.sql&#34;</span>)
</span></span><span style="display:flex;"><span>				.<span style="color:#57c7ff">addScript</span>(<span style="color:#5af78e">&#34;classpath:sql/import-users.sql&#34;</span>)
</span></span><span style="display:flex;"><span>				.<span style="color:#57c7ff">build</span>();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> PlatformTransactionManager <span style="color:#57c7ff">transactionManager</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		JpaTransactionManager txManager <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> JpaTransactionManager();
</span></span><span style="display:flex;"><span>		txManager.<span style="color:#57c7ff">setEntityManagerFactory</span>(entityManagerFactory());
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> txManager;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> HibernateExceptionTranslator <span style="color:#57c7ff">hibernateExceptionTranslator</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> HibernateExceptionTranslator();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> EntityManagerFactory <span style="color:#57c7ff">entityManagerFactory</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// will set the provider to &#39;org.hibernate.ejb.HibernatePersistence&#39;</span>
</span></span><span style="display:flex;"><span>		HibernateJpaVendorAdapter vendorAdapter <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> HibernateJpaVendorAdapter();
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// will set hibernate.show_sql to &#39;true&#39;</span>
</span></span><span style="display:flex;"><span>		vendorAdapter.<span style="color:#57c7ff">setShowSql</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// if set to true, will set hibernate.hbm2ddl.auto to &#39;update&#39;</span>
</span></span><span style="display:flex;"><span>		vendorAdapter.<span style="color:#57c7ff">setGenerateDdl</span>(<span style="color:#ff6ac1">false</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		LocalContainerEntityManagerFactoryBean factory <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> LocalContainerEntityManagerFactoryBean();
</span></span><span style="display:flex;"><span>		factory.<span style="color:#57c7ff">setJpaVendorAdapter</span>(vendorAdapter);
</span></span><span style="display:flex;"><span>		factory.<span style="color:#57c7ff">setPackagesToScan</span>(<span style="color:#5af78e">&#34;com.geowarin.standalonedatajpa.model&#34;</span>);
</span></span><span style="display:flex;"><span>		factory.<span style="color:#57c7ff">setDataSource</span>(dataSource());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// This will trigger the creation of the entity manager factory</span>
</span></span><span style="display:flex;"><span>		factory.<span style="color:#57c7ff">afterPropertiesSet</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> factory.<span style="color:#57c7ff">getObject</span>();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> MainBean <span style="color:#57c7ff">mainBean</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> MainBean();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>With this configuration, you won&rsquo;t even need a <em>persistence.xml</em> file ! Compared to our <a href="http://geowarin.wordpress.com/2013/01/20/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/">previous example</a> however, one cannot make use of <em>hibernate.hbm2ddl.import_files</em> property to import SQL scripts with hibernate because <em>hibernate.hbm2ddl.auto</em> must be set to either <em>create</em> or <em>create-drop</em>.</p>
<p>That&rsquo;s ok we will generate some very tiny scripts to set up the schema and the data in our database (and make our DBA happy, a thing that is never to be disregarded :))</p>
<hr>
<p><strong>Hint</strong> : If this is a real blocker for you, you could setGenrateDdl to false and maintain a simple <strong>hibernate.properties</strong> file like this one</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-properties" data-lang="properties"><span style="display:flex;"><span><span style="color:#57c7ff">hibernate.hbm2ddl.auto</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">create</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">hibernate.hbm2ddl.import_files</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">sql/import-users.sql</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">hibernate.format_sql</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">true</span>
</span></span></code></pre></div><p>That&rsquo;s because hibernate will always look for a <a href="http://docs.jboss.org/hibernate/core/4.1/manual/en-US/html/ch03.html#configuration-optional-properties">hibernate.properties</a> file in the classpath to override you persistence properties.</p>
<hr>
<p>Note the use of <strong>@EnableJpaRepositories</strong> that will tell spring data in which packages our repositories can be found.</p>
<p><strong>@EnableTransactionManagement</strong> is a replacement of the tag <code>&lt;tx:annotation-driven /&gt;</code>.</p>
<p>We can set up the <a href="http://static.springsource.org/spring-framework/docs/3.2.0.RC1/api/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.html">LocalContainerEntityManagerFactoryBean </a>to use a package to scan our entities for us, no need to list them all.</p>
<p>The rest is pretty straight forward I believe.</p>
<p>Note that by default, spring data JPA will try to locate your <em>persistence.xml</em> so the two approaches are completely compatible, for this example however we will go for a full xml-less configuration.</p>
<h2 id="one-entity-one-interface-and-we-are-ready">One entity, one interface and we are ready</h2>
<p>We have one very simple entity :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Table</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;users&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Entity</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">User</span> <span style="color:#ff5c57">implements</span> Serializable {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> <span style="color:#9aedfe">long</span> serialVersionUID <span style="color:#ff6ac1">=</span> 1L;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Id</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@GeneratedValue</span>(strategy<span style="color:#ff6ac1">=</span>GenerationType.<span style="color:#57c7ff">AUTO</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">long</span> id;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Column</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;name&#34;</span>, nullable <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">false</span>, unique<span style="color:#ff6ac1">=</span><span style="color:#ff6ac1">true</span>, length<span style="color:#ff6ac1">=</span>50)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> String name;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// getters and setters omitted</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now let&rsquo;s use spring data to generate a repository for us :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">interface</span> <span style="color:#f3f99d">UserRepository</span>  <span style="color:#ff5c57">extends</span> JpaRepository<span style="color:#ff6ac1">&lt;</span>User, Long<span style="color:#ff6ac1">&gt;</span> {
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Tadaa! Is that it? Yes, you can now use your repository in our <strong>MainBean</strong> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MainBean</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> UserRepository userRepository;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(MainBean.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">start</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// Spring Data JPA CRUD operations are transactionnal by default !</span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#transactions</span>
</span></span><span style="display:flex;"><span>		User newUser <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> User();
</span></span><span style="display:flex;"><span>		newUser.<span style="color:#57c7ff">setName</span>(<span style="color:#5af78e">&#34;inserted&#34;</span>);
</span></span><span style="display:flex;"><span>		userRepository.<span style="color:#57c7ff">save</span>(newUser);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		List all <span style="color:#ff6ac1">=</span> userRepository.<span style="color:#57c7ff">findAll</span>();
</span></span><span style="display:flex;"><span>		log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;users=&#34;</span> <span style="color:#ff6ac1">+</span> all);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Pretty sweet. But that&rsquo;s not all. You now have three different ways of writing new queries with Spring data :</p>
<ol>
<li>
<p>Use <a href="https://blogs.oracle.com/JPQL01/entry/named_query_in_java_persistence">named queries</a></p>
</li>
<li>
<p><a href="http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#jpa.query-methods.at-query">Use the @Query annotation</a> to write your own JPQL queries</p>
</li>
<li>
<p>Use the awesome <a href="http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#jpa.query-methods.query-creation">query creation by method name</a></p>
</li>
</ol>
<p>Let&rsquo;s review the last two options (I don&rsquo;t really like named queries but have a look a the <a href="http://static.springsource.org/spring-data/jpa/docs/1.2.0.RELEASE/reference/html/#jpa.query-methods.named-queries">documentation</a> if you want)</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">interface</span> <span style="color:#f3f99d">UserRepository</span>  <span style="color:#ff5c57">extends</span> JpaRepository<span style="color:#ff6ac1">&lt;</span>User, Long<span style="color:#ff6ac1">&gt;</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Demonstrate query creation by method name</span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#jpa.query-methods.query-creation</span>
</span></span><span style="display:flex;"><span>	User <span style="color:#57c7ff">findByName</span>(String name);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Demonstrate the use of a simple JPQL query</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Query</span>(<span style="color:#5af78e">&#34;from User u where upper(u.name) = upper(:name)&#34;</span>)
</span></span><span style="display:flex;"><span>	User <span style="color:#57c7ff">findByNameIgnoreCase</span>(<span style="color:#ff9f43">@Param</span>(<span style="color:#5af78e">&#34;name&#34;</span>) String name);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="ok-lets-test-it">Ok let&rsquo;s test it</h2>
<p>Have a look at the unit test for our repository :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@RunWith</span>(SpringJUnit4ClassRunner.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ContextConfiguration</span>(classes <span style="color:#ff6ac1">=</span> { StandaloneDataJpaConfig.<span style="color:#57c7ff">class</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@TestExecutionListeners</span>({ DependencyInjectionTestExecutionListener.<span style="color:#57c7ff">class</span>,
</span></span><span style="display:flex;"><span>	DbUnitTestExecutionListener.<span style="color:#57c7ff">class</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">UserRepositoryTest</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> UserRepository userRepository;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@DatabaseSetup</span>(<span style="color:#5af78e">&#34;userAdminData.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFindAdmin</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User admin <span style="color:#ff6ac1">=</span> userRepository.<span style="color:#57c7ff">findOne</span>(1L);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(admin);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;admin&#34;</span>, admin.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@DatabaseSetup</span>(<span style="color:#5af78e">&#34;userAdminData.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFindByName</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User admin <span style="color:#ff6ac1">=</span> userRepository.<span style="color:#57c7ff">findByName</span>(<span style="color:#5af78e">&#34;admin&#34;</span>);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(admin);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;admin&#34;</span>, admin.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@DatabaseSetup</span>(<span style="color:#5af78e">&#34;userAdminData.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFindByNameIgnoreCase</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User admin <span style="color:#ff6ac1">=</span> userRepository.<span style="color:#57c7ff">findByNameIgnoreCase</span>(<span style="color:#5af78e">&#34;AdMIn&#34;</span>);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(admin);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;admin&#34;</span>, admin.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@DatabaseSetup</span>(<span style="color:#5af78e">&#34;userAdminData.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@ExpectedDatabase</span>(<span style="color:#5af78e">&#34;afterInsert.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testInsertUser</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User newUser <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> User();
</span></span><span style="display:flex;"><span>		newUser.<span style="color:#57c7ff">setName</span>(<span style="color:#5af78e">&#34;inserted&#34;</span>);
</span></span><span style="display:flex;"><span>		userRepository.<span style="color:#57c7ff">save</span>(newUser);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We use springtestdbunit to be able to use annotations to set up and verify the database state after each test. Here are our two datasets.</p>
<p>userAdminData.xml :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#78787e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;dataset&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;users</span> <span style="color:#57c7ff">id=</span><span style="color:#5af78e">&#34;1&#34;</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;admin&#34;</span> <span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/dataset&gt;</span>
</span></span></code></pre></div><p>afterInsert.xml :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#78787e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;dataset&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;users</span> <span style="color:#57c7ff">id=</span><span style="color:#5af78e">&#34;1&#34;</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;admin&#34;</span> <span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;users</span> <span style="color:#57c7ff">id=</span><span style="color:#5af78e">&#34;2&#34;</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;inserted&#34;</span> <span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/dataset&gt;</span>
</span></span></code></pre></div><p>Using the <strong>@ExpectedDatabase</strong> annotation is really awesome, dbUnit will generate very informative messages if your test failed.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Spring Data JPA is really a good piece of software. We did not go into too much details but know that it will handle pagination, type-safe queries, is compatible with <a href="http://www.querydsl.com/">query-dsl</a> and much more.
It is suitable for a Java SE environment which can come in handy if we want to run some quick tests on our database.</p>
<p>Finally, springtestdbunit is a very nice-to-have feature which will make your repository unit tests a real breeze to write.</p>
<p>Lastly, I will point out that making use of the <a href="http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#transactions">transational behaviour of spring data</a> CRUD operation is not really a good practice but we did it all the same for the sake of simplicity.
A better approach would be to use <strong>@Service</strong> spring beans to encapsulate one or several operations.</p>
]]></content:encoded></item><item><title>Using spring in a Java SE environment and implementing the chain of responsibility pattern</title><link>https://geowarin.com/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/</link><pubDate>Sun, 20 Jan 2013 19:31:56 +0000</pubDate><guid>https://geowarin.com/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/</guid><description>Demonstration of how to set up spring in java SE and inject several implementations of the same interface</description><content:encoded><![CDATA[<p>In this post I will show you how to use spring 3.0 <a href="http://www.springsource.org/javaconfig">Java based configuration</a> in a Java SE environment, taking advantage of spring autowiring to implement the <a href="http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern">chain of responsibility </a>design pattern with components and services in a simple project. We will also use spring&rsquo;s <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.html">PropertySourcesPlaceholderConfigurer</a> to inject custom properties into our beans with the <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/beans/factory/annotation/Value.html">@Value</a> annotation and test our application with spring-test.</p>
<p>Some fun in perspective ! Tag along.</p>
<p>The source code of this application is available on my github : <a href="https://github.com/geowarin/spring-examples/tree/master/spring-standalone-chain">https://github.com/geowarin/spring-examples/tree/master/spring-standalone-chain</a></p>
<h2 id="java-configuration">Java configuration</h2>
<p>Starting from spring 3.0, it is possible to get rid of any XML configuration by providing a pure Java configuration. This is done by annotating your configuration classes with the <strong>@Configuration</strong> annotation and annotating your beans with <strong>@Bean</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ComponentScan</span>(basePackages <span style="color:#ff6ac1">=</span> {<span style="color:#5af78e">&#34;com.geowarin.spring.service&#34;</span>, <span style="color:#5af78e">&#34;com.geowarin.spring.component&#34;</span>})
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@PropertySource</span>(value <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;classpath:chain.properties&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SpringStandalonChainConfig</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> PropertySourcesPlaceholderConfigurer <span style="color:#57c7ff">propertySourcesPlaceholderConfigurer</span>() {
</span></span><span style="display:flex;"><span>		PropertySourcesPlaceholderConfigurer pspc <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> PropertySourcesPlaceholderConfigurer();
</span></span><span style="display:flex;"><span>		pspc.<span style="color:#57c7ff">setPlaceholderPrefix</span>(<span style="color:#5af78e">&#34;#{&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> pspc;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> MainBean <span style="color:#57c7ff">mainBean</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> MainBean();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Additional annotation for java configuration include <strong>@ComponentScan</strong> to specify packages in which your <strong>@Component</strong>, <strong>@Service</strong>, etc. beans are included and <strong>@PropertySource</strong> to include property files in your configuration.</p>
<p>Two thing here :</p>
<ol>
<li>I declare a <strong>MainBean</strong> which will act as an entry point for our application. This bean will benefit of spring autowiring</li>
<li>I declare a custom <strong>PropertySourcesPlaceholderConfigurer</strong> to enable the injection of properties annotated with @Value. I am customizing the prefix for usage of <a href="http://static.springsource.org/spring/docs/3.0.x/reference/expressions.html">spring Expression Language</a> to be able to use #{} expressions instead of default ${}</li>
</ol>
<p>Injection with <strong>@Value</strong> property is a very interesting alternative to the use of spring&rsquo;s Environment as it provides natural type inference.</p>
<p>For some people, the use of java configuration can be confusing because one cannot see at first glance where the config is located. What I usually do is keeping my configuration in a separate source folder. This can be achieved with maven and its build-helper plugin :</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>This approach is compatible with eclipse if you have m2e installed. In that case when you import a project using this plugin, eclipse will prompt you for the install of the build-helper connector.</p>
<h2 id="our-application-entry-point--the-mainbean">Our application entry point : the MainBean</h2>
<p>Here is the code of our <strong>MainBean</strong> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MainBean</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Qualifier</span>(<span style="color:#5af78e">&#34;doChain&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> ChainService service;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Value</span>(<span style="color:#5af78e">&#34;#{chain.compatibleWithFirst}&#34;</span>) <span style="color:#9aedfe">boolean</span> compatibleWithFirst;
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Value</span>(<span style="color:#5af78e">&#34;#{chain.compatibleWithSecond}&#34;</span>) <span style="color:#9aedfe">boolean</span> compatibleWithSecond;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(MainBean.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">start</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;property compatibleWithFirst=&#34;</span> <span style="color:#ff6ac1">+</span> compatibleWithFirst);
</span></span><span style="display:flex;"><span>		log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;property compatibleWithSecond=&#34;</span> <span style="color:#ff6ac1">+</span> compatibleWithSecond);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		ChainContext chainContext <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ChainContext(compatibleWithFirst, compatibleWithSecond);
</span></span><span style="display:flex;"><span>		service.<span style="color:#57c7ff">executeChain</span>(chainContext);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We are injecting our service into the bean with a custom qualifier which will enable us to provide several implementations of our service if we need it.</p>
<p>Note that the <strong>@Value</strong> annotation, our properties will automatically be casted to booleans, which is pretty cool. Here is our chain.properties file :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>chain.compatibleWithFirst<span style="color:#ff6ac1">=</span><span style="color:#ff5c57">false</span>
</span></span><span style="display:flex;"><span>chain.compatibleWithSecond<span style="color:#ff6ac1">=</span><span style="color:#ff5c57">true</span>
</span></span></code></pre></div><h2 id="the-chain--two-components-and-a-service">The Chain : Two components and a service</h2>
<p>The <strong>ChainContext</strong> class is a simple pojo we pass to our service to be handled by the chain of responsibility and enable us to test if our service successfully handled our case :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">ChainContext</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> <span style="color:#9aedfe">boolean</span> compatibleWithFirstElement;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> <span style="color:#9aedfe">boolean</span> compatibleWithSecondElement;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">boolean</span> handledByFirst;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">boolean</span> handledBySecond;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#57c7ff">ChainContext</span>(<span style="color:#9aedfe">boolean</span> compatibleWithFirstElement, <span style="color:#9aedfe">boolean</span> compatibleWithSecondElement) {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">compatibleWithFirstElement</span> <span style="color:#ff6ac1">=</span> compatibleWithFirstElement;
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">compatibleWithSecondElement</span> <span style="color:#ff6ac1">=</span> compatibleWithSecondElement;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Getters and setters ommited</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>ChainElement</strong> is a simple interface which will be implemented by two components : <strong>FirstChainElement</strong> and <strong>SecondChainElement</strong>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">interface</span> <span style="color:#f3f99d">ChainElement</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">boolean</span> <span style="color:#57c7ff">doChain</span>(ChainContext context);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here is the first element, the second one is essentially the same thing :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Order</span>(1)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">FirstChainElement</span> <span style="color:#ff5c57">implements</span> ChainElement {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(FirstChainElement.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">boolean</span> <span style="color:#57c7ff">doChain</span>(ChainContext context) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">if</span> (context.<span style="color:#57c7ff">isCompatibleWithFirstElement</span>()) {
</span></span><span style="display:flex;"><span>			log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;Handled by first&#34;</span>);
</span></span><span style="display:flex;"><span>			context.<span style="color:#57c7ff">setHandledByFirst</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>			<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">true</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">false</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The thing to note here is the use of the spring annotation <a href="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/core/annotation/Order.html">@Order</a> which will enable us to sort our list using spring&rsquo;s <a href="http://static.springsource.org/spring/docs/3.0.x/api/org/springframework/core/annotation/AnnotationAwareOrderComparator.html">AnnotationAwareOrderComparator</a>. Neat :)</p>
<p>And now the service :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Qualifier</span>(<span style="color:#5af78e">&#34;doChain&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DoChainService</span> <span style="color:#ff5c57">implements</span> ChainService {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> List<span style="color:#ff6ac1">&lt;</span>ChainElement<span style="color:#ff6ac1">&gt;</span> chain;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@PostConstruct</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">init</span>() {
</span></span><span style="display:flex;"><span>		Collections.<span style="color:#57c7ff">sort</span>(chain, AnnotationAwareOrderComparator.<span style="color:#57c7ff">INSTANCE</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">executeChain</span>(ChainContext context) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">for</span> (ChainElement chainElement : chain) {
</span></span><span style="display:flex;"><span>			<span style="color:#ff6ac1">if</span> (chainElement.<span style="color:#57c7ff">doChain</span>(context))
</span></span><span style="display:flex;"><span>				<span style="color:#ff6ac1">break</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Note that we use the same qualifier as our <strong>MainBean</strong> here. The main trick in this article is the usage of <strong>@Autowired</strong> to inject all the components implementing the <strong>ChainElement</strong> interface into a List.</p>
<h2 id="the-application-main-and-tests">The application main and tests</h2>
<p>That&rsquo;s it ! Now you can run your project with this main class :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SpringStandaloneChainApp</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> String CONFIG_PACKAGE <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;com.geowarin.spring.config&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">main</span>(String<span style="color:#ff6ac1">[]</span> args) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">try</span> (AnnotationConfigApplicationContext ctx <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> AnnotationConfigApplicationContext()) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			ctx.<span style="color:#57c7ff">scan</span>(CONFIG_PACKAGE);
</span></span><span style="display:flex;"><span>			ctx.<span style="color:#57c7ff">refresh</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			MainBean bean <span style="color:#ff6ac1">=</span> ctx.<span style="color:#57c7ff">getBean</span>(MainBean.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>			bean.<span style="color:#57c7ff">start</span>();
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And unit test the service with spring-test like that :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@RunWith</span>(SpringJUnit4ClassRunner.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ContextConfiguration</span>(classes <span style="color:#ff6ac1">=</span> { SpringStandalonChainConfig.<span style="color:#57c7ff">class</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">ChainServiceTest</span> <span style="color:#ff5c57">extends</span> TestCase {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> ChainService chainService;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testHandledByFirst</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		ChainContext chainContext <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ChainContext(<span style="color:#ff6ac1">true</span>, <span style="color:#ff6ac1">false</span>);
</span></span><span style="display:flex;"><span>		chainService.<span style="color:#57c7ff">executeChain</span>(chainContext);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertTrue</span>(chainContext.<span style="color:#57c7ff">isHandledByFirst</span>());
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertFalse</span>(chainContext.<span style="color:#57c7ff">isHandledBySecond</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testHandledBySecond</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		ChainContext chainContext <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ChainContext(<span style="color:#ff6ac1">false</span>, <span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>		chainService.<span style="color:#57c7ff">executeChain</span>(chainContext);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertFalse</span>(chainContext.<span style="color:#57c7ff">isHandledByFirst</span>());
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertTrue</span>(chainContext.<span style="color:#57c7ff">isHandledBySecond</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Spring is perfectly suitable for a Java SE Environment. Its new java configuration is very handy and powerful as long as you keep things tidy and make sure the configuration is not spread across the whole project.
Finally, let&rsquo;s note it is possible to inject all components or services implementing a given interface into a list with the `@Autowired annotation.</p>
]]></content:encoded></item><item><title>Using Hibernate as a JPA provider in a Java SE environment and run tests with dbUnit</title><link>https://geowarin.com/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/</link><pubDate>Sun, 20 Jan 2013 16:28:23 +0000</pubDate><guid>https://geowarin.com/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/</guid><description>Demonstration of how to set up hibernate in a java SE application and test with dbUnit</description><content:encoded><![CDATA[<p>Sometimes it can be useful to use JPA in a minimal environment to test your model or just if you&rsquo;re curious of how things work in your DAO layer behind the scenes. In this blog post, we will create a simple project then see how you can use <a href="http://www.dbunit.org/">dbUnit </a>to run some unit tests on your database.</p>
<p>The source code of this blog post is available on my github : <a href="https://github.com/geowarin/hibernate-examples/tree/master/hibernate-jpa-standalone-dbunit">https://github.com/geowarin/hibernate-examples/tree/master/hibernate-jpa-standalone-dbunit</a></p>
<p>First thing is to create a persistence.xml file in your resources. Default location is under META-INF/persistence.xml. Here is a snippet using an embedded <a href="http://hsqldb.org/">hsqldb</a>.</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>javax.persistence.jdbc.driver, url, user and password are standard JPA properties. The driver tells jdbc how to connect to your databse. Hsqldb must be in your classpath to find the corresponding driver. You could also init hsqdb to write to a file or use a different protocol, see the <a href="http://hsqldb.org/doc/2.0/guide/dbproperties-chapt.html">documentation </a>for more information.</p>
<p>The properties prefixed with hibernate are vendor-specific properties :</p>
<ul>
<li>hibernate.dialect will tell hibernate how to issue SQL queries for your database</li>
<li>hibernate.hbm2ddl.auto can be set to validate, update, create, create-drop. Since we will start a new database every time we launch our application, we will just create the tables on each run</li>
<li>hbm2ddl.import_files is a comma-separated list of paths to some custom SQL scripts that hibernate will execute after the database is created, we will explain this a little bit further</li>
<li>hibernate.show_sql and hibernate.format_sql will display the SQL queries generated by hibernate. You can tell hibernate to format them if you want a more human readable output</li>
</ul>
<p>More information is available in the <a href="http://docs.jboss.org/hibernate/core/4.1/manual/en-US/html/ch03.html#configuration-optional-properties">hibernate documentation</a>.</p>
<p>Then, we will create a simple entity :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Table</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;users&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Entity</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">User</span> <span style="color:#ff5c57">implements</span> Serializable {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Id</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@GeneratedValue</span>(strategy<span style="color:#ff6ac1">=</span>GenerationType.<span style="color:#57c7ff">AUTO</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">long</span> id;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Column</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;name&#34;</span>, nullable <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">false</span>, unique<span style="color:#ff6ac1">=</span><span style="color:#ff6ac1">true</span>, length<span style="color:#ff6ac1">=</span>50)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> String name;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Getters and setters omitted</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Notice the <a href="http://docs.oracle.com/javaee/5/api/javax/persistence/Table.html">@Table</a> annotation that we use to specify the name of the table we are going to store our users in. This is useful information for our SQL scripts for example. For table naming, you should consider having simple conventions. Here, I just use lower case name of the entity and add an s to my table.</p>
<p>Same thing can be said about the <a href="http://docs.oracle.com/javaee/5/api/javax/persistence/Column.html">@Column</a> annotation.</p>
<p>Now let&rsquo;s review our init script, import-users.sql :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#ff6ac1">INSERT</span> <span style="color:#ff6ac1">INTO</span> users(id, name) <span style="color:#ff6ac1">VALUES</span>(<span style="color:#ff9f43">1</span>, <span style="color:#5af78e">&#39;admin&#39;</span>);
</span></span></code></pre></div><p>Pretty straight forward. You just have to figure out the correct syntax from your annotations.</p>
<p>Last is the instantiation and use of the <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/EntityManager.html">entity manager</a> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">App</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(App.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">main</span>(String<span style="color:#ff6ac1">[]</span> args) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		EntityManagerFactory entityManagerFactory <span style="color:#ff6ac1">=</span> Persistence.<span style="color:#57c7ff">createEntityManagerFactory</span>(<span style="color:#5af78e">&#34;persistence&#34;</span>);
</span></span><span style="display:flex;"><span>		EntityManager entityManager <span style="color:#ff6ac1">=</span> entityManagerFactory.<span style="color:#57c7ff">createEntityManager</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User found <span style="color:#ff6ac1">=</span> entityManager.<span style="color:#57c7ff">find</span>(User.<span style="color:#57c7ff">class</span>, 1L);
</span></span><span style="display:flex;"><span>		log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;found=&#34;</span> <span style="color:#ff6ac1">+</span> found);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here you go! Since JPA 2 you can create the entity manager factory using the <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/Persistence.html">Persistence</a> class. The string passed as parameter is the name of your persistence unit declared in your persistence.xml file. Spring and others will bootstrap the entity manager factory a little bit differently but the concept is essentially the same.</p>
<h2 id="using-dbunit">Using dbUnit</h2>
<p>DbUnit is a database testing framework which allows you to load data and verify the correctness of your DAO layer using datasets.</p>
<p>Datasets are simple xml files which represent a database state. Here is an sample dataset :</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>We can use dbUnit in our simple project, we just have to deal with a little bit of boilerplate code. Here is the abstract class that my test will extend.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * Abstract unit test case class.
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * This will load the test-data.xml dataset before each test case and will clean the database before each test
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> *
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * @author Geoffroy Warin (https://github.com/geowarin)
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> *
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">abstract</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">AbstractDbUnitJpaTest</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> EntityManagerFactory entityManagerFactory;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> IDatabaseConnection connection;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> IDataSet dataset;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">protected</span> <span style="color:#ff5c57">static</span> EntityManager entityManager;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * Will load test-dataset.xml before each test case
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * @throws DatabaseUnitException
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * @throws HibernateException
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@BeforeClass</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">initEntityManager</span>() <span style="color:#ff5c57">throws</span> HibernateException, DatabaseUnitException {
</span></span><span style="display:flex;"><span>		entityManagerFactory <span style="color:#ff6ac1">=</span> Persistence.<span style="color:#57c7ff">createEntityManagerFactory</span>(<span style="color:#5af78e">&#34;persistence-test&#34;</span>);
</span></span><span style="display:flex;"><span>		entityManager <span style="color:#ff6ac1">=</span> entityManagerFactory.<span style="color:#57c7ff">createEntityManager</span>();
</span></span><span style="display:flex;"><span>		connection <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> DatabaseConnection(((SessionImpl) (entityManager.<span style="color:#57c7ff">getDelegate</span>())).<span style="color:#57c7ff">connection</span>());
</span></span><span style="display:flex;"><span>		connection.<span style="color:#57c7ff">getConfig</span>().<span style="color:#57c7ff">setProperty</span>(DatabaseConfig.<span style="color:#57c7ff">PROPERTY_DATATYPE_FACTORY</span>, <span style="color:#ff6ac1">new</span> HsqldbDataTypeFactory());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		FlatXmlDataSetBuilder flatXmlDataSetBuilder <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> FlatXmlDataSetBuilder();
</span></span><span style="display:flex;"><span>		flatXmlDataSetBuilder.<span style="color:#57c7ff">setColumnSensing</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>		InputStream dataSet <span style="color:#ff6ac1">=</span> Thread.<span style="color:#57c7ff">currentThread</span>().<span style="color:#57c7ff">getContextClassLoader</span>().<span style="color:#57c7ff">getResourceAsStream</span>(<span style="color:#5af78e">&#34;test-data.xml&#34;</span>);
</span></span><span style="display:flex;"><span>		dataset <span style="color:#ff6ac1">=</span> flatXmlDataSetBuilder.<span style="color:#57c7ff">build</span>(dataSet);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@AfterClass</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">closeEntityManager</span>() {
</span></span><span style="display:flex;"><span>		entityManager.<span style="color:#57c7ff">close</span>();
</span></span><span style="display:flex;"><span>		entityManagerFactory.<span style="color:#57c7ff">close</span>();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * Will clean the dataBase before each test
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 *
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * @throws SQLException
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * @throws DatabaseUnitException
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Before</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">cleanDB</span>() <span style="color:#ff5c57">throws</span> DatabaseUnitException, SQLException {
</span></span><span style="display:flex;"><span>		DatabaseOperation.<span style="color:#57c7ff">CLEAN_INSERT</span>.<span style="color:#57c7ff">execute</span>(connection, dataset);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And an example of usage :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">AppTest</span> <span style="color:#ff5c57">extends</span> AbstractDbUnitJpaTest {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFind</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User user <span style="color:#ff6ac1">=</span> entityManager.<span style="color:#57c7ff">find</span>(User.<span style="color:#57c7ff">class</span>, 1L);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(user);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;userTest&#34;</span>, user.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testInsert</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User newUser <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> User();
</span></span><span style="display:flex;"><span>		newUser.<span style="color:#57c7ff">setName</span>(<span style="color:#5af78e">&#34;insert&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		entityManager.<span style="color:#57c7ff">getTransaction</span>().<span style="color:#57c7ff">begin</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		entityManager.<span style="color:#57c7ff">persist</span>(newUser);
</span></span><span style="display:flex;"><span>		<span style="color:#9aedfe">long</span> id <span style="color:#ff6ac1">=</span> newUser.<span style="color:#57c7ff">getId</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		entityManager.<span style="color:#57c7ff">getTransaction</span>().<span style="color:#57c7ff">commit</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User user <span style="color:#ff6ac1">=</span> entityManager.<span style="color:#57c7ff">find</span>(User.<span style="color:#57c7ff">class</span>, id);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(user);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;insert&#34;</span>, user.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFindAll</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		List<span style="color:#ff6ac1">&lt;</span>User<span style="color:#ff6ac1">&gt;</span> allUsers <span style="color:#ff6ac1">=</span> entityManager.<span style="color:#57c7ff">createQuery</span>(<span style="color:#5af78e">&#34;from User&#34;</span>).<span style="color:#57c7ff">getResultList</span>();
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(2, allUsers.<span style="color:#57c7ff">size</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Notice we have to deal with the transactions ourselves which can be pretty tiresome. Recommended way to do this is to create a service layer which will be responsible for opening and committing transactions.</p>
<p>The findAll test uses a standard <a href="http://docs.oracle.com/html/E24396_01/ejb3_langref.html">JPQL </a>query to find all users in the database. The select clause is facultative. The &ldquo;User&rdquo; keyword is the name of our entity.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Since JPA 2, we can use JPA in a simple SE environment. Downside is we have to handle transactions and write some boilerplate code to use JPQL queries and a framework like dbUnit.</p>
<p>Issues that can be addressed beautifully by project like <a href="http://www.springsource.org/spring-data/jpa">Spring data JPA</a>, check out my <a href="http://geowarin.wordpress.com/2013/01/21/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/">other article</a>.</p>
]]></content:encoded></item><item><title>Tuning eclipse</title><link>https://geowarin.com/tuning-eclipse/</link><pubDate>Fri, 18 Jan 2013 04:20:19 +0000</pubDate><guid>https://geowarin.com/tuning-eclipse/</guid><description>Tips and tricks, useful plugins and tuning for the eclipse IDE</description><content:encoded><![CDATA[<p>This is a compilation of resources I use to configure eclipse.</p>
<h2 id="the-jvm-options">The Jvm options</h2>
<p>Always a big headache, there is a good resource on <a href="http://stackoverflow.com/questions/142357/what-are-the-best-jvm-settings-for-eclipse/3275659#3275659">stack-overflow</a>.</p>
<p>For JVM noobs, I recommend the <a href="http://avricot.com/blog/index.php?post/2010/05/03/Get-started-with-java-JVM-memory-(heap%2C-stack%2C-xss-xms-xmx-xmn...)">following reading</a>.</p>
<p>If you are a JVM tuning maniac, you might also like <a href="http://blog.headius.com/2009/01/my-favorite-hotspot-jvm-flags.html">this post</a> and to <a href="http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html">read the man</a>.</p>
<p>If you&rsquo;re interested, I am maintaining a gist with my up-to-date eclipse flags : <a href="https://gist.github.com/4562291">https://gist.github.com/4562291</a></p>
<h2 id="must-have-plugins">Must-have plugins</h2>
<p>If you don&rsquo;t know them already, you should check out these plugins :</p>
<ul>
<li><a href="http://marketplace.eclipse.org/content/easyshell">EasyShell</a>, which allows to open windows, terminal and copy path on any eclipse resource (and configure shortcuts for each of these actions - pretty awesome)</li>
<li><a href="http://www.eclipse.org/m2e-wtp/">m2e</a> and <a href="http://www.eclipse.org/m2e-wtp/">m2e-wtp</a> are must-haves if you use maven to build JEE apps. I often install the <a href="http://mojo.codehaus.org/build-helper-maven-plugin/usage.html">build-helper</a> connector too.</li>
<li><a href="http://marketplace.eclipse.org/content/grep-console#.UPjHgieqmEc">GrepConsole</a>, which lets you use simple regexp to color your console, fancy !</li>
</ul>
<h2 id="copy-workspace-settings">Copy workspace settings</h2>
<p>If you want to have multiple workspaces sharing the same preferences check out <a href="http://eclipse.dzone.com/news/create-new-eclipse-workspace-w">this article</a>.</p>
<h2 id="file-encoding-in-utf-8-please">File encoding in UTF-8 please</h2>
<p>First thing is to go to General &gt; Workspace and select UTF-8 in &ldquo;Text File Encoding&rdquo;
Second is General  &gt; Content Types &gt; Text. Then you can either type &ldquo;UTF-8&rdquo; for everything or at least for &ldquo;Java Properties file&rdquo;</p>
<h2 id="bonus">Bonus</h2>
<p>Et pour nos amis francophones, une <a href="http://blog.tensin.org/public/presentations/eclipse/">superbe présentation</a> sur la customisation d&rsquo;eclipse !</p>
]]></content:encoded></item></channel></rss>