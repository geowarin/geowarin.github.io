<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Testing on Geowarin</title><link>https://geowarin.com/categories/testing/</link><description>Recent content in Testing on Geowarin</description><generator>Hugo -- 0.138.0</generator><language>en</language><lastBuildDate>Wed, 20 Jan 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://geowarin.com/categories/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Test your Java application with Groovy</title><link>https://geowarin.com/test-your-java-application-with-groovy/</link><pubDate>Wed, 20 Jan 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/test-your-java-application-with-groovy/</guid><description>You can write better tests for your Java application with Spock, Groovy and very little configuration</description><content:encoded><![CDATA[<p>I think Groovy is a wonderful language.
However, I would not advise a complete rewrite of your project in Groovy!</p>
<p>We can however use Groovy to test our Java code.</p>
<p>I&rsquo;m actually a big fan of this approach.
I&rsquo;ve been using it to test legacy applications written in Java.</p>
<p>I still couldn&rsquo;t use lambdas or fancy Java 8 features but all of a sudden,
my test code was more expressive.
I could take advantage closures, power asserts, the Spock DSL and Groovy simple syntax.
The best part: every library I used was a test dependency and never impacted
the actual code.</p>
<p>In this article I will show you how to add Groovy tests to
an existing Java application built either with Maven or Gradle.</p>
<p>The code source of a demo application using Maven and Spock is <a href="https://github.com/geowarin/groovy-tests">available on github</a>.</p>
<h2 id="why-groovy">Why groovy?</h2>
<p>Groovy is a dynamic language with optional typing. It means that you can
have the guarantees of a type system when it matters and the versatility of
duck typing when you know what your are doing.</p>
<p>Groovy removes all the verbosity from the Java syntax.
Some small examples:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span><span style="color:#78787e">// map literals
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>Map<span style="color:#ff6ac1">&lt;</span>String<span style="color:#ff6ac1">,</span> String<span style="color:#ff6ac1">&gt;</span> things <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">[</span><span style="color:#5af78e">&#39;hello&#39;</span><span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;world&#39;</span><span style="color:#ff6ac1">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">// Write to a file
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span><span style="color:#ff6ac1">new</span> <span style="color:#57c7ff">File</span><span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#34;hello.txt&#34;</span><span style="color:#ff6ac1">)</span> <span style="color:#ff6ac1">&lt;&lt;</span> <span style="color:#5af78e">&#39;Hello world!&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">// Add some numbers
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>BigInteger a <span style="color:#ff6ac1">=</span> <span style="color:#ff9f43">18</span>
</span></span><span style="display:flex;"><span>BigDecimal b <span style="color:#ff6ac1">=</span> <span style="color:#ff9f43">24</span>
</span></span><span style="display:flex;"><span><span style="color:#9aedfe">int</span> sum <span style="color:#ff6ac1">=</span> a <span style="color:#ff6ac1">+</span> b
</span></span><span style="display:flex;"><span>println <span style="color:#5af78e">&#34;$sum ${sum.class}&#34;</span> <span style="color:#78787e">// 42 class java.lang.Integer
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">// List literals
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>List<span style="color:#ff6ac1">&lt;</span>Number<span style="color:#ff6ac1">&gt;</span> numbers <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">[-</span><span style="color:#ff9f43">2</span><span style="color:#ff6ac1">,</span> <span style="color:#ff9f43">12</span><span style="color:#ff6ac1">,</span> <span style="color:#ff9f43">6</span><span style="color:#ff6ac1">,</span> <span style="color:#ff9f43">3</span><span style="color:#ff6ac1">]</span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">// Closures
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span><span style="color:#9aedfe">def</span> result <span style="color:#ff6ac1">=</span> numbers
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">.</span><span style="color:#57c7ff">findAll</span> <span style="color:#ff6ac1">{</span> it <span style="color:#ff6ac1">&gt;</span> <span style="color:#ff9f43">0</span> <span style="color:#ff6ac1">}</span> <span style="color:#78787e">// filter
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>        <span style="color:#ff6ac1">.</span><span style="color:#57c7ff">collect</span> <span style="color:#ff6ac1">{</span> it <span style="color:#ff6ac1">*</span> <span style="color:#ff9f43">2</span> <span style="color:#ff6ac1">}</span> <span style="color:#78787e">// map
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>        <span style="color:#ff6ac1">.</span><span style="color:#57c7ff">sum</span><span style="color:#ff6ac1">()</span> <span style="color:#78787e">// reduce
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">// template strings
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>println <span style="color:#5af78e">&#34;This answer to life, universe and everything: ${result}&#34;</span>
</span></span></code></pre></div><p>If you want a good introduction to groovy check out the <a href="http://www.groovy-lang.org/style-guide.html">groovy style guide</a>.</p>
<p>You can also watch the amazing <a href="http://www.infoq.com/presentations/groovy-for-java">Groovy for Java developers</a> presentation by Peter Ledbrook.</p>
<p>Another thing. Groovy let you access private class members.
Although this completely violates encapsulation, you will get away
with just a warning.</p>
<p>It is nice to have this kind of ability when you add tests to a legacy application before
refactoring it.</p>
<h2 id="why-spock">Why Spock?</h2>
<p>Spock is a wonderful test framework.</p>
<p>It combines the best features of other frameworks like JUnit, jMock, and RSpec
and let you write specifications with a nice <a href="https://fr.wikipedia.org/wiki/Behavior_driven_development">BDD</a> DSL.</p>
<p>It is fully compatible with JUnit so you can use all the stuff you like (rules for instance)
and much more!</p>
<p>It will also completely remove the need for a mocking framework like Mockito.</p>
<p>If you want to learn more about Spock read: <a href="https://code.google.com/p/spock/wiki/WhySpock">why spock</a> and <a href="http://spockframework.github.io/spock/docs/1.0/spock_primer.html">spock primer</a>.</p>
<p>I also found the <a href="https://github.com/spockframework/next-level-spock">next level spock repo</a>
interesting to look at.</p>
<h2 id="how">How?</h2>
<p>You are now ready to add Spock to your tool-belt. But how?</p>
<h3 id="with-maven">With Maven</h3>
<p>Add dependencies to Groovy and Spock:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;dependencies&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.codehaus.groovy<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;artifactId&gt;</span>groovy-all<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;version&gt;</span>2.4.4<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;scope&gt;</span>test<span style="color:#ff6ac1">&lt;/scope&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.spockframework<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;artifactId&gt;</span>spock-core<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;version&gt;</span>1.0-groovy-2.4<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;scope&gt;</span>test<span style="color:#ff6ac1">&lt;/scope&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/dependencies&gt;</span>
</span></span></code></pre></div><p>Now, you need to tell maven to compile the code contained in <code>src/test/groovy</code>.
We will use the <a href="https://github.com/groovy/GMavenPlus">gmavenplus</a> plugin for that.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;build&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;plugins&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;plugin&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.codehaus.gmavenplus<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;artifactId&gt;</span>gmavenplus-plugin<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;version&gt;</span>1.0<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;executions&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;execution&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;goals&gt;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#ff6ac1">&lt;goal&gt;</span>generateStubs<span style="color:#ff6ac1">&lt;/goal&gt;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#ff6ac1">&lt;goal&gt;</span>compile<span style="color:#ff6ac1">&lt;/goal&gt;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#ff6ac1">&lt;goal&gt;</span>testGenerateStubs<span style="color:#ff6ac1">&lt;/goal&gt;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#ff6ac1">&lt;goal&gt;</span>testCompile<span style="color:#ff6ac1">&lt;/goal&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;/goals&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;/execution&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;/executions&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;dependencies&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.codehaus.groovy<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;artifactId&gt;</span>groovy-all<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;version&gt;</span>2.4.4<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;scope&gt;</span>runtime<span style="color:#ff6ac1">&lt;/scope&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;/dependencies&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;/plugin&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">&lt;!-- Optional --&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;plugin&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.apache.maven.plugins<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;artifactId&gt;</span>maven-surefire-plugin<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;version&gt;</span>2.16<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;configuration&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;parallel&gt;</span>methods<span style="color:#ff6ac1">&lt;/parallel&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;threadCount&gt;</span>5<span style="color:#ff6ac1">&lt;/threadCount&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;includes&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;include&gt;</span>**/*Test.*<span style="color:#ff6ac1">&lt;/include&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;include&gt;</span>**/*Spec.*<span style="color:#ff6ac1">&lt;/include&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;/includes&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;excludes&gt;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">&lt;exclude&gt;</span>**/Abstract*.java<span style="color:#ff6ac1">&lt;/exclude&gt;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">&lt;/excludes&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;/configuration&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;/plugin&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/plugins&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/build&gt;</span>
</span></span></code></pre></div><p>By convention, Spock tests are called specifications and spec files end with
<code>*Spec.groovy</code>.
This is optional but we can enable that behavior by overriding the surefire default
configuration.</p>
<h3 id="with-gradle">With gradle</h3>
<p>Just apply the groovy plugin, included by default in Gradle.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>apply <span style="color:#ff5c57">plugin:</span> <span style="color:#5af78e">&#39;groovy&#39;</span>
</span></span></code></pre></div><p>Since the plugin extends the Java convention, it will automatically compile the
Java code contained in <code>src/main/java</code> and <code>src/test/java</code> as well as the
Groovy code contained in <code>src/main/groovy</code> and <code>src/test/groovy</code>.</p>
<h2 id="your-first-spock-specification">Your first Spock specification</h2>
<p>Place this little specification in <code>src/test/groovy</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> spock.lang.Specification
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> spock.lang.Unroll
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MySpec</span> <span style="color:#ff5c57">extends</span> Specification <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Unroll</span>
</span></span><span style="display:flex;"><span>    <span style="color:#9aedfe">def</span> <span style="color:#5af78e">&#34;max(#a,#b) == #c&#34;</span><span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">expect:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// This class is in our Java code
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>        MyClass<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">max</span><span style="color:#ff6ac1">(</span>a<span style="color:#ff6ac1">,</span> b<span style="color:#ff6ac1">)</span> <span style="color:#ff6ac1">==</span> c
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">where:</span>
</span></span><span style="display:flex;"><span>        a  <span style="color:#ff6ac1">|</span> b   <span style="color:#ff6ac1">|</span> c
</span></span><span style="display:flex;"><span>        <span style="color:#ff9f43">1</span>  <span style="color:#ff6ac1">|</span> <span style="color:#ff9f43">2</span>   <span style="color:#ff6ac1">|</span> <span style="color:#ff9f43">2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff9f43">42</span> <span style="color:#ff6ac1">|</span> <span style="color:#ff6ac1">-</span><span style="color:#ff9f43">12</span> <span style="color:#ff6ac1">|</span> <span style="color:#ff9f43">42</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff9f43">42</span> <span style="color:#ff6ac1">|</span> <span style="color:#ff6ac1">-</span><span style="color:#ff9f43">12</span> <span style="color:#ff6ac1">|</span> <span style="color:#ff6ac1">-</span><span style="color:#ff9f43">42</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span></code></pre></div><p>Here is what it looks like in IntelliJ:</p>
<p><img alt="Spock test results" loading="lazy" src="/assets/images/articles/2016-01-spock.png" title="Spock results"></p>
<p>You can also verify that it works with maven by typing:</p>
<pre tabindex="0"><code>mvn test
</code></pre><p>You would get this result:</p>
<pre tabindex="0"><code>-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running MySpec
Tests run: 3, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.146 sec &lt;&lt;&lt; FAILURE! - in MySpec
max(42,-12) == -42(MySpec)  Time elapsed: 0.105 sec  &lt;&lt;&lt; FAILURE!
org.spockframework.runtime.SpockComparisonFailure: Condition not satisfied:

Math.max(a, b) == c
     |   |  |  |  |
     42  42 -12|  -42
               false

        at MySpec.max(#a,#b) == #c(MySpec.groovy:9)


Results :

Failed tests:
  MySpec.max(#a,#b) == #c:9 Condition not satisfied:

Math.max(a, b) == c
     |   |  |  |  |
     42  42 -12|  -42
               false


Tests run: 3, Failures: 1, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1.887 s
[INFO] Finished at: 2016-01-20T15:52:40+01:00
[INFO] Final Memory: 11M/309M
[INFO] ------------------------------------------------------------------------
</code></pre><h2 id="ide-integration">IDE integration</h2>
<p>Install the <a href="https://github.com/mycila/gmavenplus-intellij-plugin">gmavnen intelliJ plugin</a>
and the <a href="https://plugins.jetbrains.com/plugin/7114">spock plugin</a> for a better integration with your IDE.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Even if your whole codebase is in Java, your fellow developers will thank you
for bringing a breath of fresh air to your project with Groovy tests.</p>
<p>The configuration to get this working is very simple. You have no excuse
for not giving it a try!</p>
<p>As always, checkout the <a href="https://github.com/geowarin/groovy-tests">github repo</a> and tell me your thoughts.</p>
]]></content:encoded></item><item><title>Integration tests with a Docker JUnit Rule</title><link>https://geowarin.com/integration-tests-with-a-docker-junit-rule/</link><pubDate>Wed, 06 Jan 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/integration-tests-with-a-docker-junit-rule/</guid><description>Docker can help you write better tests with a simple JUnit rule</description><content:encoded><![CDATA[<p>When writing integration tests, you might have to run a third party server
or middleware.
Your tests should remain fast to run and you should be able to run them
from your IDE.</p>
<p>Docker seems a good choice for this task!</p>
<p>I just published a <a href="https://github.com/geowarin/docker-junit-rule">small library</a> that contains a <a href="https://github.com/junit-team/junit/wiki/Rules">JUnit rule</a> allowing you
to start Docker containers before your unit tests.</p>
<p>If that sounds of interest to you, you should give it a try and tell me what
you think!</p>
<h2 id="junit-rules">JUnit rules</h2>
<p>JUnit rules allow us to do some sort of <a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming">AOP</a> applied to JUnit test.
Within a rule you are given the handle of the test to run.</p>
<p>You can decide what to do with it. Should we skip it? Should we run it?
Should we wrap it in a try catch? Should we add some behavior before or after
the test?</p>
<p>You can use the <code>@Rule</code> annotation to run the rule before each test or the
<code>@ClassRule</code> annotation to run it once in your test class.</p>
<p>You can have has many rules as you need in your any of your tests.</p>
<p>It is much more powerful than creating an abstract test class from which
test will inherit.
This is the application of the <a href="https://en.wikipedia.org/wiki/Composition_over_inheritance">composition over inheritance</a> principle.</p>
<p>Here is an example of a JUnit rule:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> com.rabbitmq.client.ConnectionFactory;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> org.junit.ClassRule;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> org.junit.Test;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> rules.RabbitContainerRule;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RabbitIntegrationTest</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@ClassRule</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> RabbitContainerRule rabbitContainerRule <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> RabbitContainerRule();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testConnectsToDocker</span>() <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>        ConnectionFactory factory <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ConnectionFactory();
</span></span><span style="display:flex;"><span>        factory.<span style="color:#57c7ff">setHost</span>(rabbitContainerRule.<span style="color:#57c7ff">getDockerHost</span>());
</span></span><span style="display:flex;"><span>        factory.<span style="color:#57c7ff">setPort</span>(rabbitContainerRule.<span style="color:#57c7ff">getRabbitServicePort</span>());
</span></span><span style="display:flex;"><span>        factory.<span style="color:#57c7ff">newConnection</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="behind-the-scene">Behind the scene</h2>
<p>Did you know that the Docker daemon is accessible via a <a href="https://docs.docker.com/engine/reference/api/docker_remote_api/">REST API</a>?
In fact when you use the docker client, it sends HTTP requests to
the daemon.</p>
<p>That also means that we can create other docker clients in any programming language.
In Java, Spotify has open-sourced a great <a href="https://github.com/spotify/docker-client">docker client</a>.</p>
<p>We will use this library to create our JUnit rule.
Here is a simplified version of what we will be doing:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DockerContainerRule</span> <span style="color:#ff5c57">extends</span> ExternalResource {
</span></span><span style="display:flex;"><span>  <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">DockerContainerRule</span>(String imageName, String<span style="color:#ff6ac1">[]</span> ports, String cmd) {
</span></span><span style="display:flex;"><span>    dockerClient <span style="color:#ff6ac1">=</span> createDockerClient();
</span></span><span style="display:flex;"><span>    ContainerConfig containerConfig <span style="color:#ff6ac1">=</span> createContainerConfig(imageName, ports, cmd);
</span></span><span style="display:flex;"><span>    dockerClient.<span style="color:#57c7ff">pull</span>(imageName);
</span></span><span style="display:flex;"><span>    container <span style="color:#ff6ac1">=</span> dockerClient.<span style="color:#57c7ff">createContainer</span>(containerConfig);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff5c57">protected</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">before</span>() <span style="color:#ff5c57">throws</span> Throwable {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">super</span>.<span style="color:#57c7ff">before</span>();
</span></span><span style="display:flex;"><span>    dockerClient.<span style="color:#57c7ff">startContainer</span>(container.<span style="color:#57c7ff">id</span>());
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff5c57">protected</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">after</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">super</span>.<span style="color:#57c7ff">after</span>();
</span></span><span style="display:flex;"><span>    dockerClient.<span style="color:#57c7ff">killContainer</span>(container.<span style="color:#57c7ff">id</span>());
</span></span><span style="display:flex;"><span>    dockerClient.<span style="color:#57c7ff">removeContainer</span>(container.<span style="color:#57c7ff">id</span>(), <span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>    dockerClient.<span style="color:#57c7ff">close</span>();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Simple, isn&rsquo;t it?
You can check out the full code <a href="https://github.com/geowarin/docker-junit-rule/blob/master/src/main/java/com/github/geowarin/junit/DockerContainerRule.java">here</a></p>
<p>This class will allow users to create their own rules, extending this one:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RabbitContainerRule</span> <span style="color:#ff5c57">extends</span> DockerContainerRule {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> String RABBIT_CONTAINER_IMAGE_NAME <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;rabbitmq:management&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">RabbitContainerRule</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// List the ports to open on the container.</span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// They will automatically be bound to random unused ports on your host</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">super</span>(RABBIT_CONTAINER_IMAGE_NAME, <span style="color:#ff6ac1">new</span> String<span style="color:#ff6ac1">[]</span>{<span style="color:#5af78e">&#34;5672&#34;</span>, <span style="color:#5af78e">&#34;15672&#34;</span>});
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">before</span>() <span style="color:#ff5c57">throws</span> Throwable {
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">super</span>.<span style="color:#57c7ff">before</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// wait for container to boot</span>
</span></span><span style="display:flex;"><span>        waitForPort(getRabbitServicePort());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">int</span> <span style="color:#57c7ff">getRabbitServicePort</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> getHostPort(<span style="color:#5af78e">&#34;5672/tcp&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">int</span> <span style="color:#57c7ff">getRabbitManagementPort</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> getHostPort(<span style="color:#5af78e">&#34;15672/tcp&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="bonus">Bonus</h2>
<p>There is an annoying thing with docker containers: you cannot tell if the
process running inside is in a ready state and waiting for your to use
it or if it is still booting.</p>
<p>Most people use <a href="https://en.wikipedia.org/wiki/Netcat"><code>netcat</code></a> on a specific
port to <a href="https://github.com/aanand/docker-wait">wait for a container</a>.</p>
<p>In Java, we can do the same thing with good old sockets!</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">waitForPort</span>(<span style="color:#9aedfe">int</span> port, <span style="color:#9aedfe">long</span> timeoutInMillis) {
</span></span><span style="display:flex;"><span>  SocketAddress address <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> InetSocketAddress(getDockerHost(), port);
</span></span><span style="display:flex;"><span>  <span style="color:#9aedfe">long</span> totalWait <span style="color:#ff6ac1">=</span> 0;
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">while</span> (<span style="color:#ff6ac1">true</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>      SocketChannel.<span style="color:#57c7ff">open</span>(address);
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">return</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#ff6ac1">catch</span> (IOException e) {
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>        Thread.<span style="color:#57c7ff">sleep</span>(100);
</span></span><span style="display:flex;"><span>        totalWait <span style="color:#ff6ac1">+=</span> 100;
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">if</span> (totalWait <span style="color:#ff6ac1">&gt;</span> timeoutInMillis) {
</span></span><span style="display:flex;"><span>          <span style="color:#ff6ac1">throw</span> <span style="color:#ff6ac1">new</span> IllegalStateException(<span style="color:#5af78e">&#34;Timeout while waiting for port &#34;</span> <span style="color:#ff6ac1">+</span> port);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      } <span style="color:#ff6ac1">catch</span> (InterruptedException ie) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">throw</span> <span style="color:#ff6ac1">new</span> IllegalStateException(ie);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>JUnit rules are a very cool way to improve the readability and the expressiveness of our tests.
Check out the <a href="http://stefanbirkner.github.io/system-rules/">system rules</a> for
a good example.</p>
<p>Don&rsquo;t forget to give a try to the project, which is available <a href="https://github.com/geowarin/docker-junit-rule">on github</a> and give me your feedback.</p>
]]></content:encoded></item></channel></rss>