<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>JPA on Geowarin</title><link>https://geowarin.com/categories/jpa/</link><description>Recent content in JPA on Geowarin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 21 Jan 2013 15:25:11 +0000</lastBuildDate><atom:link href="https://geowarin.com/categories/jpa/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Spring Data JPA in a Java SE environment and run tests with dbUnit</title><link>https://geowarin.com/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/</link><pubDate>Mon, 21 Jan 2013 15:25:11 +0000</pubDate><guid>https://geowarin.com/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/</guid><description>Demonstration of how to set up spring data JPA in java SE and test with dbUnit</description><content:encoded><![CDATA[<p>This blog post follows my previous articles on using <a href="http://geowarin.wordpress.com/2013/01/20/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/">hibernate as a standalone JPA provider</a> and how to use <a href="http://geowarin.wordpress.com/2013/01/20/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/">spring in a Java SE</a> environment.</p>
<p>In this post, I will show you how to use <a href="http://geowarin.wordpress.com/2013/01/21/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/">Spring Data JPA</a>, a great project which improves your productivity by generating all CRUD operations for you. Then we will use <a href="http://springtestdbunit.github.com/spring-test-dbunit/">springtestdbunit</a> to run some very clean tests on our database with spring and <a href="http://www.dbunit.org/">dbUnit</a>.</p>
<p>The code source of this example is available on github : <a href="https://github.com/geowarin/hibernate-examples/tree/master/standalone-data-jpa">https://github.com/geowarin/hibernate-examples/tree/master/standalone-data-jpa</a></p>
<h2 id="what-is-spring-data-jpa">What is Spring Data JPA?</h2>
<p>Are you tired of always implementing the findOne(long id), findAll(), save()&hellip; methods on your repositories? Having to come up with clever tricks to generate a generic DAO?</p>
<p>Then give Spring Data JPA a try ! This project lets you implement a very simple interface for your repositories and takes care of all the rest, allowing you to focus on your real queries.</p>
<h2 id="the-configuration">The configuration</h2>
<p>The configuration we will set up here is pretty similar to the one we used in the <a href="http://geowarin.wordpress.com/2013/01/20/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/">spring standalone article.</a> We will just add a bunch of classes to make use of spring data jpa :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableJpaRepositories</span>(<span style="color:#5af78e">&#34;com.geowarin.standalonedatajpa.repository&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableTransactionManagement</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">StandaloneDataJpaConfig</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> DataSource <span style="color:#57c7ff">dataSource</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> EmbeddedDatabaseBuilder().<span style="color:#57c7ff">setType</span>(EmbeddedDatabaseType.<span style="color:#57c7ff">HSQL</span>)
</span></span><span style="display:flex;"><span>				.<span style="color:#57c7ff">addScript</span>(<span style="color:#5af78e">&#34;classpath:sql/schema.sql&#34;</span>)
</span></span><span style="display:flex;"><span>				.<span style="color:#57c7ff">addScript</span>(<span style="color:#5af78e">&#34;classpath:sql/import-users.sql&#34;</span>)
</span></span><span style="display:flex;"><span>				.<span style="color:#57c7ff">build</span>();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> PlatformTransactionManager <span style="color:#57c7ff">transactionManager</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		JpaTransactionManager txManager <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> JpaTransactionManager();
</span></span><span style="display:flex;"><span>		txManager.<span style="color:#57c7ff">setEntityManagerFactory</span>(entityManagerFactory());
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> txManager;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> HibernateExceptionTranslator <span style="color:#57c7ff">hibernateExceptionTranslator</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> HibernateExceptionTranslator();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> EntityManagerFactory <span style="color:#57c7ff">entityManagerFactory</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// will set the provider to &#39;org.hibernate.ejb.HibernatePersistence&#39;</span>
</span></span><span style="display:flex;"><span>		HibernateJpaVendorAdapter vendorAdapter <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> HibernateJpaVendorAdapter();
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// will set hibernate.show_sql to &#39;true&#39;</span>
</span></span><span style="display:flex;"><span>		vendorAdapter.<span style="color:#57c7ff">setShowSql</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// if set to true, will set hibernate.hbm2ddl.auto to &#39;update&#39;</span>
</span></span><span style="display:flex;"><span>		vendorAdapter.<span style="color:#57c7ff">setGenerateDdl</span>(<span style="color:#ff6ac1">false</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		LocalContainerEntityManagerFactoryBean factory <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> LocalContainerEntityManagerFactoryBean();
</span></span><span style="display:flex;"><span>		factory.<span style="color:#57c7ff">setJpaVendorAdapter</span>(vendorAdapter);
</span></span><span style="display:flex;"><span>		factory.<span style="color:#57c7ff">setPackagesToScan</span>(<span style="color:#5af78e">&#34;com.geowarin.standalonedatajpa.model&#34;</span>);
</span></span><span style="display:flex;"><span>		factory.<span style="color:#57c7ff">setDataSource</span>(dataSource());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// This will trigger the creation of the entity manager factory</span>
</span></span><span style="display:flex;"><span>		factory.<span style="color:#57c7ff">afterPropertiesSet</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> factory.<span style="color:#57c7ff">getObject</span>();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> MainBean <span style="color:#57c7ff">mainBean</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> MainBean();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>With this configuration, you won&rsquo;t even need a <em>persistence.xml</em> file ! Compared to our <a href="http://geowarin.wordpress.com/2013/01/20/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/">previous example</a> however, one cannot make use of <em>hibernate.hbm2ddl.import_files</em> property to import SQL scripts with hibernate because <em>hibernate.hbm2ddl.auto</em> must be set to either <em>create</em> or <em>create-drop</em>.</p>
<p>That&rsquo;s ok we will generate some very tiny scripts to set up the schema and the data in our database (and make our DBA happy, a thing that is never to be disregarded :))</p>
<hr>
<p><strong>Hint</strong> : If this is a real blocker for you, you could setGenrateDdl to false and maintain a simple <strong>hibernate.properties</strong> file like this one</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-properties" data-lang="properties"><span style="display:flex;"><span><span style="color:#57c7ff">hibernate.hbm2ddl.auto</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">create</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">hibernate.hbm2ddl.import_files</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">sql/import-users.sql</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">hibernate.format_sql</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">true</span>
</span></span></code></pre></div><p>That&rsquo;s because hibernate will always look for a <a href="http://docs.jboss.org/hibernate/core/4.1/manual/en-US/html/ch03.html#configuration-optional-properties">hibernate.properties</a> file in the classpath to override you persistence properties.</p>
<hr>
<p>Note the use of <strong>@EnableJpaRepositories</strong> that will tell spring data in which packages our repositories can be found.</p>
<p><strong>@EnableTransactionManagement</strong> is a replacement of the tag <code>&lt;tx:annotation-driven /&gt;</code>.</p>
<p>We can set up the <a href="http://static.springsource.org/spring-framework/docs/3.2.0.RC1/api/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.html">LocalContainerEntityManagerFactoryBean </a>to use a package to scan our entities for us, no need to list them all.</p>
<p>The rest is pretty straight forward I believe.</p>
<p>Note that by default, spring data JPA will try to locate your <em>persistence.xml</em> so the two approaches are completely compatible, for this example however we will go for a full xml-less configuration.</p>
<h2 id="one-entity-one-interface-and-we-are-ready">One entity, one interface and we are ready</h2>
<p>We have one very simple entity :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Table</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;users&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Entity</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">User</span> <span style="color:#ff5c57">implements</span> Serializable {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> <span style="color:#9aedfe">long</span> serialVersionUID <span style="color:#ff6ac1">=</span> 1L;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Id</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@GeneratedValue</span>(strategy<span style="color:#ff6ac1">=</span>GenerationType.<span style="color:#57c7ff">AUTO</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">long</span> id;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Column</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;name&#34;</span>, nullable <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">false</span>, unique<span style="color:#ff6ac1">=</span><span style="color:#ff6ac1">true</span>, length<span style="color:#ff6ac1">=</span>50)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> String name;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// getters and setters omitted</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now let&rsquo;s use spring data to generate a repository for us :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">interface</span> <span style="color:#f3f99d">UserRepository</span>  <span style="color:#ff5c57">extends</span> JpaRepository<span style="color:#ff6ac1">&lt;</span>User, Long<span style="color:#ff6ac1">&gt;</span> {
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Tadaa! Is that it? Yes, you can now use your repository in our <strong>MainBean</strong> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MainBean</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> UserRepository userRepository;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(MainBean.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">start</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// Spring Data JPA CRUD operations are transactionnal by default !</span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#transactions</span>
</span></span><span style="display:flex;"><span>		User newUser <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> User();
</span></span><span style="display:flex;"><span>		newUser.<span style="color:#57c7ff">setName</span>(<span style="color:#5af78e">&#34;inserted&#34;</span>);
</span></span><span style="display:flex;"><span>		userRepository.<span style="color:#57c7ff">save</span>(newUser);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		List all <span style="color:#ff6ac1">=</span> userRepository.<span style="color:#57c7ff">findAll</span>();
</span></span><span style="display:flex;"><span>		log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;users=&#34;</span> <span style="color:#ff6ac1">+</span> all);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Pretty sweet. But that&rsquo;s not all. You now have three different ways of writing new queries with Spring data :</p>
<ol>
<li>
<p>Use <a href="https://blogs.oracle.com/JPQL01/entry/named_query_in_java_persistence">named queries</a></p>
</li>
<li>
<p><a href="http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#jpa.query-methods.at-query">Use the @Query annotation</a> to write your own JPQL queries</p>
</li>
<li>
<p>Use the awesome <a href="http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#jpa.query-methods.query-creation">query creation by method name</a></p>
</li>
</ol>
<p>Let&rsquo;s review the last two options (I don&rsquo;t really like named queries but have a look a the <a href="http://static.springsource.org/spring-data/jpa/docs/1.2.0.RELEASE/reference/html/#jpa.query-methods.named-queries">documentation</a> if you want)</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">interface</span> <span style="color:#f3f99d">UserRepository</span>  <span style="color:#ff5c57">extends</span> JpaRepository<span style="color:#ff6ac1">&lt;</span>User, Long<span style="color:#ff6ac1">&gt;</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Demonstrate query creation by method name</span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#jpa.query-methods.query-creation</span>
</span></span><span style="display:flex;"><span>	User <span style="color:#57c7ff">findByName</span>(String name);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Demonstrate the use of a simple JPQL query</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Query</span>(<span style="color:#5af78e">&#34;from User u where upper(u.name) = upper(:name)&#34;</span>)
</span></span><span style="display:flex;"><span>	User <span style="color:#57c7ff">findByNameIgnoreCase</span>(<span style="color:#ff9f43">@Param</span>(<span style="color:#5af78e">&#34;name&#34;</span>) String name);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="ok-lets-test-it">Ok let&rsquo;s test it</h2>
<p>Have a look at the unit test for our repository :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@RunWith</span>(SpringJUnit4ClassRunner.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ContextConfiguration</span>(classes <span style="color:#ff6ac1">=</span> { StandaloneDataJpaConfig.<span style="color:#57c7ff">class</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@TestExecutionListeners</span>({ DependencyInjectionTestExecutionListener.<span style="color:#57c7ff">class</span>,
</span></span><span style="display:flex;"><span>	DbUnitTestExecutionListener.<span style="color:#57c7ff">class</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">UserRepositoryTest</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> UserRepository userRepository;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@DatabaseSetup</span>(<span style="color:#5af78e">&#34;userAdminData.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFindAdmin</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User admin <span style="color:#ff6ac1">=</span> userRepository.<span style="color:#57c7ff">findOne</span>(1L);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(admin);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;admin&#34;</span>, admin.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@DatabaseSetup</span>(<span style="color:#5af78e">&#34;userAdminData.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFindByName</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User admin <span style="color:#ff6ac1">=</span> userRepository.<span style="color:#57c7ff">findByName</span>(<span style="color:#5af78e">&#34;admin&#34;</span>);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(admin);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;admin&#34;</span>, admin.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@DatabaseSetup</span>(<span style="color:#5af78e">&#34;userAdminData.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFindByNameIgnoreCase</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User admin <span style="color:#ff6ac1">=</span> userRepository.<span style="color:#57c7ff">findByNameIgnoreCase</span>(<span style="color:#5af78e">&#34;AdMIn&#34;</span>);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(admin);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;admin&#34;</span>, admin.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@DatabaseSetup</span>(<span style="color:#5af78e">&#34;userAdminData.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@ExpectedDatabase</span>(<span style="color:#5af78e">&#34;afterInsert.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testInsertUser</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User newUser <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> User();
</span></span><span style="display:flex;"><span>		newUser.<span style="color:#57c7ff">setName</span>(<span style="color:#5af78e">&#34;inserted&#34;</span>);
</span></span><span style="display:flex;"><span>		userRepository.<span style="color:#57c7ff">save</span>(newUser);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We use springtestdbunit to be able to use annotations to set up and verify the database state after each test. Here are our two datasets.</p>
<p>userAdminData.xml :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#78787e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;dataset&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;users</span> <span style="color:#57c7ff">id=</span><span style="color:#5af78e">&#34;1&#34;</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;admin&#34;</span> <span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/dataset&gt;</span>
</span></span></code></pre></div><p>afterInsert.xml :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#78787e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;dataset&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;users</span> <span style="color:#57c7ff">id=</span><span style="color:#5af78e">&#34;1&#34;</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;admin&#34;</span> <span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;users</span> <span style="color:#57c7ff">id=</span><span style="color:#5af78e">&#34;2&#34;</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;inserted&#34;</span> <span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/dataset&gt;</span>
</span></span></code></pre></div><p>Using the <strong>@ExpectedDatabase</strong> annotation is really awesome, dbUnit will generate very informative messages if your test failed.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Spring Data JPA is really a good piece of software. We did not go into too much details but know that it will handle pagination, type-safe queries, is compatible with <a href="http://www.querydsl.com/">query-dsl</a> and much more.
It is suitable for a Java SE environment which can come in handy if we want to run some quick tests on our database.</p>
<p>Finally, springtestdbunit is a very nice-to-have feature which will make your repository unit tests a real breeze to write.</p>
<p>Lastly, I will point out that making use of the <a href="http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#transactions">transational behaviour of spring data</a> CRUD operation is not really a good practice but we did it all the same for the sake of simplicity.
A better approach would be to use <strong>@Service</strong> spring beans to encapsulate one or several operations.</p>
]]></content:encoded></item><item><title>Using Hibernate as a JPA provider in a Java SE environment and run tests with dbUnit</title><link>https://geowarin.com/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/</link><pubDate>Sun, 20 Jan 2013 16:28:23 +0000</pubDate><guid>https://geowarin.com/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/</guid><description>Demonstration of how to set up hibernate in a java SE application and test with dbUnit</description><content:encoded><![CDATA[<p>Sometimes it can be useful to use JPA in a minimal environment to test your model or just if you&rsquo;re curious of how things work in your DAO layer behind the scenes. In this blog post, we will create a simple project then see how you can use <a href="http://www.dbunit.org/">dbUnit </a>to run some unit tests on your database.</p>
<p>The source code of this blog post is available on my github : <a href="https://github.com/geowarin/hibernate-examples/tree/master/hibernate-jpa-standalone-dbunit">https://github.com/geowarin/hibernate-examples/tree/master/hibernate-jpa-standalone-dbunit</a></p>
<p>First thing is to create a persistence.xml file in your resources. Default location is under META-INF/persistence.xml. Here is a snippet using an embedded <a href="http://hsqldb.org/">hsqldb</a>.</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>javax.persistence.jdbc.driver, url, user and password are standard JPA properties. The driver tells jdbc how to connect to your databse. Hsqldb must be in your classpath to find the corresponding driver. You could also init hsqdb to write to a file or use a different protocol, see the <a href="http://hsqldb.org/doc/2.0/guide/dbproperties-chapt.html">documentation </a>for more information.</p>
<p>The properties prefixed with hibernate are vendor-specific properties :</p>
<ul>
<li>hibernate.dialect will tell hibernate how to issue SQL queries for your database</li>
<li>hibernate.hbm2ddl.auto can be set to validate, update, create, create-drop. Since we will start a new database every time we launch our application, we will just create the tables on each run</li>
<li>hbm2ddl.import_files is a comma-separated list of paths to some custom SQL scripts that hibernate will execute after the database is created, we will explain this a little bit further</li>
<li>hibernate.show_sql and hibernate.format_sql will display the SQL queries generated by hibernate. You can tell hibernate to format them if you want a more human readable output</li>
</ul>
<p>More information is available in the <a href="http://docs.jboss.org/hibernate/core/4.1/manual/en-US/html/ch03.html#configuration-optional-properties">hibernate documentation</a>.</p>
<p>Then, we will create a simple entity :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Table</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;users&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Entity</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">User</span> <span style="color:#ff5c57">implements</span> Serializable {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Id</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@GeneratedValue</span>(strategy<span style="color:#ff6ac1">=</span>GenerationType.<span style="color:#57c7ff">AUTO</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">long</span> id;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Column</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;name&#34;</span>, nullable <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">false</span>, unique<span style="color:#ff6ac1">=</span><span style="color:#ff6ac1">true</span>, length<span style="color:#ff6ac1">=</span>50)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> String name;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Getters and setters omitted</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Notice the <a href="http://docs.oracle.com/javaee/5/api/javax/persistence/Table.html">@Table</a> annotation that we use to specify the name of the table we are going to store our users in. This is useful information for our SQL scripts for example. For table naming, you should consider having simple conventions. Here, I just use lower case name of the entity and add an s to my table.</p>
<p>Same thing can be said about the <a href="http://docs.oracle.com/javaee/5/api/javax/persistence/Column.html">@Column</a> annotation.</p>
<p>Now let&rsquo;s review our init script, import-users.sql :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#ff6ac1">INSERT</span> <span style="color:#ff6ac1">INTO</span> users(id, name) <span style="color:#ff6ac1">VALUES</span>(<span style="color:#ff9f43">1</span>, <span style="color:#5af78e">&#39;admin&#39;</span>);
</span></span></code></pre></div><p>Pretty straight forward. You just have to figure out the correct syntax from your annotations.</p>
<p>Last is the instantiation and use of the <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/EntityManager.html">entity manager</a> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">App</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(App.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">main</span>(String<span style="color:#ff6ac1">[]</span> args) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		EntityManagerFactory entityManagerFactory <span style="color:#ff6ac1">=</span> Persistence.<span style="color:#57c7ff">createEntityManagerFactory</span>(<span style="color:#5af78e">&#34;persistence&#34;</span>);
</span></span><span style="display:flex;"><span>		EntityManager entityManager <span style="color:#ff6ac1">=</span> entityManagerFactory.<span style="color:#57c7ff">createEntityManager</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User found <span style="color:#ff6ac1">=</span> entityManager.<span style="color:#57c7ff">find</span>(User.<span style="color:#57c7ff">class</span>, 1L);
</span></span><span style="display:flex;"><span>		log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;found=&#34;</span> <span style="color:#ff6ac1">+</span> found);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here you go! Since JPA 2 you can create the entity manager factory using the <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/Persistence.html">Persistence</a> class. The string passed as parameter is the name of your persistence unit declared in your persistence.xml file. Spring and others will bootstrap the entity manager factory a little bit differently but the concept is essentially the same.</p>
<h2 id="using-dbunit">Using dbUnit</h2>
<p>DbUnit is a database testing framework which allows you to load data and verify the correctness of your DAO layer using datasets.</p>
<p>Datasets are simple xml files which represent a database state. Here is an sample dataset :</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>We can use dbUnit in our simple project, we just have to deal with a little bit of boilerplate code. Here is the abstract class that my test will extend.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * Abstract unit test case class.
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * This will load the test-data.xml dataset before each test case and will clean the database before each test
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> *
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * @author Geoffroy Warin (https://github.com/geowarin)
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> *
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">abstract</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">AbstractDbUnitJpaTest</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> EntityManagerFactory entityManagerFactory;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> IDatabaseConnection connection;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> IDataSet dataset;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">protected</span> <span style="color:#ff5c57">static</span> EntityManager entityManager;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * Will load test-dataset.xml before each test case
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * @throws DatabaseUnitException
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * @throws HibernateException
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@BeforeClass</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">initEntityManager</span>() <span style="color:#ff5c57">throws</span> HibernateException, DatabaseUnitException {
</span></span><span style="display:flex;"><span>		entityManagerFactory <span style="color:#ff6ac1">=</span> Persistence.<span style="color:#57c7ff">createEntityManagerFactory</span>(<span style="color:#5af78e">&#34;persistence-test&#34;</span>);
</span></span><span style="display:flex;"><span>		entityManager <span style="color:#ff6ac1">=</span> entityManagerFactory.<span style="color:#57c7ff">createEntityManager</span>();
</span></span><span style="display:flex;"><span>		connection <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> DatabaseConnection(((SessionImpl) (entityManager.<span style="color:#57c7ff">getDelegate</span>())).<span style="color:#57c7ff">connection</span>());
</span></span><span style="display:flex;"><span>		connection.<span style="color:#57c7ff">getConfig</span>().<span style="color:#57c7ff">setProperty</span>(DatabaseConfig.<span style="color:#57c7ff">PROPERTY_DATATYPE_FACTORY</span>, <span style="color:#ff6ac1">new</span> HsqldbDataTypeFactory());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		FlatXmlDataSetBuilder flatXmlDataSetBuilder <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> FlatXmlDataSetBuilder();
</span></span><span style="display:flex;"><span>		flatXmlDataSetBuilder.<span style="color:#57c7ff">setColumnSensing</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>		InputStream dataSet <span style="color:#ff6ac1">=</span> Thread.<span style="color:#57c7ff">currentThread</span>().<span style="color:#57c7ff">getContextClassLoader</span>().<span style="color:#57c7ff">getResourceAsStream</span>(<span style="color:#5af78e">&#34;test-data.xml&#34;</span>);
</span></span><span style="display:flex;"><span>		dataset <span style="color:#ff6ac1">=</span> flatXmlDataSetBuilder.<span style="color:#57c7ff">build</span>(dataSet);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@AfterClass</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">closeEntityManager</span>() {
</span></span><span style="display:flex;"><span>		entityManager.<span style="color:#57c7ff">close</span>();
</span></span><span style="display:flex;"><span>		entityManagerFactory.<span style="color:#57c7ff">close</span>();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * Will clean the dataBase before each test
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 *
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * @throws SQLException
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * @throws DatabaseUnitException
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Before</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">cleanDB</span>() <span style="color:#ff5c57">throws</span> DatabaseUnitException, SQLException {
</span></span><span style="display:flex;"><span>		DatabaseOperation.<span style="color:#57c7ff">CLEAN_INSERT</span>.<span style="color:#57c7ff">execute</span>(connection, dataset);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And an example of usage :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">AppTest</span> <span style="color:#ff5c57">extends</span> AbstractDbUnitJpaTest {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFind</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User user <span style="color:#ff6ac1">=</span> entityManager.<span style="color:#57c7ff">find</span>(User.<span style="color:#57c7ff">class</span>, 1L);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(user);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;userTest&#34;</span>, user.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testInsert</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User newUser <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> User();
</span></span><span style="display:flex;"><span>		newUser.<span style="color:#57c7ff">setName</span>(<span style="color:#5af78e">&#34;insert&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		entityManager.<span style="color:#57c7ff">getTransaction</span>().<span style="color:#57c7ff">begin</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		entityManager.<span style="color:#57c7ff">persist</span>(newUser);
</span></span><span style="display:flex;"><span>		<span style="color:#9aedfe">long</span> id <span style="color:#ff6ac1">=</span> newUser.<span style="color:#57c7ff">getId</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		entityManager.<span style="color:#57c7ff">getTransaction</span>().<span style="color:#57c7ff">commit</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User user <span style="color:#ff6ac1">=</span> entityManager.<span style="color:#57c7ff">find</span>(User.<span style="color:#57c7ff">class</span>, id);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(user);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;insert&#34;</span>, user.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFindAll</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		List<span style="color:#ff6ac1">&lt;</span>User<span style="color:#ff6ac1">&gt;</span> allUsers <span style="color:#ff6ac1">=</span> entityManager.<span style="color:#57c7ff">createQuery</span>(<span style="color:#5af78e">&#34;from User&#34;</span>).<span style="color:#57c7ff">getResultList</span>();
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(2, allUsers.<span style="color:#57c7ff">size</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Notice we have to deal with the transactions ourselves which can be pretty tiresome. Recommended way to do this is to create a service layer which will be responsible for opening and committing transactions.</p>
<p>The findAll test uses a standard <a href="http://docs.oracle.com/html/E24396_01/ejb3_langref.html">JPQL </a>query to find all users in the database. The select clause is facultative. The &ldquo;User&rdquo; keyword is the name of our entity.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Since JPA 2, we can use JPA in a simple SE environment. Downside is we have to handle transactions and write some boilerplate code to use JPQL queries and a framework like dbUnit.</p>
<p>Issues that can be addressed beautifully by project like <a href="http://www.springsource.org/spring-data/jpa">Spring data JPA</a>, check out my <a href="http://geowarin.wordpress.com/2013/01/21/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/">other article</a>.</p>
]]></content:encoded></item></channel></rss>