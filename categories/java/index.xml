<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Java on Geowarin</title><link>https://geowarin.com/categories/java/</link><description>Recent content in Java on Geowarin</description><generator>Hugo -- 0.138.0</generator><language>en</language><lastBuildDate>Fri, 31 Jan 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://geowarin.com/categories/java/index.xml" rel="self" type="application/rss+xml"/><item><title>A simple Spring Boot and Jersey Application</title><link>https://geowarin.com/a-simple-spring-boot-and-jersey-application/</link><pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate><guid>https://geowarin.com/a-simple-spring-boot-and-jersey-application/</guid><description>How to setup a simple spring-boot and jersey application</description><content:encoded><![CDATA[<p>Spring boot RC1 <a href="https://spring.io/blog/2014/01/22/spring-boot-1-0-0-rc1-released">is available</a>.</p>
<p><em>Update</em> : <a href="https://spring.io/blog/2014/02/12/spring-boot-1-0-0-rc2-released">RC3 released</a> I updated the project.</p>
<p>It takes spring development and fast prototyping to a whole new level by taking care of all the dependencies for you, auto-detecting your configuration, providing an executable jar (great for deploying in the cloud), and much more.</p>
<p>In this post we&rsquo;ll see how to integrate spring-boot with jersey, including testing of Jersey controllers with <a href="https://jersey.java.net/documentation/latest/test-framework.html">jersey-test</a>.</p>
<p>Of course, the source code is available <a href="https://github.com/geowarin/springboot-jersey">on my github</a>.</p>
<h2 id="setting-up-spring-boot">Setting up spring-boot</h2>
<p><a href="http://projects.spring.io/spring-boot/">Spring boot</a> aims towards simplicity and convention over configuration. First step is to include the necessary configuration in your pom.xml :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;parent&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;artifactId&gt;</span>spring-boot-starter-parent<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;version&gt;</span>1.0.0.RC3<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/parent&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;dependencies&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;artifactId&gt;</span>spring-boot-starter-web<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/dependencies&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;repositories&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;repository&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;id&gt;</span>spring-milestones<span style="color:#ff6ac1">&lt;/id&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;name&gt;</span>Spring Milestones<span style="color:#ff6ac1">&lt;/name&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;url&gt;</span>http://repo.spring.io/milestone<span style="color:#ff6ac1">&lt;/url&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;snapshots&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;enabled&gt;</span>false<span style="color:#ff6ac1">&lt;/enabled&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;/snapshots&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/repository&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/repositories&gt;</span>
</span></span></code></pre></div><p>One of the good ideas of spring boot is to provide all the &lsquo;boilerplate&rsquo; configuration for you by letting you inherit their parent configuration.</p>
<p>Then, you&rsquo;ll select a starter, in this case, we are going to develop a web application, so starter-web is fine.</p>
<p>Now, we&rsquo;ll create a main function for our application :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@EnableAutoConfiguration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">Application</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">main</span>(String<span style="color:#ff6ac1">[]</span> args) <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">new</span> SpringApplicationBuilder(Application.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">showBanner</span>(<span style="color:#ff6ac1">false</span>)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">run</span>(args);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We will just add an index.html file in the webapp directory and we should be ok.
With this configuration, you can run the main function and you&rsquo;ll see your index file.</p>
<p>Awesome.</p>
<h2 id="runnable-jar">Runnable jar</h2>
<p>Spring boot allows you to package your application as a runnable jar. Include the following in your <code>pom.xml</code> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;build&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;plugins&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;plugin&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;/plugin&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/plugins&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/build&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;pluginRepositories&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;pluginRepository&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;id&gt;</span>spring-milestones<span style="color:#ff6ac1">&lt;/id&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;url&gt;</span>http://repo.spring.io/milestone<span style="color:#ff6ac1">&lt;/url&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/pluginRepository&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/pluginRepositories&gt;</span>
</span></span></code></pre></div><p>With this, when running <code>mvn package</code>, you will generate the runnable jar.
Just <code>java -jar</code> it to launch an embedded Tomcat containing your webapp!</p>
<h2 id="integrating-jersey">Integrating jersey</h2>
<p>Jersey has a spring support project <a href="https://jersey.java.net/documentation/latest/spring.html">jersey-spring-3</a>. Despite what its name suggests, the project is (still?) compatible with spring 4.0 so we&rsquo;ll use it.</p>
<p>It basically allows you to inject spring beans in your jersey controllers.</p>
<p>To complete our configuration we&rsquo;ll add the jersey servlet to our application together with a small class to configure it.</p>
<p>In the Application :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> ServletRegistrationBean <span style="color:#57c7ff">jerseyServlet</span>() {
</span></span><span style="display:flex;"><span>    ServletRegistrationBean registration <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ServletRegistrationBean(<span style="color:#ff6ac1">new</span> ServletContainer(), <span style="color:#5af78e">&#34;/rest/*&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">// our rest resources will be available in the path /rest/*</span>
</span></span><span style="display:flex;"><span>    registration.<span style="color:#57c7ff">addInitParameter</span>(ServletProperties.<span style="color:#57c7ff">JAXRS_APPLICATION_CLASS</span>, JerseyConfig.<span style="color:#57c7ff">class</span>.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> registration;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We also need to add the <code>@ComponentScan</code> annotation to find our spring services and components (including jersey)</p>
<p>Next, we&rsquo;ll create the JerseyConfig class :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">JerseyConfig</span> <span style="color:#ff5c57">extends</span> ResourceConfig {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">JerseyConfig</span>() {
</span></span><span style="display:flex;"><span>        register(RequestContextFilter.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>        packages(<span style="color:#5af78e">&#34;com.geowarin.rest&#34;</span>);
</span></span><span style="display:flex;"><span>        register(LoggingFilter.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here we are providing the package(s) in which our rest resources are.</p>
<p>Speaking about our rest resources, we&rsquo;ll create a simple one :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Path</span>(<span style="color:#5af78e">&#34;/&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RestResource</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@GET</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Produces</span>(MediaType.<span style="color:#57c7ff">APPLICATION_JSON</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Path</span>(<span style="color:#5af78e">&#34;/hello&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">hello</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;Hello World&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There you have it : the dreadful hello world !</p>
<p>In the <a href="https://github.com/geowarin/springboot-jersey">complete example</a>, I show you how to generate JSON from a domain class.</p>
<p>Basically all you have to do is provide classes with the <code>@XmlRootElement</code> annotation, add the getters and setters for the properties you want serialized and don&rsquo;t forget to provide a default constructor (see <a href="https://github.com/geowarin/springboot-jersey/blob/master/src/main/java/com/geowarin/domain/Message.java">here</a>).</p>
<p>To show that dependency injection works, we&rsquo;ll add a simple service :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Singleton</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MessageService</span> {
</span></span><span style="display:flex;"><span>    List<span style="color:#ff6ac1">&lt;</span>Message<span style="color:#ff6ac1">&gt;</span> messages <span style="color:#ff6ac1">=</span> Collections.<span style="color:#57c7ff">synchronizedList</span>(<span style="color:#ff6ac1">new</span> ArrayList<span style="color:#ff6ac1">&lt;</span>Message<span style="color:#ff6ac1">&gt;</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@PostConstruct</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">init</span>() {
</span></span><span style="display:flex;"><span>        messages.<span style="color:#57c7ff">add</span>(<span style="color:#ff6ac1">new</span> Message(<span style="color:#5af78e">&#34;Joe&#34;</span>, <span style="color:#5af78e">&#34;Hello&#34;</span>));
</span></span><span style="display:flex;"><span>        messages.<span style="color:#57c7ff">add</span>(<span style="color:#ff6ac1">new</span> Message(<span style="color:#5af78e">&#34;Jane&#34;</span>, <span style="color:#5af78e">&#34;Spring boot is cool !&#34;</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> List<span style="color:#ff6ac1">&lt;</span>Message<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">getMessages</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> messages;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can now autowire it to our Jersey controller!</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Path</span>(<span style="color:#5af78e">&#34;/&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RestResource</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> MessageService messageService;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@GET</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Produces</span>(MediaType.<span style="color:#57c7ff">APPLICATION_JSON</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Path</span>(<span style="color:#5af78e">&#34;/messages&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> List<span style="color:#ff6ac1">&lt;</span>Message<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">message</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> messageService.<span style="color:#57c7ff">getMessages</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><a href="http://www.eclipse.org/eclipselink/moxy.php">Moxy</a> will automatically convert
the returned result to JSON.</p>
<h2 id="testing">Testing</h2>
<p>Real programmers do tests. We want to test our controller right? There is a framework for that: <a href="https://jersey.java.net/documentation/latest/test-framework.html">jersey-test</a>.</p>
<p><em>The Problem?</em> it does not (yet) support annotated configuration.</p>
<p><del>I&rsquo;m providing a little hack of my own to override the <code>SpringComponentProvider</code> class of <em>jersey-spring3</em> and allow this configuration. See the class on github. It is important to place it in the same package as the original one.</del></p>
<p><em>Update</em> : I submitted a <a href="https://github.com/jersey/jersey/pull/59">pull request</a> which has been accepted by Jersey. I updated the project to use the 2.6 snapshot release of jersey which includes the modified <code>SpringComponentProvider</code>.</p>
<p>Now the test :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RestResourceTest</span> <span style="color:#ff5c57">extends</span> JerseyTest {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> Application <span style="color:#57c7ff">configure</span>() {
</span></span><span style="display:flex;"><span>        ApplicationContext context <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> AnnotationConfigApplicationContext(TestConfig.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> JerseyConfig()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">property</span>(<span style="color:#5af78e">&#34;contextConfig&#34;</span>, context);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testHello</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">final</span> String hello <span style="color:#ff6ac1">=</span> target(<span style="color:#5af78e">&#34;hello&#34;</span>).<span style="color:#57c7ff">request</span>().<span style="color:#57c7ff">get</span>(String.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>        assertThat(hello).<span style="color:#57c7ff">isEqualTo</span>(<span style="color:#5af78e">&#34;Hello World&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testMessages</span>() <span style="color:#ff5c57">throws</span> JSONException {
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">final</span> String messages <span style="color:#ff6ac1">=</span> target(<span style="color:#5af78e">&#34;messages&#34;</span>).<span style="color:#57c7ff">request</span>().<span style="color:#57c7ff">get</span>(String.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>        String expected <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;[ &#34;</span> <span style="color:#ff6ac1">+</span>
</span></span><span style="display:flex;"><span>                <span style="color:#5af78e">&#34;{ &#39;author&#39;: &#39;Joe&#39;, &#39;contents&#39;: &#39;Hello&#39;},&#34;</span> <span style="color:#ff6ac1">+</span>
</span></span><span style="display:flex;"><span>                <span style="color:#5af78e">&#34;{ &#39;author&#39;: &#39;Jane&#39;, &#39;contents&#39;: &#39;Spring boot is cool !&#39;}&#34;</span> <span style="color:#ff6ac1">+</span>
</span></span><span style="display:flex;"><span>                <span style="color:#5af78e">&#34;]&#34;</span>;
</span></span><span style="display:flex;"><span>        JSONAssert.<span style="color:#57c7ff">assertEquals</span>(expected, messages, JSONCompareMode.<span style="color:#57c7ff">LENIENT</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Jersey Test will automatically select a provider from your classpath, in the example I&rsquo;m using the in memory provider which I believe to be the fastest but you can also use <a href="https://grizzly.java.net/">grizzly</a> and others instead.</p>
<p>I&rsquo;m using <a href="https://github.com/skyscreamer/JSONassert">JSONassert</a> to test json results.</p>
<p>In the example, we are providing a simple, lighter <code>TestConfig</code> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ComponentScan</span>(basePackageClasses <span style="color:#ff6ac1">=</span> RestResource.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">TestConfig</span> {
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Testing with Jersey Test is fast and intuitive.</p>
<p>Spring boot is a nice addition to the spring ecosystem. Now that everything should be accessible from the cloud, so should be spring webapps !</p>
]]></content:encoded></item><item><title>Fun with xpath</title><link>https://geowarin.com/fun-with-xpath/</link><pubDate>Thu, 30 Jan 2014 00:00:00 +0000</pubDate><guid>https://geowarin.com/fun-with-xpath/</guid><description>How to select nodes with xPath and keep the file structure of the original document in java with dom4j</description><content:encoded><![CDATA[<p>I had fun today at work when I had to design a program that allows users to select nodes with xPath but keep the same hierarchical structure as the original xml file.</p>
<p>The result with tests is available <a href="https://github.com/geowarin/xpath-dom4j">on github</a>.</p>
<p>For instance, the following xPath <code>/persons/person[@age &gt; 18]/project[@language = 'java']</code>, would select the lines highlighted in the file below :</p>
<script src="https://gist.github.com/geowarin/8720930.js"></script>

<p>Normal xPath result would be a list of nodes like that</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;project</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#39;dom4j&#39;</span> <span style="color:#57c7ff">language=</span><span style="color:#5af78e">&#39;java&#39;</span><span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;project</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#39;dom4j&#39;</span> <span style="color:#57c7ff">language=</span><span style="color:#5af78e">&#39;java&#39;</span><span style="color:#ff6ac1">/&gt;</span>
</span></span></code></pre></div><p>But the desired output should look like this :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;persons&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;person</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#39;Joe&#39;</span> <span style="color:#57c7ff">age=</span><span style="color:#5af78e">&#39;26&#39;</span><span style="color:#ff6ac1">&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">&lt;project</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#39;dom4j&#39;</span> <span style="color:#57c7ff">language=</span><span style="color:#5af78e">&#39;java&#39;</span><span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;/person&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;person</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#39;Jane&#39;</span> <span style="color:#57c7ff">age=</span><span style="color:#5af78e">&#39;23&#39;</span><span style="color:#ff6ac1">&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">&lt;project</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#39;dom4j&#39;</span> <span style="color:#57c7ff">language=</span><span style="color:#5af78e">&#39;java&#39;</span><span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;/person&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/persons&gt;</span>
</span></span></code></pre></div><p>So I decided to write a small class to handle this use case :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">XPathFilter</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> Document xmlDocument;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">XPathFilter</span>(String xml) {
</span></span><span style="display:flex;"><span>        xmlDocument <span style="color:#ff6ac1">=</span> readXml(xml);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">filter</span>(String xPath) {
</span></span><span style="display:flex;"><span>        Element root <span style="color:#ff6ac1">=</span> xmlDocument.<span style="color:#57c7ff">getRootElement</span>();
</span></span><span style="display:flex;"><span>        List<span style="color:#ff6ac1">&lt;</span>Element<span style="color:#ff6ac1">&gt;</span> resultNodes <span style="color:#ff6ac1">=</span> root.<span style="color:#57c7ff">selectNodes</span>(xPath);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">if</span> (resultNodes.<span style="color:#57c7ff">isEmpty</span>()) {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">throw</span> <span style="color:#ff6ac1">new</span> IllegalStateException(<span style="color:#5af78e">&#34;No result found for xpath &#34;</span> <span style="color:#ff6ac1">+</span> xPath);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        deleteNonResultNodes(resultNodes);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> write(root);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">deleteNonResultNodes</span>(List<span style="color:#ff6ac1">&lt;</span>Element<span style="color:#ff6ac1">&gt;</span> resultNodes) {
</span></span><span style="display:flex;"><span>        Set<span style="color:#ff6ac1">&lt;</span>Element<span style="color:#ff6ac1">&gt;</span> nodesToKeep <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> HashSet<span style="color:#ff6ac1">&lt;&gt;</span>(resultNodes);
</span></span><span style="display:flex;"><span>        Set<span style="color:#ff6ac1">&lt;</span>Element<span style="color:#ff6ac1">&gt;</span> parents;
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">do</span> {
</span></span><span style="display:flex;"><span>            parents <span style="color:#ff6ac1">=</span> getParentNodes(nodesToKeep);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">for</span> (Element parent : parents) {
</span></span><span style="display:flex;"><span>                List<span style="color:#ff6ac1">&lt;</span>Element<span style="color:#ff6ac1">&gt;</span> children <span style="color:#ff6ac1">=</span> parent.<span style="color:#57c7ff">elements</span>();
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">for</span> (Element child : children) {
</span></span><span style="display:flex;"><span>                    <span style="color:#ff6ac1">if</span> (<span style="color:#ff6ac1">!</span>nodesToKeep.<span style="color:#57c7ff">contains</span>(child)) {
</span></span><span style="display:flex;"><span>                        parent.<span style="color:#57c7ff">remove</span>(child);
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            nodesToKeep <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> HashSet<span style="color:#ff6ac1">&lt;&gt;</span>(parents);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">while</span> (<span style="color:#ff6ac1">!</span>parents.<span style="color:#57c7ff">isEmpty</span>());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> Set<span style="color:#ff6ac1">&lt;</span>Element<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">getParentNodes</span>(Collection<span style="color:#ff6ac1">&lt;</span>Element<span style="color:#ff6ac1">&gt;</span> nodes) {
</span></span><span style="display:flex;"><span>        Set<span style="color:#ff6ac1">&lt;</span>Element<span style="color:#ff6ac1">&gt;</span> parents <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> HashSet<span style="color:#ff6ac1">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">for</span> (Element node : nodes) {
</span></span><span style="display:flex;"><span>            Element parent <span style="color:#ff6ac1">=</span> node.<span style="color:#57c7ff">getParent</span>();
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">if</span> (parent <span style="color:#ff6ac1">!=</span> <span style="color:#ff6ac1">null</span>) {
</span></span><span style="display:flex;"><span>                parents.<span style="color:#57c7ff">add</span>(parent);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> parents;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> Document <span style="color:#57c7ff">readXml</span>(String xml) {
</span></span><span style="display:flex;"><span>        Document document;
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">try</span> (StringReader reader <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> StringReader(xml)) {
</span></span><span style="display:flex;"><span>            DocumentFactory factory <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> DocumentFactory();
</span></span><span style="display:flex;"><span>            SAXReader saxReader <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> SAXReader();
</span></span><span style="display:flex;"><span>            saxReader.<span style="color:#57c7ff">setDocumentFactory</span>(factory);
</span></span><span style="display:flex;"><span>            document <span style="color:#ff6ac1">=</span> saxReader.<span style="color:#57c7ff">read</span>(reader);
</span></span><span style="display:flex;"><span>        } <span style="color:#ff6ac1">catch</span> (DocumentException e) {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">throw</span> <span style="color:#ff6ac1">new</span> IllegalArgumentException(e);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> document;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> String <span style="color:#57c7ff">write</span>(Element rootElement) {
</span></span><span style="display:flex;"><span>        Document documentOut <span style="color:#ff6ac1">=</span> DocumentHelper.<span style="color:#57c7ff">createDocument</span>();
</span></span><span style="display:flex;"><span>        documentOut.<span style="color:#57c7ff">add</span>((Element) rootElement.<span style="color:#57c7ff">clone</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        StringWriter writer <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> StringWriter();
</span></span><span style="display:flex;"><span>        XMLWriter xmlWriter <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> XMLWriter(writer, OutputFormat.<span style="color:#57c7ff">createPrettyPrint</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>            xmlWriter.<span style="color:#57c7ff">write</span>(documentOut);
</span></span><span style="display:flex;"><span>        } <span style="color:#ff6ac1">catch</span> (IOException e) {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">throw</span> <span style="color:#ff6ac1">new</span> IllegalStateException(e);
</span></span><span style="display:flex;"><span>        } <span style="color:#ff6ac1">finally</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>                xmlWriter.<span style="color:#57c7ff">close</span>();
</span></span><span style="display:flex;"><span>            } <span style="color:#ff6ac1">catch</span> (IOException ignored) {
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> writer.<span style="color:#57c7ff">toString</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>readXml</code> and <code>write</code> methods are just standard <em>dom4j</em> stuff.</p>
<p>The real code lies in the <code>deleteNonResultNodes</code> function which traverses XML nodes
from the results to the root.
On each level, we will look at the parents of the current nodes (the selected ones at first) and delete every child which is not a result.</p>
<p>The parents will become the current nodes and will keep on until we reach the root.
At this point we would have kept only the xml structure that actually wrap our xPath results.</p>
<p>That&rsquo;s all folks ! Check out the result <a href="https://github.com/geowarin/xpath-dom4j">on github</a>, unit tests included.</p>
]]></content:encoded></item><item><title>Generate DDL with hibernate</title><link>https://geowarin.com/generate-ddl-with-hibernate/</link><pubDate>Mon, 21 Jan 2013 23:44:07 +0000</pubDate><guid>https://geowarin.com/generate-ddl-with-hibernate/</guid><description>How to generate SQL schemas with hibernate built-in classes</description><content:encoded><![CDATA[<p>I don&rsquo;t know if it&rsquo;s a well known feature but there is a bunch of methods on hibernate <a href="http://docs.jboss.org/hibernate/orm/3.5/api/org/hibernate/cfg/Configuration.html">Configuration</a> class which will produce <a href="http://en.wikipedia.org/wiki/Data_definition_language">DDL</a> for your database according to the dialect in use.</p>
<p>In this blog post we will see how to use those methods to generate a DDL script to set up our database and get rid of those annoying DBAs (just kidding, always review these scripts, they&rsquo;re not production ready).</p>
<p>The source code of this article is available on github : <a href="https://github.com/geowarin/hibernate-examples/tree/master/generate-ddl-hibernate">https://github.com/geowarin/hibernate-examples/tree/master/generate-ddl-hibernate</a></p>
<p>So the goal of this article is, given a dialect and a package to scan containing our entities, generate a DDL.</p>
<p>With hibernate in the classpath, you can create a new configuration like this :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>hibernateConfiguration <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Configuration();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>hibernateConfiguration.<span style="color:#57c7ff">addAnnotatedClass</span>(myEntity.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>hibernateConfiguration.<span style="color:#57c7ff">addAnnotatedClass</span>(mySecondEntity.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>hibernateConfiguration.<span style="color:#57c7ff">setProperty</span>(AvailableSettings.<span style="color:#57c7ff">DIALECT</span>, dialect);
</span></span></code></pre></div><p>That&rsquo;s cool but pretty boring.
Cooler is to use the <a href="http://code.google.com/p/reflections/">reflections project</a> to provide some package scanning.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">private</span> Configuration <span style="color:#57c7ff">createHibernateConfig</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	hibernateConfiguration <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Configuration();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">final</span> Reflections reflections <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Reflections(entityPackage);
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">for</span> (Class<span style="color:#ff6ac1">&lt;?&gt;</span> cl : reflections.<span style="color:#57c7ff">getTypesAnnotatedWith</span>(MappedSuperclass.<span style="color:#57c7ff">class</span>)) {
</span></span><span style="display:flex;"><span>		hibernateConfiguration.<span style="color:#57c7ff">addAnnotatedClass</span>(cl);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">for</span> (Class<span style="color:#ff6ac1">&lt;?&gt;</span> cl : reflections.<span style="color:#57c7ff">getTypesAnnotatedWith</span>(Entity.<span style="color:#57c7ff">class</span>)) {
</span></span><span style="display:flex;"><span>		hibernateConfiguration.<span style="color:#57c7ff">addAnnotatedClass</span>(cl);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	hibernateConfiguration.<span style="color:#57c7ff">setProperty</span>(AvailableSettings.<span style="color:#57c7ff">DIALECT</span>, dialect);
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">return</span> hibernateConfiguration;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then you can get your creation scripts lines like that :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>String<span style="color:#ff6ac1">[]</span> createSQL <span style="color:#ff6ac1">=</span> hibernateConfiguration.<span style="color:#57c7ff">generateSchemaCreationScript</span>(hibDialect);
</span></span><span style="display:flex;"><span>String<span style="color:#ff6ac1">[]</span> dropSQL <span style="color:#ff6ac1">=</span> hibernateConfiguration.<span style="color:#57c7ff">generateDropSchemaScript</span>(hibDialect);
</span></span></code></pre></div><p>For the create script, each line will contain either a database creation or a constraint.</p>
<p>So here is the final result :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * This class will create an hibernate {@link Configuration} with the given dialect and will scan provided
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * package for {@link MappedSuperclass} and {@link Entity}.
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * You can then use the export methods to generate your schema DDL.
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> *
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * @author Geoffroy Warin (https://github.com/geowarin)
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> *
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">HibernateExporter</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(HibernateExporter.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> String dialect;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> String entityPackage;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">boolean</span> generateCreateQueries <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">true</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">boolean</span> generateDropQueries <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">false</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> Configuration hibernateConfiguration;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#57c7ff">HibernateExporter</span>(String dialect, String entityPackage) {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">dialect</span> <span style="color:#ff6ac1">=</span> dialect;
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">entityPackage</span> <span style="color:#ff6ac1">=</span> entityPackage;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		hibernateConfiguration <span style="color:#ff6ac1">=</span> createHibernateConfig();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">export</span>(OutputStream out, <span style="color:#9aedfe">boolean</span> generateCreateQueries, <span style="color:#9aedfe">boolean</span> generateDropQueries) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		Dialect hibDialect <span style="color:#ff6ac1">=</span> Dialect.<span style="color:#57c7ff">getDialect</span>(hibernateConfiguration.<span style="color:#57c7ff">getProperties</span>());
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">try</span> (PrintWriter writer <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> PrintWriter(out)) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#ff6ac1">if</span> (generateCreateQueries) {
</span></span><span style="display:flex;"><span>				String<span style="color:#ff6ac1">[]</span> createSQL <span style="color:#ff6ac1">=</span> hibernateConfiguration.<span style="color:#57c7ff">generateSchemaCreationScript</span>(hibDialect);
</span></span><span style="display:flex;"><span>				write(writer, createSQL, FormatStyle.<span style="color:#57c7ff">DDL</span>.<span style="color:#57c7ff">getFormatter</span>());
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>			<span style="color:#ff6ac1">if</span> (generateDropQueries) {
</span></span><span style="display:flex;"><span>				String<span style="color:#ff6ac1">[]</span> dropSQL <span style="color:#ff6ac1">=</span> hibernateConfiguration.<span style="color:#57c7ff">generateDropSchemaScript</span>(hibDialect);
</span></span><span style="display:flex;"><span>				write(writer, dropSQL, FormatStyle.<span style="color:#57c7ff">DDL</span>.<span style="color:#57c7ff">getFormatter</span>());
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">export</span>(File exportFile) <span style="color:#ff5c57">throws</span> FileNotFoundException {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		export(<span style="color:#ff6ac1">new</span> FileOutputStream(exportFile), generateCreateQueries, generateDropQueries);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">exportToConsole</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		export(System.<span style="color:#57c7ff">out</span>, generateCreateQueries, generateDropQueries);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">write</span>(PrintWriter writer, String<span style="color:#ff6ac1">[]</span> lines, Formatter formatter) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">for</span> (String string : lines)
</span></span><span style="display:flex;"><span>			writer.<span style="color:#57c7ff">println</span>(formatter.<span style="color:#57c7ff">format</span>(string) <span style="color:#ff6ac1">+</span> <span style="color:#5af78e">&#34;;&#34;</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> Configuration <span style="color:#57c7ff">createHibernateConfig</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		hibernateConfiguration <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Configuration();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff5c57">final</span> Reflections reflections <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Reflections(entityPackage);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">for</span> (Class<span style="color:#ff6ac1">&lt;?&gt;</span> cl : reflections.<span style="color:#57c7ff">getTypesAnnotatedWith</span>(MappedSuperclass.<span style="color:#57c7ff">class</span>)) {
</span></span><span style="display:flex;"><span>			hibernateConfiguration.<span style="color:#57c7ff">addAnnotatedClass</span>(cl);
</span></span><span style="display:flex;"><span>			log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;Mapped = &#34;</span> <span style="color:#ff6ac1">+</span> cl.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">for</span> (Class<span style="color:#ff6ac1">&lt;?&gt;</span> cl : reflections.<span style="color:#57c7ff">getTypesAnnotatedWith</span>(Entity.<span style="color:#57c7ff">class</span>)) {
</span></span><span style="display:flex;"><span>			hibernateConfiguration.<span style="color:#57c7ff">addAnnotatedClass</span>(cl);
</span></span><span style="display:flex;"><span>			log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;Mapped = &#34;</span> <span style="color:#ff6ac1">+</span> cl.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		hibernateConfiguration.<span style="color:#57c7ff">setProperty</span>(AvailableSettings.<span style="color:#57c7ff">DIALECT</span>, dialect);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> hibernateConfiguration;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">boolean</span> <span style="color:#57c7ff">isGenerateDropQueries</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> generateDropQueries;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">setGenerateDropQueries</span>(<span style="color:#9aedfe">boolean</span> generateDropQueries) {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">generateDropQueries</span> <span style="color:#ff6ac1">=</span> generateDropQueries;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> Configuration <span style="color:#57c7ff">getHibernateConfiguration</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> hibernateConfiguration;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">setHibernateConfiguration</span>(Configuration hibernateConfiguration) {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">hibernateConfiguration</span> <span style="color:#ff6ac1">=</span> hibernateConfiguration;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And its usage :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">main</span>(String<span style="color:#ff6ac1">[]</span> args) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e">//		HibernateExporter exporter = new HibernateExporter(&#34;org.hibernate.dialect.HSQLDialect&#34;, &#34;com.geowarin.model&#34;);</span>
</span></span><span style="display:flex;"><span>	HibernateExporter exporter <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> HibernateExporter(<span style="color:#5af78e">&#34;org.hibernate.dialect.MySQL5Dialect&#34;</span>, <span style="color:#5af78e">&#34;com.geowarin.model&#34;</span>);
</span></span><span style="display:flex;"><span>	exporter.<span style="color:#57c7ff">exportToConsole</span>();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This will produce this kind of output :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span> <span style="color:#ff6ac1">create</span> <span style="color:#ff6ac1">table</span> groups (
</span></span><span style="display:flex;"><span>        id <span style="color:#ff5c57">bigint</span> <span style="color:#ff6ac1">not</span> <span style="color:#ff6ac1">null</span> auto_increment,
</span></span><span style="display:flex;"><span>        createdOn datetime,
</span></span><span style="display:flex;"><span>        modifiedOn datetime,
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">version</span> <span style="color:#ff5c57">bigint</span> <span style="color:#ff6ac1">not</span> <span style="color:#ff6ac1">null</span>,
</span></span><span style="display:flex;"><span>        name <span style="color:#ff5c57">varchar</span>(<span style="color:#ff9f43">50</span>) <span style="color:#ff6ac1">not</span> <span style="color:#ff6ac1">null</span>,
</span></span><span style="display:flex;"><span>        user_id <span style="color:#ff5c57">bigint</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">primary</span> <span style="color:#ff6ac1">key</span> (id)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">create</span> <span style="color:#ff6ac1">table</span> users (
</span></span><span style="display:flex;"><span>        id <span style="color:#ff5c57">bigint</span> <span style="color:#ff6ac1">not</span> <span style="color:#ff6ac1">null</span> auto_increment,
</span></span><span style="display:flex;"><span>        createdOn datetime,
</span></span><span style="display:flex;"><span>        modifiedOn datetime,
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">version</span> <span style="color:#ff5c57">bigint</span> <span style="color:#ff6ac1">not</span> <span style="color:#ff6ac1">null</span>,
</span></span><span style="display:flex;"><span>        email <span style="color:#ff5c57">varchar</span>(<span style="color:#ff9f43">255</span>) <span style="color:#ff6ac1">not</span> <span style="color:#ff6ac1">null</span>,
</span></span><span style="display:flex;"><span>        password <span style="color:#ff5c57">varchar</span>(<span style="color:#ff9f43">80</span>) <span style="color:#ff6ac1">not</span> <span style="color:#ff6ac1">null</span>,
</span></span><span style="display:flex;"><span>        user_name <span style="color:#ff5c57">varchar</span>(<span style="color:#ff9f43">50</span>) <span style="color:#ff6ac1">not</span> <span style="color:#ff6ac1">null</span> <span style="color:#ff6ac1">unique</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">primary</span> <span style="color:#ff6ac1">key</span> (id)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">alter</span> <span style="color:#ff6ac1">table</span> groups
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">add</span> <span style="color:#ff6ac1">index</span> FKB63DD9D4CA46C100 (user_id),
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">add</span> <span style="color:#ff6ac1">constraint</span> FKB63DD9D4CA46C100
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">foreign</span> <span style="color:#ff6ac1">key</span> (user_id)
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">references</span> users (id);
</span></span></code></pre></div><p>As I said, it is not suitable for your production environment but it provides some starter DDL if you are the code first kind (and don&rsquo;t want to use hibernate-tools).</p>
]]></content:encoded></item><item><title>Using Spring Data JPA in a Java SE environment and run tests with dbUnit</title><link>https://geowarin.com/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/</link><pubDate>Mon, 21 Jan 2013 15:25:11 +0000</pubDate><guid>https://geowarin.com/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/</guid><description>Demonstration of how to set up spring data JPA in java SE and test with dbUnit</description><content:encoded><![CDATA[<p>This blog post follows my previous articles on using <a href="http://geowarin.wordpress.com/2013/01/20/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/">hibernate as a standalone JPA provider</a> and how to use <a href="http://geowarin.wordpress.com/2013/01/20/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/">spring in a Java SE</a> environment.</p>
<p>In this post, I will show you how to use <a href="http://geowarin.wordpress.com/2013/01/21/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/">Spring Data JPA</a>, a great project which improves your productivity by generating all CRUD operations for you. Then we will use <a href="http://springtestdbunit.github.com/spring-test-dbunit/">springtestdbunit</a> to run some very clean tests on our database with spring and <a href="http://www.dbunit.org/">dbUnit</a>.</p>
<p>The code source of this example is available on github : <a href="https://github.com/geowarin/hibernate-examples/tree/master/standalone-data-jpa">https://github.com/geowarin/hibernate-examples/tree/master/standalone-data-jpa</a></p>
<h2 id="what-is-spring-data-jpa">What is Spring Data JPA?</h2>
<p>Are you tired of always implementing the findOne(long id), findAll(), save()&hellip; methods on your repositories? Having to come up with clever tricks to generate a generic DAO?</p>
<p>Then give Spring Data JPA a try ! This project lets you implement a very simple interface for your repositories and takes care of all the rest, allowing you to focus on your real queries.</p>
<h2 id="the-configuration">The configuration</h2>
<p>The configuration we will set up here is pretty similar to the one we used in the <a href="http://geowarin.wordpress.com/2013/01/20/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/">spring standalone article.</a> We will just add a bunch of classes to make use of spring data jpa :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableJpaRepositories</span>(<span style="color:#5af78e">&#34;com.geowarin.standalonedatajpa.repository&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableTransactionManagement</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">StandaloneDataJpaConfig</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> DataSource <span style="color:#57c7ff">dataSource</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> EmbeddedDatabaseBuilder().<span style="color:#57c7ff">setType</span>(EmbeddedDatabaseType.<span style="color:#57c7ff">HSQL</span>)
</span></span><span style="display:flex;"><span>				.<span style="color:#57c7ff">addScript</span>(<span style="color:#5af78e">&#34;classpath:sql/schema.sql&#34;</span>)
</span></span><span style="display:flex;"><span>				.<span style="color:#57c7ff">addScript</span>(<span style="color:#5af78e">&#34;classpath:sql/import-users.sql&#34;</span>)
</span></span><span style="display:flex;"><span>				.<span style="color:#57c7ff">build</span>();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> PlatformTransactionManager <span style="color:#57c7ff">transactionManager</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		JpaTransactionManager txManager <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> JpaTransactionManager();
</span></span><span style="display:flex;"><span>		txManager.<span style="color:#57c7ff">setEntityManagerFactory</span>(entityManagerFactory());
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> txManager;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> HibernateExceptionTranslator <span style="color:#57c7ff">hibernateExceptionTranslator</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> HibernateExceptionTranslator();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> EntityManagerFactory <span style="color:#57c7ff">entityManagerFactory</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// will set the provider to &#39;org.hibernate.ejb.HibernatePersistence&#39;</span>
</span></span><span style="display:flex;"><span>		HibernateJpaVendorAdapter vendorAdapter <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> HibernateJpaVendorAdapter();
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// will set hibernate.show_sql to &#39;true&#39;</span>
</span></span><span style="display:flex;"><span>		vendorAdapter.<span style="color:#57c7ff">setShowSql</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// if set to true, will set hibernate.hbm2ddl.auto to &#39;update&#39;</span>
</span></span><span style="display:flex;"><span>		vendorAdapter.<span style="color:#57c7ff">setGenerateDdl</span>(<span style="color:#ff6ac1">false</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		LocalContainerEntityManagerFactoryBean factory <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> LocalContainerEntityManagerFactoryBean();
</span></span><span style="display:flex;"><span>		factory.<span style="color:#57c7ff">setJpaVendorAdapter</span>(vendorAdapter);
</span></span><span style="display:flex;"><span>		factory.<span style="color:#57c7ff">setPackagesToScan</span>(<span style="color:#5af78e">&#34;com.geowarin.standalonedatajpa.model&#34;</span>);
</span></span><span style="display:flex;"><span>		factory.<span style="color:#57c7ff">setDataSource</span>(dataSource());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// This will trigger the creation of the entity manager factory</span>
</span></span><span style="display:flex;"><span>		factory.<span style="color:#57c7ff">afterPropertiesSet</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> factory.<span style="color:#57c7ff">getObject</span>();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> MainBean <span style="color:#57c7ff">mainBean</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> MainBean();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>With this configuration, you won&rsquo;t even need a <em>persistence.xml</em> file ! Compared to our <a href="http://geowarin.wordpress.com/2013/01/20/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/">previous example</a> however, one cannot make use of <em>hibernate.hbm2ddl.import_files</em> property to import SQL scripts with hibernate because <em>hibernate.hbm2ddl.auto</em> must be set to either <em>create</em> or <em>create-drop</em>.</p>
<p>That&rsquo;s ok we will generate some very tiny scripts to set up the schema and the data in our database (and make our DBA happy, a thing that is never to be disregarded :))</p>
<hr>
<p><strong>Hint</strong> : If this is a real blocker for you, you could setGenrateDdl to false and maintain a simple <strong>hibernate.properties</strong> file like this one</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-properties" data-lang="properties"><span style="display:flex;"><span><span style="color:#57c7ff">hibernate.hbm2ddl.auto</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">create</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">hibernate.hbm2ddl.import_files</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">sql/import-users.sql</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">hibernate.format_sql</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">true</span>
</span></span></code></pre></div><p>That&rsquo;s because hibernate will always look for a <a href="http://docs.jboss.org/hibernate/core/4.1/manual/en-US/html/ch03.html#configuration-optional-properties">hibernate.properties</a> file in the classpath to override you persistence properties.</p>
<hr>
<p>Note the use of <strong>@EnableJpaRepositories</strong> that will tell spring data in which packages our repositories can be found.</p>
<p><strong>@EnableTransactionManagement</strong> is a replacement of the tag <code>&lt;tx:annotation-driven /&gt;</code>.</p>
<p>We can set up the <a href="http://static.springsource.org/spring-framework/docs/3.2.0.RC1/api/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.html">LocalContainerEntityManagerFactoryBean </a>to use a package to scan our entities for us, no need to list them all.</p>
<p>The rest is pretty straight forward I believe.</p>
<p>Note that by default, spring data JPA will try to locate your <em>persistence.xml</em> so the two approaches are completely compatible, for this example however we will go for a full xml-less configuration.</p>
<h2 id="one-entity-one-interface-and-we-are-ready">One entity, one interface and we are ready</h2>
<p>We have one very simple entity :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Table</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;users&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Entity</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">User</span> <span style="color:#ff5c57">implements</span> Serializable {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> <span style="color:#9aedfe">long</span> serialVersionUID <span style="color:#ff6ac1">=</span> 1L;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Id</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@GeneratedValue</span>(strategy<span style="color:#ff6ac1">=</span>GenerationType.<span style="color:#57c7ff">AUTO</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">long</span> id;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Column</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;name&#34;</span>, nullable <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">false</span>, unique<span style="color:#ff6ac1">=</span><span style="color:#ff6ac1">true</span>, length<span style="color:#ff6ac1">=</span>50)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> String name;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// getters and setters omitted</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now let&rsquo;s use spring data to generate a repository for us :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">interface</span> <span style="color:#f3f99d">UserRepository</span>  <span style="color:#ff5c57">extends</span> JpaRepository<span style="color:#ff6ac1">&lt;</span>User, Long<span style="color:#ff6ac1">&gt;</span> {
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Tadaa! Is that it? Yes, you can now use your repository in our <strong>MainBean</strong> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MainBean</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> UserRepository userRepository;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(MainBean.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">start</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// Spring Data JPA CRUD operations are transactionnal by default !</span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#transactions</span>
</span></span><span style="display:flex;"><span>		User newUser <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> User();
</span></span><span style="display:flex;"><span>		newUser.<span style="color:#57c7ff">setName</span>(<span style="color:#5af78e">&#34;inserted&#34;</span>);
</span></span><span style="display:flex;"><span>		userRepository.<span style="color:#57c7ff">save</span>(newUser);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		List all <span style="color:#ff6ac1">=</span> userRepository.<span style="color:#57c7ff">findAll</span>();
</span></span><span style="display:flex;"><span>		log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;users=&#34;</span> <span style="color:#ff6ac1">+</span> all);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Pretty sweet. But that&rsquo;s not all. You now have three different ways of writing new queries with Spring data :</p>
<ol>
<li>
<p>Use <a href="https://blogs.oracle.com/JPQL01/entry/named_query_in_java_persistence">named queries</a></p>
</li>
<li>
<p><a href="http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#jpa.query-methods.at-query">Use the @Query annotation</a> to write your own JPQL queries</p>
</li>
<li>
<p>Use the awesome <a href="http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#jpa.query-methods.query-creation">query creation by method name</a></p>
</li>
</ol>
<p>Let&rsquo;s review the last two options (I don&rsquo;t really like named queries but have a look a the <a href="http://static.springsource.org/spring-data/jpa/docs/1.2.0.RELEASE/reference/html/#jpa.query-methods.named-queries">documentation</a> if you want)</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">interface</span> <span style="color:#f3f99d">UserRepository</span>  <span style="color:#ff5c57">extends</span> JpaRepository<span style="color:#ff6ac1">&lt;</span>User, Long<span style="color:#ff6ac1">&gt;</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Demonstrate query creation by method name</span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#jpa.query-methods.query-creation</span>
</span></span><span style="display:flex;"><span>	User <span style="color:#57c7ff">findByName</span>(String name);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Demonstrate the use of a simple JPQL query</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Query</span>(<span style="color:#5af78e">&#34;from User u where upper(u.name) = upper(:name)&#34;</span>)
</span></span><span style="display:flex;"><span>	User <span style="color:#57c7ff">findByNameIgnoreCase</span>(<span style="color:#ff9f43">@Param</span>(<span style="color:#5af78e">&#34;name&#34;</span>) String name);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="ok-lets-test-it">Ok let&rsquo;s test it</h2>
<p>Have a look at the unit test for our repository :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@RunWith</span>(SpringJUnit4ClassRunner.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ContextConfiguration</span>(classes <span style="color:#ff6ac1">=</span> { StandaloneDataJpaConfig.<span style="color:#57c7ff">class</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@TestExecutionListeners</span>({ DependencyInjectionTestExecutionListener.<span style="color:#57c7ff">class</span>,
</span></span><span style="display:flex;"><span>	DbUnitTestExecutionListener.<span style="color:#57c7ff">class</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">UserRepositoryTest</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> UserRepository userRepository;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@DatabaseSetup</span>(<span style="color:#5af78e">&#34;userAdminData.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFindAdmin</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User admin <span style="color:#ff6ac1">=</span> userRepository.<span style="color:#57c7ff">findOne</span>(1L);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(admin);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;admin&#34;</span>, admin.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@DatabaseSetup</span>(<span style="color:#5af78e">&#34;userAdminData.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFindByName</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User admin <span style="color:#ff6ac1">=</span> userRepository.<span style="color:#57c7ff">findByName</span>(<span style="color:#5af78e">&#34;admin&#34;</span>);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(admin);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;admin&#34;</span>, admin.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@DatabaseSetup</span>(<span style="color:#5af78e">&#34;userAdminData.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFindByNameIgnoreCase</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User admin <span style="color:#ff6ac1">=</span> userRepository.<span style="color:#57c7ff">findByNameIgnoreCase</span>(<span style="color:#5af78e">&#34;AdMIn&#34;</span>);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(admin);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;admin&#34;</span>, admin.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@DatabaseSetup</span>(<span style="color:#5af78e">&#34;userAdminData.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@ExpectedDatabase</span>(<span style="color:#5af78e">&#34;afterInsert.xml&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testInsertUser</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User newUser <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> User();
</span></span><span style="display:flex;"><span>		newUser.<span style="color:#57c7ff">setName</span>(<span style="color:#5af78e">&#34;inserted&#34;</span>);
</span></span><span style="display:flex;"><span>		userRepository.<span style="color:#57c7ff">save</span>(newUser);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We use springtestdbunit to be able to use annotations to set up and verify the database state after each test. Here are our two datasets.</p>
<p>userAdminData.xml :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#78787e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;dataset&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;users</span> <span style="color:#57c7ff">id=</span><span style="color:#5af78e">&#34;1&#34;</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;admin&#34;</span> <span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/dataset&gt;</span>
</span></span></code></pre></div><p>afterInsert.xml :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#78787e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;dataset&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;users</span> <span style="color:#57c7ff">id=</span><span style="color:#5af78e">&#34;1&#34;</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;admin&#34;</span> <span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff6ac1">&lt;users</span> <span style="color:#57c7ff">id=</span><span style="color:#5af78e">&#34;2&#34;</span> <span style="color:#57c7ff">name=</span><span style="color:#5af78e">&#34;inserted&#34;</span> <span style="color:#ff6ac1">/&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/dataset&gt;</span>
</span></span></code></pre></div><p>Using the <strong>@ExpectedDatabase</strong> annotation is really awesome, dbUnit will generate very informative messages if your test failed.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Spring Data JPA is really a good piece of software. We did not go into too much details but know that it will handle pagination, type-safe queries, is compatible with <a href="http://www.querydsl.com/">query-dsl</a> and much more.
It is suitable for a Java SE environment which can come in handy if we want to run some quick tests on our database.</p>
<p>Finally, springtestdbunit is a very nice-to-have feature which will make your repository unit tests a real breeze to write.</p>
<p>Lastly, I will point out that making use of the <a href="http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/#transactions">transational behaviour of spring data</a> CRUD operation is not really a good practice but we did it all the same for the sake of simplicity.
A better approach would be to use <strong>@Service</strong> spring beans to encapsulate one or several operations.</p>
]]></content:encoded></item><item><title>Using Hibernate as a JPA provider in a Java SE environment and run tests with dbUnit</title><link>https://geowarin.com/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/</link><pubDate>Sun, 20 Jan 2013 16:28:23 +0000</pubDate><guid>https://geowarin.com/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/</guid><description>Demonstration of how to set up hibernate in a java SE application and test with dbUnit</description><content:encoded><![CDATA[<p>Sometimes it can be useful to use JPA in a minimal environment to test your model or just if you&rsquo;re curious of how things work in your DAO layer behind the scenes. In this blog post, we will create a simple project then see how you can use <a href="http://www.dbunit.org/">dbUnit </a>to run some unit tests on your database.</p>
<p>The source code of this blog post is available on my github : <a href="https://github.com/geowarin/hibernate-examples/tree/master/hibernate-jpa-standalone-dbunit">https://github.com/geowarin/hibernate-examples/tree/master/hibernate-jpa-standalone-dbunit</a></p>
<p>First thing is to create a persistence.xml file in your resources. Default location is under META-INF/persistence.xml. Here is a snippet using an embedded <a href="http://hsqldb.org/">hsqldb</a>.</p>
<script src="https://gist.github.com/geowarin/4579330.js"></script>

<p>javax.persistence.jdbc.driver, url, user and password are standard JPA properties. The driver tells jdbc how to connect to your databse. Hsqldb must be in your classpath to find the corresponding driver. You could also init hsqdb to write to a file or use a different protocol, see the <a href="http://hsqldb.org/doc/2.0/guide/dbproperties-chapt.html">documentation </a>for more information.</p>
<p>The properties prefixed with hibernate are vendor-specific properties :</p>
<ul>
<li>hibernate.dialect will tell hibernate how to issue SQL queries for your database</li>
<li>hibernate.hbm2ddl.auto can be set to validate, update, create, create-drop. Since we will start a new database every time we launch our application, we will just create the tables on each run</li>
<li>hbm2ddl.import_files is a comma-separated list of paths to some custom SQL scripts that hibernate will execute after the database is created, we will explain this a little bit further</li>
<li>hibernate.show_sql and hibernate.format_sql will display the SQL queries generated by hibernate. You can tell hibernate to format them if you want a more human readable output</li>
</ul>
<p>More information is available in the <a href="http://docs.jboss.org/hibernate/core/4.1/manual/en-US/html/ch03.html#configuration-optional-properties">hibernate documentation</a>.</p>
<p>Then, we will create a simple entity :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Table</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;users&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Entity</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">User</span> <span style="color:#ff5c57">implements</span> Serializable {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Id</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@GeneratedValue</span>(strategy<span style="color:#ff6ac1">=</span>GenerationType.<span style="color:#57c7ff">AUTO</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">long</span> id;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Column</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;name&#34;</span>, nullable <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">false</span>, unique<span style="color:#ff6ac1">=</span><span style="color:#ff6ac1">true</span>, length<span style="color:#ff6ac1">=</span>50)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> String name;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Getters and setters omitted</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Notice the <a href="http://docs.oracle.com/javaee/5/api/javax/persistence/Table.html">@Table</a> annotation that we use to specify the name of the table we are going to store our users in. This is useful information for our SQL scripts for example. For table naming, you should consider having simple conventions. Here, I just use lower case name of the entity and add an s to my table.</p>
<p>Same thing can be said about the <a href="http://docs.oracle.com/javaee/5/api/javax/persistence/Column.html">@Column</a> annotation.</p>
<p>Now let&rsquo;s review our init script, import-users.sql :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#ff6ac1">INSERT</span> <span style="color:#ff6ac1">INTO</span> users(id, name) <span style="color:#ff6ac1">VALUES</span>(<span style="color:#ff9f43">1</span>, <span style="color:#5af78e">&#39;admin&#39;</span>);
</span></span></code></pre></div><p>Pretty straight forward. You just have to figure out the correct syntax from your annotations.</p>
<p>Last is the instantiation and use of the <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/EntityManager.html">entity manager</a> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">App</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(App.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">main</span>(String<span style="color:#ff6ac1">[]</span> args) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		EntityManagerFactory entityManagerFactory <span style="color:#ff6ac1">=</span> Persistence.<span style="color:#57c7ff">createEntityManagerFactory</span>(<span style="color:#5af78e">&#34;persistence&#34;</span>);
</span></span><span style="display:flex;"><span>		EntityManager entityManager <span style="color:#ff6ac1">=</span> entityManagerFactory.<span style="color:#57c7ff">createEntityManager</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User found <span style="color:#ff6ac1">=</span> entityManager.<span style="color:#57c7ff">find</span>(User.<span style="color:#57c7ff">class</span>, 1L);
</span></span><span style="display:flex;"><span>		log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;found=&#34;</span> <span style="color:#ff6ac1">+</span> found);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here you go! Since JPA 2 you can create the entity manager factory using the <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/Persistence.html">Persistence</a> class. The string passed as parameter is the name of your persistence unit declared in your persistence.xml file. Spring and others will bootstrap the entity manager factory a little bit differently but the concept is essentially the same.</p>
<h2 id="using-dbunit">Using dbUnit</h2>
<p>DbUnit is a database testing framework which allows you to load data and verify the correctness of your DAO layer using datasets.</p>
<p>Datasets are simple xml files which represent a database state. Here is an sample dataset :</p>
<script src="https://gist.github.com/geowarin/4579565.js"></script>

<p>We can use dbUnit in our simple project, we just have to deal with a little bit of boilerplate code. Here is the abstract class that my test will extend.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * Abstract unit test case class.
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * This will load the test-data.xml dataset before each test case and will clean the database before each test
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> *
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * @author Geoffroy Warin (https://github.com/geowarin)
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> *
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">abstract</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">AbstractDbUnitJpaTest</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> EntityManagerFactory entityManagerFactory;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> IDatabaseConnection connection;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> IDataSet dataset;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">protected</span> <span style="color:#ff5c57">static</span> EntityManager entityManager;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * Will load test-dataset.xml before each test case
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * @throws DatabaseUnitException
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * @throws HibernateException
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@BeforeClass</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">initEntityManager</span>() <span style="color:#ff5c57">throws</span> HibernateException, DatabaseUnitException {
</span></span><span style="display:flex;"><span>		entityManagerFactory <span style="color:#ff6ac1">=</span> Persistence.<span style="color:#57c7ff">createEntityManagerFactory</span>(<span style="color:#5af78e">&#34;persistence-test&#34;</span>);
</span></span><span style="display:flex;"><span>		entityManager <span style="color:#ff6ac1">=</span> entityManagerFactory.<span style="color:#57c7ff">createEntityManager</span>();
</span></span><span style="display:flex;"><span>		connection <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> DatabaseConnection(((SessionImpl) (entityManager.<span style="color:#57c7ff">getDelegate</span>())).<span style="color:#57c7ff">connection</span>());
</span></span><span style="display:flex;"><span>		connection.<span style="color:#57c7ff">getConfig</span>().<span style="color:#57c7ff">setProperty</span>(DatabaseConfig.<span style="color:#57c7ff">PROPERTY_DATATYPE_FACTORY</span>, <span style="color:#ff6ac1">new</span> HsqldbDataTypeFactory());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		FlatXmlDataSetBuilder flatXmlDataSetBuilder <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> FlatXmlDataSetBuilder();
</span></span><span style="display:flex;"><span>		flatXmlDataSetBuilder.<span style="color:#57c7ff">setColumnSensing</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>		InputStream dataSet <span style="color:#ff6ac1">=</span> Thread.<span style="color:#57c7ff">currentThread</span>().<span style="color:#57c7ff">getContextClassLoader</span>().<span style="color:#57c7ff">getResourceAsStream</span>(<span style="color:#5af78e">&#34;test-data.xml&#34;</span>);
</span></span><span style="display:flex;"><span>		dataset <span style="color:#ff6ac1">=</span> flatXmlDataSetBuilder.<span style="color:#57c7ff">build</span>(dataSet);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@AfterClass</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">closeEntityManager</span>() {
</span></span><span style="display:flex;"><span>		entityManager.<span style="color:#57c7ff">close</span>();
</span></span><span style="display:flex;"><span>		entityManagerFactory.<span style="color:#57c7ff">close</span>();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * Will clean the dataBase before each test
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 *
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * @throws SQLException
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 * @throws DatabaseUnitException
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">	 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Before</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">cleanDB</span>() <span style="color:#ff5c57">throws</span> DatabaseUnitException, SQLException {
</span></span><span style="display:flex;"><span>		DatabaseOperation.<span style="color:#57c7ff">CLEAN_INSERT</span>.<span style="color:#57c7ff">execute</span>(connection, dataset);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And an example of usage :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">AppTest</span> <span style="color:#ff5c57">extends</span> AbstractDbUnitJpaTest {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFind</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User user <span style="color:#ff6ac1">=</span> entityManager.<span style="color:#57c7ff">find</span>(User.<span style="color:#57c7ff">class</span>, 1L);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(user);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;userTest&#34;</span>, user.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testInsert</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User newUser <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> User();
</span></span><span style="display:flex;"><span>		newUser.<span style="color:#57c7ff">setName</span>(<span style="color:#5af78e">&#34;insert&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		entityManager.<span style="color:#57c7ff">getTransaction</span>().<span style="color:#57c7ff">begin</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		entityManager.<span style="color:#57c7ff">persist</span>(newUser);
</span></span><span style="display:flex;"><span>		<span style="color:#9aedfe">long</span> id <span style="color:#ff6ac1">=</span> newUser.<span style="color:#57c7ff">getId</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		entityManager.<span style="color:#57c7ff">getTransaction</span>().<span style="color:#57c7ff">commit</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		User user <span style="color:#ff6ac1">=</span> entityManager.<span style="color:#57c7ff">find</span>(User.<span style="color:#57c7ff">class</span>, id);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertNotNull</span>(user);
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(<span style="color:#5af78e">&#34;insert&#34;</span>, user.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testFindAll</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		List<span style="color:#ff6ac1">&lt;</span>User<span style="color:#ff6ac1">&gt;</span> allUsers <span style="color:#ff6ac1">=</span> entityManager.<span style="color:#57c7ff">createQuery</span>(<span style="color:#5af78e">&#34;from User&#34;</span>).<span style="color:#57c7ff">getResultList</span>();
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertEquals</span>(2, allUsers.<span style="color:#57c7ff">size</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Notice we have to deal with the transactions ourselves which can be pretty tiresome. Recommended way to do this is to create a service layer which will be responsible for opening and committing transactions.</p>
<p>The findAll test uses a standard <a href="http://docs.oracle.com/html/E24396_01/ejb3_langref.html">JPQL </a>query to find all users in the database. The select clause is facultative. The &ldquo;User&rdquo; keyword is the name of our entity.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Since JPA 2, we can use JPA in a simple SE environment. Downside is we have to handle transactions and write some boilerplate code to use JPQL queries and a framework like dbUnit.</p>
<p>Issues that can be addressed beautifully by project like <a href="http://www.springsource.org/spring-data/jpa">Spring data JPA</a>, check out my <a href="http://geowarin.wordpress.com/2013/01/21/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/">other article</a>.</p>
]]></content:encoded></item></channel></rss>