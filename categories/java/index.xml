<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on Geowarin</title><link>https://geowarin.github.io/categories/java/</link><description>Recent content in java on Geowarin</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 31 Jan 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://geowarin.github.io/categories/java/index.xml" rel="self" type="application/rss+xml"/><item><title>A simple Spring Boot and Jersey Application</title><link>https://geowarin.github.io/a-simple-spring-boot-and-jersey-application/</link><pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/a-simple-spring-boot-and-jersey-application/</guid><description>Spring boot RC1 is available.
Update : RC3 released I updated the project.
It takes spring development and fast prototyping to a whole new level by taking care of all the dependencies for you, auto-detecting your configuration, providing an executable jar (great for deploying in the cloud), and much more.
In this post we&amp;rsquo;ll see how to integrate spring-boot with jersey, including testing of Jersey controllers with jersey-test.
Of course, the source code is available on my github.</description></item><item><title>Fun with xpath</title><link>https://geowarin.github.io/fun-with-xpath/</link><pubDate>Thu, 30 Jan 2014 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/fun-with-xpath/</guid><description>I had fun today at work when I had to design a program that allows users to select nodes with xPath but keep the same hierarchical structure as the original xml file.
The result with tests is available on github.
For instance, the following xPath /persons/person[@age &amp;gt; 18]/project[@language = 'java'], would select the lines highlighted in the file below :
Normal xPath result would be a list of nodes like that</description></item><item><title>Generate DDL with hibernate</title><link>https://geowarin.github.io/generate-ddl-with-hibernate/</link><pubDate>Mon, 21 Jan 2013 23:44:07 +0000</pubDate><guid>https://geowarin.github.io/generate-ddl-with-hibernate/</guid><description>I don&amp;rsquo;t know if it&amp;rsquo;s a well known feature but there is a bunch of methods on hibernate Configuration class which will produce DDL for your database according to the dialect in use.
In this blog post we will see how to use those methods to generate a DDL script to set up our database and get rid of those annoying DBAs (just kidding, always review these scripts, they&amp;rsquo;re not production ready).</description></item><item><title>Using Spring Data JPA in a Java SE environment and run tests with dbUnit</title><link>https://geowarin.github.io/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/</link><pubDate>Mon, 21 Jan 2013 15:25:11 +0000</pubDate><guid>https://geowarin.github.io/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/</guid><description>This blog post follows my previous articles on using hibernate as a standalone JPA provider and how to use spring in a Java SE environment.
In this post, I will show you how to use Spring Data JPA, a great project which improves your productivity by generating all CRUD operations for you. Then we will use springtestdbunit to run some very clean tests on our database with spring and dbUnit.</description></item><item><title>Using Hibernate as a JPA provider in a Java SE environment and run tests with dbUnit</title><link>https://geowarin.github.io/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/</link><pubDate>Sun, 20 Jan 2013 16:28:23 +0000</pubDate><guid>https://geowarin.github.io/using-hibernate-as-a-jpa-provider-in-a-java-se-environment-and-run-tests-with-dbunit/</guid><description>Sometimes it can be useful to use JPA in a minimal environment to test your model or just if you&amp;rsquo;re curious of how things work in your DAO layer behind the scenes. In this blog post, we will create a simple project then see how you can use dbUnit to run some unit tests on your database.
The source code of this blog post is available on my github : https://github.</description></item></channel></rss>