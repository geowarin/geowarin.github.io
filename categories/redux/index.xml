<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Redux on Geowarin</title><link>https://geowarin.com/categories/redux/</link><description>Recent content in Redux on Geowarin</description><generator>Hugo -- 0.138.0</generator><language>en</language><lastBuildDate>Tue, 12 Apr 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://geowarin.com/categories/redux/index.xml" rel="self" type="application/rss+xml"/><item><title>Consuming APIs with Redux, the Shasta way</title><link>https://geowarin.com/consuming-apis-with-redux-the-shasta-way/</link><pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/consuming-apis-with-redux-the-shasta-way/</guid><description>Connecting your REST API to Redux used to be hard&amp;hellip; But that was before Shasta!</description><content:encoded><![CDATA[<p>Since React is just the view layer of your front-end stack, the community had to
provide the solutions for the remaining problems.</p>
<p>Right now there seems to be a consensus for the best libraries. The recommended stack is:</p>
<ul>
<li>Building: <code>Webpack</code> and <code>babel</code></li>
<li>Managing your UI state: <code>Redux</code> and <code>ImmutableJS</code></li>
<li>Routing: <code>React-router</code> (<a href="https://github.com/taion/rrtr">ahem!</a>)</li>
</ul>
<p>But there seems to be <a href="https://blog.boldlisting.com/connecting-redux-to-your-api-eac51ad9ff89#.s83cs4um8">lots of options</a>
to connect Redux to your API.</p>
<p>Yesterday, I decided to see what <a href="http://shasta.tools/">Shasta</a> had in store for
us. I have to say that I was more than happy with what I saw!</p>
<p>Check out my demo project <a href="https://github.com/geowarin/shasta-preview">on GitHub</a>.</p>
<h2 id="what-is-shasta">What is Shasta?</h2>
<p>Shasta is the latest project of <a href="https://github.com/contra">@Contra (Eric Schoffstall)</a>,
previously known for Gulp.</p>
<p>The idea is to take the best practices and libraries used by the React community
and stitch them together with nice helpers.</p>
<p>It is an <a href="http://shasta.tools/shasta/docs/Opinions.html">opinionated library</a>.</p>
<p>Without surprise, you will find support for all the libraries cited above.</p>
<p>Shasta is very ambitious and aims to help you solve Server Side Rendering, manage
security and user sessions, etc.</p>
<p>Check the <a href="https://github.com/shastajs/boilerplate">shasta-boilerplate</a> for a more comprehensive example.</p>
<p>In this article I will focus on <a href="https://github.com/shastajs/tahoe">Tahoe</a> and
the <a href="https://github.com/shastajs/shasta-data-view">shasta data view</a>.</p>
<p>I think that those two things alone are well worth a blog post!</p>
<h2 id="a-word-of-warning">A word of warning!</h2>
<p>Shasta is under development. All the dependencies in the demo are pointing to the
github repositories. There are no npm releases yet!</p>
<p>Likewise, the documentation <a href="http://shasta.tools/shasta/index.html">is very sparse</a> at
the moment.</p>
<p>Thinks are likely to change or break. You have been warned.</p>
<p>Your best bet to learn more about Shasta right now is to listen to the Javascript Jabber podcast
<a href="https://devchat.tv/js-jabber/205-jsj-shasta-with-eric-schoffstall">episode on Shasta</a>.</p>
<h2 id="the-store">The store</h2>
<p>The central element in Shasta is the store.
It is very similar to Redux&rsquo;s store but it adds the notion of plugins.</p>
<p>To get started quickly, I created a project [using nwb]({% post_url 2016-02-18-react-freshness %}).</p>
<p>Here is what the project looks like after setting up Shasta with the router and
Tahoe:</p>
<p><img loading="lazy" src="/assets/images/articles/2016-04-shasta-layout.png"></p>
<p>Let&rsquo;s dig into the core package.</p>
<p><code>store.js</code> allows you to reference the store as a singleton. This is also where
you register the plugins you use:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> { createStore, createReducer } from <span style="color:#5af78e">&#39;shasta&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> localReducers from <span style="color:#5af78e">&#39;../reducers/.lookup&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> plugins from <span style="color:#5af78e">&#39;./plugins&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> createStore({
</span></span><span style="display:flex;"><span>  plugins<span style="color:#ff6ac1">:</span> plugins,
</span></span><span style="display:flex;"><span>  reducers<span style="color:#ff6ac1">:</span> [
</span></span><span style="display:flex;"><span>    createReducer(localReducers)
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p><code>plugins.js</code> is very simple. In this example, I use two plugins, Tahoe and shasta-router:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> <span style="color:#ff6ac1">*</span> as router from <span style="color:#5af78e">&#39;shasta-router&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> <span style="color:#ff6ac1">*</span> as api from <span style="color:#5af78e">&#39;tahoe&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> [
</span></span><span style="display:flex;"><span>  api,
</span></span><span style="display:flex;"><span>  router
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><p>Finally, the <code>actions.js</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> { actions as routeActions } from <span style="color:#5af78e">&#39;shasta-router&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> { createActions, createReducerActions } from <span style="color:#5af78e">&#39;shasta&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> store from <span style="color:#5af78e">&#39;./store&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> localActions from <span style="color:#5af78e">&#39;../api/.lookup&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> localReducers from <span style="color:#5af78e">&#39;../reducers/.lookup&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> createActions({
</span></span><span style="display:flex;"><span>  ...localActions,
</span></span><span style="display:flex;"><span>  ...routeActions,
</span></span><span style="display:flex;"><span>  ...createReducerActions(localReducers)
</span></span><span style="display:flex;"><span>}, store.dispatch)
</span></span></code></pre></div><h3 id="plugins">Plugins</h3>
<p>What are those plugins? Shasta defines multiple extension points.
Most notably, your plugin can export reducers and middlewares which dramatically
help reducing the boilerplate.</p>
<p>With the example above, you will get your routes stored in Redux with <code>react-router-redux</code>,
and the setup for the <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en">Redux Devtools chrome extension</a>.</p>
<p>Tahoe also adds a bunch of reducers to handle our API calls.</p>
<h3 id="what-about-the-lookup-file">What about the .lookup file?</h3>
<p>The <code>.lookup</code> files are a really nice idea, they use the <a href="https://github.com/contra/glob-loader">glob-loader</a> to re-export all the js files
according to a glob expression.</p>
<p>This avoids writing repetitive and error prone-code like:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> <span style="color:#ff6ac1">*</span> as reducer1 from <span style="color:#5af78e">&#39;./reducer1&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> <span style="color:#ff6ac1">*</span> as reducer2 from <span style="color:#5af78e">&#39;./reducer2&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> {
</span></span><span style="display:flex;"><span>  reducer1,
</span></span><span style="display:flex;"><span>  reducer2
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="the-root-component">The Root Component</h2>
<p>Here is a quick glance at the Root component of our application.
It is very classic, just note that Shasta adds support for additional PropTypes
like routes or immutable types.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> React from <span style="color:#5af78e">&#34;react&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> {Provider, Component, PropTypes} from <span style="color:#5af78e">&#34;shasta&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> {Router} from <span style="color:#5af78e">&#34;shasta-router&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> <span style="color:#ff6ac1">class</span> RootView <span style="color:#ff6ac1">extends</span> Component {
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">static</span> displayName <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#39;RootView&#39;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">static</span> propTypes <span style="color:#ff6ac1">=</span> {
</span></span><span style="display:flex;"><span>    history<span style="color:#ff6ac1">:</span> PropTypes.object.isRequired,
</span></span><span style="display:flex;"><span>    store<span style="color:#ff6ac1">:</span> PropTypes.object.isRequired,
</span></span><span style="display:flex;"><span>    routes<span style="color:#ff6ac1">:</span> PropTypes.node.isRequired
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  render () {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">const</span> {store, history, routes} <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">this</span>.props;
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> (
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">Provider</span> <span style="color:#57c7ff">store</span><span style="color:#ff6ac1">=</span>{store}&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#ff6ac1">Router</span> <span style="color:#57c7ff">history</span><span style="color:#ff6ac1">=</span>{history}&gt;
</span></span><span style="display:flex;"><span>          {routes}
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#ff6ac1">Router</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;/<span style="color:#ff6ac1">Provider</span>&gt;
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="our-first-reducer-the-counter">Our first reducer: the counter!</h2>
<p>This one took you by surprise, didn&rsquo;t it?
Just to show the ideas behind Shasta, here is the reducer for our sacred counter example.</p>
<p><code>reducers/counter.js</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> { Map } from <span style="color:#5af78e">&#39;immutable&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">const</span> initialState <span style="color:#ff6ac1">=</span> Map({ count<span style="color:#ff6ac1">:</span> <span style="color:#ff9f43">1</span> });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">const</span> increment <span style="color:#ff6ac1">=</span> (state, { payload <span style="color:#ff6ac1">=</span> <span style="color:#ff9f43">1</span> }) =&gt;
</span></span><span style="display:flex;"><span>  state.update(<span style="color:#5af78e">&#39;count&#39;</span>, c =&gt; c <span style="color:#ff6ac1">+</span> payload);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">const</span> decrement <span style="color:#ff6ac1">=</span> (state, { payload <span style="color:#ff6ac1">=</span> <span style="color:#ff9f43">1</span> }) =&gt;
</span></span><span style="display:flex;"><span>  state.update(<span style="color:#5af78e">&#39;count&#39;</span>, c =&gt; c <span style="color:#ff6ac1">-</span> payload);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">const</span> reset <span style="color:#ff6ac1">=</span> () =&gt; initialState;
</span></span></code></pre></div><p>Here, you see a very straightforward implementation of a reducer.
It leverages the ImmutableJS API to create those nice little one-liners.</p>
<p>Here is how to use those reducers as actions in your views:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> React from <span style="color:#5af78e">&#34;react&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> {connect, Component} from <span style="color:#5af78e">&#34;shasta&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> actions from <span style="color:#5af78e">&#34;../core/actions&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">@</span>connect({
</span></span><span style="display:flex;"><span>  count<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;counter.count&#39;</span>
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> <span style="color:#ff6ac1">class</span> Counter <span style="color:#ff6ac1">extends</span> Component {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  render() {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> &lt;<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">h2</span>&gt;Counter&lt;/<span style="color:#ff6ac1">h2</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">p</span>&gt;{<span style="color:#ff6ac1">this</span>.props.count}&lt;/<span style="color:#ff6ac1">p</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">button</span> <span style="color:#57c7ff">onClick</span><span style="color:#ff6ac1">=</span>{() =&gt; actions.counter.increment()}&gt;
</span></span><span style="display:flex;"><span>        Increment
</span></span><span style="display:flex;"><span>      &lt;/<span style="color:#ff6ac1">button</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">button</span> <span style="color:#57c7ff">onClick</span><span style="color:#ff6ac1">=</span>{() =&gt; actions.counter.decrement()}&gt;
</span></span><span style="display:flex;"><span>        Decrement
</span></span><span style="display:flex;"><span>      &lt;/<span style="color:#ff6ac1">button</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">button</span> <span style="color:#57c7ff">onClick</span><span style="color:#ff6ac1">=</span>{() =&gt; actions.counter.reset()}&gt;
</span></span><span style="display:flex;"><span>        Reset
</span></span><span style="display:flex;"><span>      &lt;/<span style="color:#ff6ac1">button</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>With our lookup file setup, there is nothing else to do.
Your actions will automatically be available from all components in the
<code>actions.counter</code> namespace.</p>
<p>The <code>@connect</code> annotation reminds a lot of Redux but it has been modified to
work seamlessly with immutable data types.</p>
<h2 id="lets-fetch-data">Let&rsquo;s fetch data!</h2>
<p>Let&rsquo;s create a <code>api/chuck.js</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> { createAction } from <span style="color:#5af78e">&#39;tahoe&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> { Schema } from <span style="color:#5af78e">&#39;normalizr&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> response <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Schema(<span style="color:#5af78e">&#39;some-response&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">const</span> getRandomFact <span style="color:#ff6ac1">=</span> createAction({
</span></span><span style="display:flex;"><span>  endpoint<span style="color:#ff6ac1">:</span> () =&gt; <span style="color:#5af78e">`http://api.icndb.com/jokes/random`</span>,
</span></span><span style="display:flex;"><span>  method<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;GET&#39;</span>,
</span></span><span style="display:flex;"><span>  model<span style="color:#ff6ac1">:</span> response
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>Shasta has direct support for <a href="https://github.com/gaearon/normalizr">normalizr</a>.
This will help us store our entities in a normalized way as we will see in a moment.</p>
<p>Under the hood, Tahoe uses superagent to make HTTP requests.</p>
<p>Let&rsquo;s see how to use this in a view:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> React from <span style="color:#5af78e">&#34;react&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> {connect} from <span style="color:#5af78e">&#34;shasta&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> actions from <span style="color:#5af78e">&#34;../core/actions&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> DataComponent from <span style="color:#5af78e">&#34;shasta-data-view&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">@</span>connect({
</span></span><span style="display:flex;"><span>  joke<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;api.subsets.joke&#39;</span>
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> <span style="color:#ff6ac1">class</span> ChuckFact <span style="color:#ff6ac1">extends</span> DataComponent {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  resolveData () {
</span></span><span style="display:flex;"><span>    actions.chuck.getRandomFact({
</span></span><span style="display:flex;"><span>      subset<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;joke&#39;</span>
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  renderLoader () {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> (
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>        Loading...
</span></span><span style="display:flex;"><span>      &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  renderData ({joke}) {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> &lt;<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">h2</span>&gt;Chuck Norris Fact&lt;/<span style="color:#ff6ac1">h2</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">p</span>&gt;{joke.getIn([<span style="color:#5af78e">&#39;value&#39;</span>, <span style="color:#5af78e">&#39;joke&#39;</span>])}&lt;/<span style="color:#ff6ac1">p</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  renderErrors (errors) {
</span></span><span style="display:flex;"><span>    console.error(errors);
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> (
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>        There was an error fetching Chuck Norris facts
</span></span><span style="display:flex;"><span>      &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Shasta has a <code>DataComponent</code> class that will help you manage the pattern of displaying
a loading message while fetching the data, and errors if the request fail.</p>
<p>When using a Tahoe action, you can optionally specify a subset in which the fetched
data will end up.</p>
<p>This is great to scope your fetch requests to a component.
Here, our request ends up in the <code>api.subsets.joke</code> namespace.</p>
<p>Here is the JSON returned by our API so you can understand the <code>getIn</code> call:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">&#34;type&#34;</span>: <span style="color:#5af78e">&#34;success&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">&#34;value&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&#34;id&#34;</span>: <span style="color:#ff9f43">459</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&#34;joke&#34;</span>: <span style="color:#5af78e">&#34;Chuck Norris can solve the Towers of Hanoi in one move.&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&#34;categories&#34;</span>: [
</span></span><span style="display:flex;"><span>        <span style="color:#5af78e">&#34;nerdy&#34;</span>
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="using-normalizr">Using normalizr</h2>
<p>If we use a schema for the API call, we can tell normalizr that the <code>value</code> field
in our JSON response is actually an entity.</p>
<p>As such, we will be able to retrieve it in the <code>api.entities</code> namespace.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> response <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Schema(<span style="color:#5af78e">&#39;response&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> joke <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Schema(<span style="color:#5af78e">&#39;jokes&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>response.define({
</span></span><span style="display:flex;"><span>  value<span style="color:#ff6ac1">:</span> joke
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>Normalizr will create a map of jokes indexed by ids and store it in <code>api.entities.jokes</code>.
Which allows us to write something like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#ff5c57">@</span>connect({
</span></span><span style="display:flex;"><span>  jokes<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;api.entities.jokes&#39;</span>
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> <span style="color:#ff6ac1">class</span> ChuckFact <span style="color:#ff6ac1">extends</span> DataComponent {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  renderData ({jokes}) {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">const</span> jokesEl <span style="color:#ff6ac1">=</span> jokes.valueSeq().map((joke, id) =&gt; {
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">return</span> &lt;<span style="color:#ff6ac1">div</span> <span style="color:#57c7ff">key</span><span style="color:#ff6ac1">=</span>{id}&gt;{joke.get(<span style="color:#5af78e">&#39;joke&#39;</span>)}&lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> &lt;<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">h2</span>&gt;Chuck Norris Fact&lt;/<span style="color:#ff6ac1">h2</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      {jokesEl}
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can also use a function in the <code>@connect</code> decorator:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> getFirstJoke <span style="color:#ff6ac1">=</span> (store) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">return</span> store.getIn([<span style="color:#5af78e">&#39;api&#39;</span>, <span style="color:#5af78e">&#39;subsets&#39;</span>, <span style="color:#5af78e">&#39;myJoke&#39;</span>, <span style="color:#5af78e">&#39;data&#39;</span>, <span style="color:#5af78e">&#39;value&#39;</span>, <span style="color:#5af78e">&#39;joke&#39;</span>]);
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">@</span>connect({
</span></span><span style="display:flex;"><span>  joke<span style="color:#ff6ac1">:</span> getFirstJoke
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> <span style="color:#ff6ac1">class</span> ChuckFact <span style="color:#ff6ac1">extends</span> DataComponent {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  resolveData () {
</span></span><span style="display:flex;"><span>    actions.chuck.getRandomFact({
</span></span><span style="display:flex;"><span>      subset<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;myJoke&#39;</span>
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  renderData ({joke}) {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> &lt;<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#ff6ac1">h2</span>&gt;Chuck Norris Fact&lt;/<span style="color:#ff6ac1">h2</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      {joke}
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;m very excited about Shasta.
It solves a long-standing problem in the React community with an unmatched elegance.</p>
<p>It might be that piece that a lot of us have been missing in our projects.</p>
]]></content:encoded></item></channel></rss>