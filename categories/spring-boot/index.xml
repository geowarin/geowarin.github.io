<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring-boot on Geowarin</title><link>https://geowarin.github.io/categories/spring-boot/</link><description>Recent content in spring-boot on Geowarin</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 02 Feb 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://geowarin.github.io/categories/spring-boot/index.xml" rel="self" type="application/rss+xml"/><item><title>Correctly handle JSR-310 (java 8) dates with Jackson</title><link>https://geowarin.github.io/correctly-handle-jsr-310-java-8-dates-with-jackson/</link><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/correctly-handle-jsr-310-java-8-dates-with-jackson/</guid><description>If you are starting a Spring Boot project today, chances are that you want to use Java 8.
One of the most awesome features in Java 8 is the Date and Time API, also known as JSR-310.
By default, Jackson will treat the new dates as normal objects and serialize all the fields that they contain, which will probably not suit your needs.
I will show you how to fix the problem with the jackson-datatype-jsr310 library, within a Spring Boot project, but the concepts here are applicable to any application using Jackson.</description></item><item><title>Understanding Spring Boot</title><link>https://geowarin.github.io/understanding-spring-boot/</link><pubDate>Fri, 06 Mar 2015 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/understanding-spring-boot/</guid><description>Spring boot is an opinionated library that allows to create executable Spring applications with a convention over configuration approach.
The magic behind this framework lies in the @EnableAutoConfiguration annotation, which will automatically load all the beans the application requires depending on what Spring Boot finds in the classpath.
The @Enable* annotations The @Enable... annotations are not new, they were first introduced in Spring 3 when the idea of replacing the XML files with java annotated classes is born.</description></item><item><title>Review of Learning Spring Boot</title><link>https://geowarin.github.io/review-of-learning-spring-boot/</link><pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/review-of-learning-spring-boot/</guid><description>Today, I&amp;rsquo;ll be reviewing the first book ever written on Spring Boot, Learning Spring Boot, by Greg L. Turnquist. Packt Publishing, the editor, contacted me to review it during its writing but I&amp;rsquo;ll remain as unbiased as possible.
It&amp;rsquo;s a good book, well worth reading if you want to learn how spring boot works but more globally, it will give you good insights and tips on the capabilities of Spring and its integration with other technologies.</description></item><item><title>A simple Spring Boot and Jersey Application</title><link>https://geowarin.github.io/a-simple-spring-boot-and-jersey-application/</link><pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/a-simple-spring-boot-and-jersey-application/</guid><description>Spring boot RC1 is available.
Update : RC3 released I updated the project.
It takes spring development and fast prototyping to a whole new level by taking care of all the dependencies for you, auto-detecting your configuration, providing an executable jar (great for deploying in the cloud), and much more.
In this post we&amp;rsquo;ll see how to integrate spring-boot with jersey, including testing of Jersey controllers with jersey-test.
Of course, the source code is available on my github.</description></item></channel></rss>