<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>spring-boot on Geowarin</title><link>https://geowarin.com/categories/spring-boot/</link><description>Recent content in spring-boot on Geowarin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 02 Feb 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://geowarin.com/categories/spring-boot/index.xml" rel="self" type="application/rss+xml"/><item><title>Correctly handle JSR-310 (java 8) dates with Jackson</title><link>https://geowarin.com/correctly-handle-jsr-310-java-8-dates-with-jackson/</link><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/correctly-handle-jsr-310-java-8-dates-with-jackson/</guid><description>The DateTime API in Java 8 is awesome but default Jackson serialization is not. Let&amp;rsquo;s fix that!</description><content:encoded><![CDATA[<p>If you are starting a Spring Boot project today, chances are that you want to use
Java 8.</p>
<p>One of the most awesome features in Java 8 is the <a href="http://www.mscharhag.com/java/java-8-date-time-api">Date and Time API</a>, also known as JSR-310.</p>
<p>By default, Jackson will treat the new dates as normal objects and serialize all the
fields that they contain, which will probably not suit your needs.</p>
<p>I will show you how to fix the problem with the <a href="https://github.com/FasterXML/jackson-datatype-jsr310">jackson-datatype-jsr310</a> library,
within a Spring Boot project, but the concepts here are applicable to any application
using Jackson.</p>
<p>The code is <a href="https://github.com/geowarin/boot-jsr310">available on github</a> if you want to take a look.</p>
<h2 id="the-problem">The problem</h2>
<p>Let&rsquo;s write a simple controller:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@RestController</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DateController</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@RequestMapping</span>(<span style="color:#5af78e">&#34;/localDate&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> LocalDate <span style="color:#57c7ff">todayLocalDate</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> LocalDate.<span style="color:#57c7ff">now</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@RequestMapping</span>(<span style="color:#5af78e">&#34;/offsetDateTime&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> OffsetDateTime <span style="color:#57c7ff">todayOffsetDateTime</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> OffsetDateTime.<span style="color:#57c7ff">now</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Simple, right? What could possibly go wrong?</p>
<p><img loading="lazy" src="/assets/images/articles/2016-02-localDate.png" alt="Oh boy what am I going to do with that?"  title="Bad date time"  />
</p>
<p>Well, it&rsquo;s probably not what you expected.
This output is not going to be easy to use in your client application.</p>
<p>More importantly, are you going to send this kind of format to your server
when you are targeting a Java date?</p>
<p>The output of <code>offsetDateTime</code> is pretty similar in terms of unusualness.</p>
<h2 id="the-solution">The solution</h2>
<p>Turns out that the solution is pretty straight-forward.
Just add the following dependency to your project:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>compile <span style="color:#5af78e">&#39;com.fasterxml.jackson.datatype:jackson-datatype-jsr310&#39;</span>
</span></span></code></pre></div><p>And the result, for <code>LocalDateTime</code>:</p>
<pre tabindex="0"><code>[
  2016,
  2,
  2
]
</code></pre><p>And for <code>OffsetDateTime</code>:</p>
<pre tabindex="0"><code>1454451664.708000000
</code></pre><p>Happy? No? Let&rsquo;s try improve the solution.</p>
<h2 id="tweaking-the-output">Tweaking the output</h2>
<p>If you look at how the library works internally, you will see that the output
depends on some features being activated or not.</p>
<p>To have a better default, we can override the default <code>ObjectMapper</code> and give
it a different config:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">JacksonConfig</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Primary</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> ObjectMapper <span style="color:#57c7ff">objectMapper</span>(Jackson2ObjectMapperBuilder builder) {
</span></span><span style="display:flex;"><span>        ObjectMapper objectMapper <span style="color:#ff6ac1">=</span> builder.<span style="color:#57c7ff">createXmlMapper</span>(<span style="color:#ff6ac1">false</span>).<span style="color:#57c7ff">build</span>();
</span></span><span style="display:flex;"><span>        objectMapper.<span style="color:#57c7ff">configure</span>(SerializationFeature.<span style="color:#57c7ff">WRITE_DATES_AS_TIMESTAMPS</span>, <span style="color:#ff6ac1">false</span>);
</span></span><span style="display:flex;"><span><span style="color:#78787e">//        objectMapper.configure(SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS, false);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> objectMapper;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This time the result is, for <code>LocalDateTime</code>:</p>
<pre tabindex="0"><code>2016-02-02
</code></pre><p>And for <code>OffsetDateTime</code>:</p>
<pre tabindex="0"><code>2016-02-02T23:24:08.255+01:00
</code></pre><p>If you uncomment the second line, dates will be written as timestamps without the nanoseconds
but unfortunately, it is mutually exclusive with the first option.</p>
<p>Nevertheless, those formats are a lot more sensible and understandable by client
libraries like <a href="http://momentjs.com/">momentjs</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>It takes just a little configuration to make JSR-310 dates behave correctly with Jackson
and Spring Boot.</p>
<p>As always, check out the project <a href="https://github.com/geowarin/boot-jsr310">on github</a> and tell if
this helped!</p>
]]></content:encoded></item><item><title>Understanding Spring Boot</title><link>https://geowarin.com/understanding-spring-boot/</link><pubDate>Fri, 06 Mar 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/understanding-spring-boot/</guid><description>Wonder how spring boot&amp;rsquo;s magic operates behind the scenes? You&amp;rsquo;ve come to the right place!</description><content:encoded><![CDATA[<p>Spring boot is an opinionated library that allows to create executable Spring applications with a convention over configuration approach.</p>
<p>The magic behind this framework lies in the <code>@EnableAutoConfiguration</code> annotation,
which will automatically load all the beans the application requires depending
on what Spring Boot finds in the classpath.</p>
<h2 id="the-enable-annotations">The <code>@Enable*</code> annotations</h2>
<p>The <code>@Enable...</code> annotations are not new, they were first introduced in Spring 3 when the idea of replacing the XML files with java annotated classes is born.</p>
<p>A lot of Spring users already know <code>@EnableTransactionManagement</code>, which will enable declarative transaction management,
<code>@EnableWebMvc</code>, which enables Spring MVC, or <code>@EnableScheduling</code>, which will initialize a scheduler.</p>
<p>These annotations are in fact a simple configuration import with the <code>@Import</code> annotation.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Target</span>(ElementType.<span style="color:#57c7ff">TYPE</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Retention</span>(RetentionPolicy.<span style="color:#57c7ff">RUNTIME</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Documented</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Import</span>({ EnableAutoConfigurationImportSelector.<span style="color:#57c7ff">class</span>,
</span></span><span style="display:flex;"><span>        AutoConfigurationPackages.<span style="color:#57c7ff">Registrar</span>.<span style="color:#57c7ff">class</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff9f43">@interface</span> EnableAutoConfiguration {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * Exclude specific auto-configuration classes such that they will never be applied.
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     */</span>
</span></span><span style="display:flex;"><span>    Class<span style="color:#ff6ac1">&lt;?&gt;[]</span> exclude() <span style="color:#ff6ac1">default</span> {};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>EnableAutoConfigurationImportSelector</code> uses <code>SpringFactoriesLoader#loadFactoryNames</code> of Spring core.
SpringFactoriesLoader will look for jars containing a file with the path <code>META-INF/spring.factories</code>.</p>
<p>When it finds such a file, the <code>SpringFactoriesLoader</code> will look for the property named after our configuration file.
In our case, <code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>.</p>
<p>Let&rsquo;s take a look at the <code>spring-boot-autoconfigure</code> jar, which indeed contains a <code>spring.factories</code> file copied below:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-properties" data-lang="properties"><span style="display:flex;"><span><span style="color:#78787e"># Initializers</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">org.springframework.context.ApplicationContextInitializer</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># Auto Configure</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.data.JpaRepositoriesAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.data.MongoRepositoriesAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.jms.JmsTemplateAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.mongo.MongoTemplateAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration</span>
</span></span></code></pre></div><p>In this file, we can see a list of the Spring Boot auto-configurations.
Let&rsquo;s take a closer look at one of those configurations, <code>MongoAutoConfiguration</code> for instance:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ConditionalOnClass</span>(Mongo.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableConfigurationProperties</span>(MongoProperties.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MongoAutoConfiguration</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> MongoProperties properties;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> Mongo mongo;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@PreDestroy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">close</span>() <span style="color:#ff5c57">throws</span> UnknownHostException {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">if</span> (<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mongo</span> <span style="color:#ff6ac1">!=</span> <span style="color:#ff6ac1">null</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mongo</span>.<span style="color:#57c7ff">close</span>();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@ConditionalOnMissingBean</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> Mongo <span style="color:#57c7ff">mongo</span>() <span style="color:#ff5c57">throws</span> UnknownHostException {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mongo</span> <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">properties</span>.<span style="color:#57c7ff">createMongoClient</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mongo</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This simple Spring configuration class declares typical beans needed to use mongoDb.</p>
<p>This classes, like a lot of others in Spring Boot relies heavily on Spring annotations:</p>
<ul>
<li><code>@ConditionOnClass</code> activates a configuration only if one or several classes are present on the classpath</li>
<li><code>@EnableConfigurationProperties</code> automatically maps a POJO to a set of properties in the Spring Boot configuration file
(by default <code>application.properties</code>)</li>
<li><code>@ConditionalOnMissingBean</code> enables a bean definition only if the bean wasn&rsquo;t previously defined</li>
</ul>
<p>You can also refine the order in which those configuration classes load with <code>@AutoConfigureBefore</code> et <code>@AutoConfigureAfter</code>.</p>
<h2 id="properties-mapping">Properties Mapping</h2>
<p>Let&rsquo;s look at <code>MongoProperties</code>, which is a classic example of Spring Boot properties mapping:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@ConfigurationProperties</span>(prefix <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;spring.data.mongodb&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MongoProperties</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> String host;
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#9aedfe">int</span> port <span style="color:#ff6ac1">=</span> DBPort.<span style="color:#57c7ff">PORT</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> String uri <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;mongodb://localhost/test&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> String database;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">// ... getters/ setters omitted</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>@ConfigurationProperties</code> will associate every properties with a particular prefix to the POJO.
For instance, the property <code>spring.data.mongodb.port</code> will be mapped to the port attribute of this class.</p>
<p>If you&rsquo;re a Spring Boot user, I strongly encourage you to use those capabilities to remove the boiler plate code
associated with configuration properties.</p>
<h2 id="the-conditional-annotations">The <code>@Conditional</code> annotations</h2>
<p>The power of Spring Boot lies in one of Spring 4 new features: the <code>@Conditional</code> annotations,
which will enable some configuration only if a specific condition is met.</p>
<p>A sneak peek in the <code>org.springframework.boot.autoconfigure.condition</code> package in Spring Boot will give us an overview of what
we can do with those annotations:</p>
<ul>
<li><code>@ConditionalOnBean</code></li>
<li><code>@ConditionalOnClass</code></li>
<li><code>@ConditionalOnExpression</code></li>
<li><code>@ConditionalOnMissingBean</code></li>
<li><code>@ConditionalOnMissingClass</code></li>
<li><code>@ConditionalOnNotWebApplication</code></li>
<li><code>@ConditionalOnResource</code></li>
<li><code>@ConditionalOnWebApplication</code></li>
</ul>
<p>Let&rsquo;s take a closer look at <code>@ConditionalOnExpression</code>, which allows you to write a condition in the <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html">Spring Expression language</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Conditional</span>(OnExpressionCondition.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Retention</span>(RetentionPolicy.<span style="color:#57c7ff">RUNTIME</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Target</span>({ ElementType.<span style="color:#57c7ff">TYPE</span>, ElementType.<span style="color:#57c7ff">METHOD</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff9f43">@interface</span> ConditionalOnExpression {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * The SpEL expression to evaluate. Expression should return {@code true} if the
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * condition passes or {@code false} if it fails.
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     */</span>
</span></span><span style="display:flex;"><span>    String <span style="color:#57c7ff">value</span>() <span style="color:#ff6ac1">default</span> <span style="color:#5af78e">&#34;true&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this class, we indeed make use of the <code>@Conditional</code> annotation. The condition is defined in the <code>OnExpressionCondition</code> class:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">OnExpressionCondition</span> <span style="color:#ff5c57">extends</span> SpringBootCondition {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> ConditionOutcome <span style="color:#57c7ff">getMatchOutcome</span>(ConditionContext context, AnnotatedTypeMetadata metadata) {
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// ...</span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// we first get a handle on the EL context via the ConditionContext</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#9aedfe">boolean</span> result <span style="color:#ff6ac1">=</span> (Boolean) resolver.<span style="color:#57c7ff">evaluate</span>(expression, expressionContext);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// ...</span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// here we create a message the user will see when debugging</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> ConditionOutcome(result, message.<span style="color:#57c7ff">toString</span>());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the end, the <code>@Conditional</code> are resolved to simple booleans, via the <code>ConditionOutcome.isMatch</code> method.</p>
<h2 id="the-applicationcontextinitializers">The <code>ApplicationContextInitializer</code>s</h2>
<p>The second possibility that the <code>spring.factories</code> file offers, is to define application initializers.
They allow us to manipulate Spring&rsquo;s <code>applicationContext</code> before the application is loaded.</p>
<p>In particular, they can create listeners on the context thanks to the <code>ConfigurableApplicationContext#addApplicationListener</code>
method.</p>
<p>Spring Boot does that in the <code>AutoConfigurationReportLoggingInitializer</code> which listens to system events, like context refresh or the application&rsquo;s failure to start.
This will help create the auto-configuration report when you start your application
in debug mode.</p>
<p>You can start your application in debug mode with either the <code>-Ddebug</code> flag or add the property <code>debug=true</code> to <code>application.properties</code>.</p>
<h2 id="debug-spring-boot-auto-configuration">Debug Spring Boot Auto-Configuration</h2>
<p>The documentation gives us <a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-troubleshoot-auto-configuration">some advice</a> to
understand what happened during the auto-configuration.</p>
<p>When launched in debug mode, Spring Boot will generate a report that looks like this one:</p>
<pre tabindex="0"><code>Positive matches:
-----------------

   MessageSourceAutoConfiguration
      - @ConditionalOnMissingBean (types: org.springframework.context.MessageSource; SearchStrategy: all) found no beans (OnBeanCondition)

   JmxAutoConfiguration
      - @ConditionalOnClass classes found: org.springframework.jmx.export.MBeanExporter (OnClassCondition)
      - SpEL expression on org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration: ${spring.jmx.enabled:true} (OnExpressionCondition)
      - @ConditionalOnMissingBean (types: org.springframework.jmx.export.MBeanExporter; SearchStrategy: all) found no beans (OnBeanCondition)

   DispatcherServletAutoConfiguration
      - found web application StandardServletEnvironment (OnWebApplicationCondition)
      - @ConditionalOnClass classes found: org.springframework.web.servlet.DispatcherServlet (OnClassCondition)


Negative matches:
-----------------

   DataSourceAutoConfiguration
      - required @ConditionalOnClass classes not found: org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType (OnClassCondition)

   DataSourceTransactionManagerAutoConfiguration
      - required @ConditionalOnClass classes not found: org.springframework.jdbc.core.JdbcTemplate,org.springframework.transaction.PlatformTransactionManager (OnClassCondition)

   MongoAutoConfiguration
      - required @ConditionalOnClass classes not found: com.mongodb.Mongo (OnClassCondition)

   FallbackWebSecurityAutoConfiguration
      - SpEL expression on org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration: !${security.basic.enabled:true} (OnExpressionCondition)

   SecurityAutoConfiguration
      - required @ConditionalOnClass classes not found: org.springframework.security.authentication.AuthenticationManager (OnClassCondition)

   EmbeddedServletContainerAutoConfiguration.EmbeddedJetty
      - required @ConditionalOnClass classes not found: org.eclipse.jetty.server.Server,org.eclipse.jetty.util.Loader (OnClassCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#localeResolver
      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.LocaleResolver; SearchStrategy: all) found no beans (OnBeanCondition)
      - SpEL expression: &#39;${spring.mvc.locale:}&#39; != &#39;&#39; (OnExpressionCondition)

   WebSocketAutoConfiguration
      - required @ConditionalOnClass classes not found: org.springframework.web.socket.WebSocketHandler,org.apache.tomcat.websocket.server.WsSci (OnClassCondition)
</code></pre><p>For each auto-configuration, we can see why it was initiated or why it failed.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Spring Boot&rsquo;s approach leverages the possibilities of Spring 4 and allows to create an auto-configured
<a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-first-application-executable-jar">executable jar</a>.</p>
<p>Don&rsquo;t forget that, as <a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-replacing-auto-configuration">the documentation states</a>, you can gradually replace the auto-configuration by declaring your own beans.</p>
<p>What I love about Spring Boot is that it allows you to prototype an application very quickly but also to learn with its
source. Auto-configurations are neat pieces of code that can teach you a thing or two about Spring.</p>
<p>As Josh Long, developer advocate at Pivotal, said:</p>
<!-- raw HTML omitted -->
]]></content:encoded></item><item><title>Review of Learning Spring Boot</title><link>https://geowarin.com/review-of-learning-spring-boot/</link><pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/review-of-learning-spring-boot/</guid><description>Review of the book Learning Spring Boot by Greg L. Turnquist</description><content:encoded><![CDATA[<p>Today, I&rsquo;ll be reviewing the first book ever written on Spring Boot, <a href="https://www.packtpub.com/application-development/learning-spring-boot">Learning Spring Boot</a>, by Greg L. Turnquist.
Packt Publishing, the editor, contacted me to review it during its writing but I&rsquo;ll remain as unbiased as possible.</p>
<p>It&rsquo;s a good book, well worth reading if you want to learn how spring boot works but more globally, it will
give you good insights and tips on the capabilities of Spring and its integration with other technologies.</p>
<h2 id="summary">Summary</h2>
<p>The book has five chapters:</p>
<ol>
<li>Quick Start with Groovy</li>
<li>Quick Start with java</li>
<li>Debugging and Managing Your App</li>
<li>Data Access with Spring boot</li>
<li>Securing your App with Spring Boot</li>
</ol>
<p>Each chapter is one big tutorial that you can follow along by coding. I guess you will be better off with the e-book version
for copy-paste even if the entire code is <a href="https://github.com/learning-spring-boot/learning-spring-boot-code">available on github</a>.</p>
<p>It will be a better experience for mac users, as the author gives some instructions on how to install the dependencies (like Active MQ)
with brew. I guess you can achieve the same results with a small effort on other platforms as well.</p>
<h2 id="the-topics">The topics</h2>
<h3 id="quick-start-with-groovy">Quick Start with Groovy</h3>
<p>In the first chapter you will get started fast, using <a href="http://docs.spring.io/spring-boot/docs/current/reference/html/cli-using-the-cli.html">Spring Boot&rsquo;s CLI</a> and groovy.
I dig groovy so it&rsquo;s a nice start.</p>
<p>You will get some basic notions of testing with <a href="https://code.google.com/p/spock/">spock</a>, manage javascript dependencies
with WebJars and bower and learn how to use <a href="http://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-remote-shell.html">CRaSH</a> to consult and monitor
your app through a remote shell which is amazing.</p>
<h3 id="quick-start-with-java">Quick Start with java</h3>
<p>In this chapter, you will build a classic java application with Spring Boot.
But you&rsquo;ll also use the <a href="https://github.com/spring-projects/spring-social-github">Spring Social Github</a>, consume its API and leverage <a href="http://projects.spring.io/spring-mobile/">Spring Mobile</a> and jQuery mobile to
develop a simple application working on mobile devices.</p>
<h3 id="debugging-and-managing-your-app">Debugging and Managing Your App</h3>
<p>This chapter is about <a href="http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-messaging.html">JMS integration</a> with either an in memory broker or with ActiveMQ.
You will also add health checks, custom CRaSH commands and connect to your app with JMX to monitor your queue.</p>
<h3 id="data-access-with-spring-boot">Data Access with Spring Boot</h3>
<p>In this chapter, you will use Spring Data and <a href="http://projects.spring.io/spring-data-rest/">Spring Data Rest</a> with either H2 and MySQL or Mongo
and produce a RESTful, discoverable json API.
You will use profiles to use different configuration in development and in production.</p>
<h3 id="securing-your-app-with-spring-boot">Securing Your App with Spring Boot</h3>
<p>In this chapter you will get dig into <a href="http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-security.html">Spring Security</a>
with basic http auth, in memory authentication and create a real in database security model.
You will also learn how to configure your Tomcat to be more secure <a href="http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-configure-ssl">using SSL</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Whatever are your current skills with Spring, you will undoubtedly learn some new things reading the book.
I did and I enjoyed the experience. The topics addressed by Greg L. Turnquist are diverse and interesting
and the book is easy to follow.</p>
<p>If you work with Spring often, you have to understand how Spring Boot works.
It&rsquo;s an amazing tool for fast prototyping and a wonderful way to dig deeper into the framework by small increments.</p>
]]></content:encoded></item><item><title>A simple Spring Boot and Jersey Application</title><link>https://geowarin.com/a-simple-spring-boot-and-jersey-application/</link><pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate><guid>https://geowarin.com/a-simple-spring-boot-and-jersey-application/</guid><description>How to setup a simple spring-boot and jersey application</description><content:encoded><![CDATA[<p>Spring boot RC1 <a href="https://spring.io/blog/2014/01/22/spring-boot-1-0-0-rc1-released">is available</a>.</p>
<p><em>Update</em> : <a href="https://spring.io/blog/2014/02/12/spring-boot-1-0-0-rc2-released">RC3 released</a> I updated the project.</p>
<p>It takes spring development and fast prototyping to a whole new level by taking care of all the dependencies for you, auto-detecting your configuration, providing an executable jar (great for deploying in the cloud), and much more.</p>
<p>In this post we&rsquo;ll see how to integrate spring-boot with jersey, including testing of Jersey controllers with <a href="https://jersey.java.net/documentation/latest/test-framework.html">jersey-test</a>.</p>
<p>Of course, the source code is available <a href="https://github.com/geowarin/springboot-jersey">on my github</a>.</p>
<h2 id="setting-up-spring-boot">Setting up spring-boot</h2>
<p><a href="http://projects.spring.io/spring-boot/">Spring boot</a> aims towards simplicity and convention over configuration. First step is to include the necessary configuration in your pom.xml :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;parent&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;artifactId&gt;</span>spring-boot-starter-parent<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;version&gt;</span>1.0.0.RC3<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/parent&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;dependencies&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;artifactId&gt;</span>spring-boot-starter-web<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/dependencies&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;repositories&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;repository&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;id&gt;</span>spring-milestones<span style="color:#ff6ac1">&lt;/id&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;name&gt;</span>Spring Milestones<span style="color:#ff6ac1">&lt;/name&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;url&gt;</span>http://repo.spring.io/milestone<span style="color:#ff6ac1">&lt;/url&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;snapshots&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;enabled&gt;</span>false<span style="color:#ff6ac1">&lt;/enabled&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;/snapshots&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/repository&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/repositories&gt;</span>
</span></span></code></pre></div><p>One of the good ideas of spring boot is to provide all the &lsquo;boilerplate&rsquo; configuration for you by letting you inherit their parent configuration.</p>
<p>Then, you&rsquo;ll select a starter, in this case, we are going to develop a web application, so starter-web is fine.</p>
<p>Now, we&rsquo;ll create a main function for our application :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@EnableAutoConfiguration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">Application</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">main</span>(String<span style="color:#ff6ac1">[]</span> args) <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">new</span> SpringApplicationBuilder(Application.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">showBanner</span>(<span style="color:#ff6ac1">false</span>)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">run</span>(args);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We will just add an index.html file in the webapp directory and we should be ok.
With this configuration, you can run the main function and you&rsquo;ll see your index file.</p>
<p>Awesome.</p>
<h2 id="runnable-jar">Runnable jar</h2>
<p>Spring boot allows you to package your application as a runnable jar. Include the following in your <code>pom.xml</code> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;build&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;plugins&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;plugin&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;/plugin&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/plugins&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/build&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;pluginRepositories&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;pluginRepository&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;id&gt;</span>spring-milestones<span style="color:#ff6ac1">&lt;/id&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;url&gt;</span>http://repo.spring.io/milestone<span style="color:#ff6ac1">&lt;/url&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/pluginRepository&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/pluginRepositories&gt;</span>
</span></span></code></pre></div><p>With this, when running <code>mvn package</code>, you will generate the runnable jar.
Just <code>java -jar</code> it to launch an embedded Tomcat containing your webapp!</p>
<h2 id="integrating-jersey">Integrating jersey</h2>
<p>Jersey has a spring support project <a href="https://jersey.java.net/documentation/latest/spring.html">jersey-spring-3</a>. Despite what its name suggests, the project is (still?) compatible with spring 4.0 so we&rsquo;ll use it.</p>
<p>It basically allows you to inject spring beans in your jersey controllers.</p>
<p>To complete our configuration we&rsquo;ll add the jersey servlet to our application together with a small class to configure it.</p>
<p>In the Application :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> ServletRegistrationBean <span style="color:#57c7ff">jerseyServlet</span>() {
</span></span><span style="display:flex;"><span>    ServletRegistrationBean registration <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ServletRegistrationBean(<span style="color:#ff6ac1">new</span> ServletContainer(), <span style="color:#5af78e">&#34;/rest/*&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">// our rest resources will be available in the path /rest/*</span>
</span></span><span style="display:flex;"><span>    registration.<span style="color:#57c7ff">addInitParameter</span>(ServletProperties.<span style="color:#57c7ff">JAXRS_APPLICATION_CLASS</span>, JerseyConfig.<span style="color:#57c7ff">class</span>.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> registration;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We also need to add the <code>@ComponentScan</code> annotation to find our spring services and components (including jersey)</p>
<p>Next, we&rsquo;ll create the JerseyConfig class :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">JerseyConfig</span> <span style="color:#ff5c57">extends</span> ResourceConfig {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">JerseyConfig</span>() {
</span></span><span style="display:flex;"><span>        register(RequestContextFilter.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>        packages(<span style="color:#5af78e">&#34;com.geowarin.rest&#34;</span>);
</span></span><span style="display:flex;"><span>        register(LoggingFilter.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here we are providing the package(s) in which our rest resources are.</p>
<p>Speaking about our rest resources, we&rsquo;ll create a simple one :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Path</span>(<span style="color:#5af78e">&#34;/&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RestResource</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@GET</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Produces</span>(MediaType.<span style="color:#57c7ff">APPLICATION_JSON</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Path</span>(<span style="color:#5af78e">&#34;/hello&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">hello</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;Hello World&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There you have it : the dreadful hello world !</p>
<p>In the <a href="https://github.com/geowarin/springboot-jersey">complete example</a>, I show you how to generate JSON from a domain class.</p>
<p>Basically all you have to do is provide classes with the <code>@XmlRootElement</code> annotation, add the getters and setters for the properties you want serialized and don&rsquo;t forget to provide a default constructor (see <a href="https://github.com/geowarin/springboot-jersey/blob/master/src/main/java/com/geowarin/domain/Message.java">here</a>).</p>
<p>To show that dependency injection works, we&rsquo;ll add a simple service :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Singleton</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MessageService</span> {
</span></span><span style="display:flex;"><span>    List<span style="color:#ff6ac1">&lt;</span>Message<span style="color:#ff6ac1">&gt;</span> messages <span style="color:#ff6ac1">=</span> Collections.<span style="color:#57c7ff">synchronizedList</span>(<span style="color:#ff6ac1">new</span> ArrayList<span style="color:#ff6ac1">&lt;</span>Message<span style="color:#ff6ac1">&gt;</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@PostConstruct</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">init</span>() {
</span></span><span style="display:flex;"><span>        messages.<span style="color:#57c7ff">add</span>(<span style="color:#ff6ac1">new</span> Message(<span style="color:#5af78e">&#34;Joe&#34;</span>, <span style="color:#5af78e">&#34;Hello&#34;</span>));
</span></span><span style="display:flex;"><span>        messages.<span style="color:#57c7ff">add</span>(<span style="color:#ff6ac1">new</span> Message(<span style="color:#5af78e">&#34;Jane&#34;</span>, <span style="color:#5af78e">&#34;Spring boot is cool !&#34;</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> List<span style="color:#ff6ac1">&lt;</span>Message<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">getMessages</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> messages;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can now autowire it to our Jersey controller!</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Path</span>(<span style="color:#5af78e">&#34;/&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RestResource</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> MessageService messageService;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@GET</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Produces</span>(MediaType.<span style="color:#57c7ff">APPLICATION_JSON</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Path</span>(<span style="color:#5af78e">&#34;/messages&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> List<span style="color:#ff6ac1">&lt;</span>Message<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">message</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> messageService.<span style="color:#57c7ff">getMessages</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><a href="http://www.eclipse.org/eclipselink/moxy.php">Moxy</a> will automatically convert
the returned result to JSON.</p>
<h2 id="testing">Testing</h2>
<p>Real programmers do tests. We want to test our controller right? There is a framework for that: <a href="https://jersey.java.net/documentation/latest/test-framework.html">jersey-test</a>.</p>
<p><em>The Problem?</em> it does not (yet) support annotated configuration.</p>
<!-- raw HTML omitted -->
<p><em>Update</em> : I submitted a <a href="https://github.com/jersey/jersey/pull/59">pull request</a> which has been accepted by Jersey. I updated the project to use the 2.6 snapshot release of jersey which includes the modified <code>SpringComponentProvider</code>.</p>
<p>Now the test :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RestResourceTest</span> <span style="color:#ff5c57">extends</span> JerseyTest {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> Application <span style="color:#57c7ff">configure</span>() {
</span></span><span style="display:flex;"><span>        ApplicationContext context <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> AnnotationConfigApplicationContext(TestConfig.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> JerseyConfig()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">property</span>(<span style="color:#5af78e">&#34;contextConfig&#34;</span>, context);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testHello</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">final</span> String hello <span style="color:#ff6ac1">=</span> target(<span style="color:#5af78e">&#34;hello&#34;</span>).<span style="color:#57c7ff">request</span>().<span style="color:#57c7ff">get</span>(String.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>        assertThat(hello).<span style="color:#57c7ff">isEqualTo</span>(<span style="color:#5af78e">&#34;Hello World&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testMessages</span>() <span style="color:#ff5c57">throws</span> JSONException {
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">final</span> String messages <span style="color:#ff6ac1">=</span> target(<span style="color:#5af78e">&#34;messages&#34;</span>).<span style="color:#57c7ff">request</span>().<span style="color:#57c7ff">get</span>(String.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>        String expected <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;[ &#34;</span> <span style="color:#ff6ac1">+</span>
</span></span><span style="display:flex;"><span>                <span style="color:#5af78e">&#34;{ &#39;author&#39;: &#39;Joe&#39;, &#39;contents&#39;: &#39;Hello&#39;},&#34;</span> <span style="color:#ff6ac1">+</span>
</span></span><span style="display:flex;"><span>                <span style="color:#5af78e">&#34;{ &#39;author&#39;: &#39;Jane&#39;, &#39;contents&#39;: &#39;Spring boot is cool !&#39;}&#34;</span> <span style="color:#ff6ac1">+</span>
</span></span><span style="display:flex;"><span>                <span style="color:#5af78e">&#34;]&#34;</span>;
</span></span><span style="display:flex;"><span>        JSONAssert.<span style="color:#57c7ff">assertEquals</span>(expected, messages, JSONCompareMode.<span style="color:#57c7ff">LENIENT</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Jersey Test will automatically select a provider from your classpath, in the example I&rsquo;m using the in memory provider which I believe to be the fastest but you can also use <a href="https://grizzly.java.net/">grizzly</a> and others instead.</p>
<p>I&rsquo;m using <a href="https://github.com/skyscreamer/JSONassert">JSONassert</a> to test json results.</p>
<p>In the example, we are providing a simple, lighter <code>TestConfig</code> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ComponentScan</span>(basePackageClasses <span style="color:#ff6ac1">=</span> RestResource.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">TestConfig</span> {
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Testing with Jersey Test is fast and intuitive.</p>
<p>Spring boot is a nice addition to the spring ecosystem. Now that everything should be accessible from the cloud, so should be spring webapps !</p>
]]></content:encoded></item></channel></rss>