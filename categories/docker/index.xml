<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>docker on Geowarin</title><link>https://geowarin.com/categories/docker/</link><description>Recent content in docker on Geowarin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 12 Jan 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://geowarin.com/categories/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Build a Docker image of your Spring Boot app</title><link>https://geowarin.com/build-a-docker-image-of-your-spring-boot-app/</link><pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/build-a-docker-image-of-your-spring-boot-app/</guid><description>With Gradle, you can create a Docker image of your Spring Boot application and ship it instead of shipping a jar</description><content:encoded><![CDATA[<p>If you like having a self-contained application as a deliverable
for your project, the idea of putting your Spring applications in a Docker
container might be appealing to you.</p>
<p>In this article, I will show you a simple way to make a docker image the output
of your Gradle build, thanks to the <a href="https://github.com/Transmode/gradle-docker">gradle-docker</a> plugin.</p>
<p>The code that we will build is a simple console application powered by Spring Boot
that will periodically write Chuck Norris facts to the standard output.
It is <a href="https://github.com/geowarin/sout-chuck-norris">available on github</a> and on <a href="https://hub.docker.com/r/geowarin/sout-chuck-norris/">Docker Hub</a>.</p>
<h2 id="take-a-spring-boot-application">Take a Spring boot application</h2>
<p>You can easily generate a starter project with <a href="http://start.spring.io/">start.spring.io</a>
or with <a href="https://www.jetbrains.com/idea/help/creating-spring-boot-projects.html">IntelliJ</a>.
We will create a gradle/groovy application with no Spring Boot starter to keep the code very simple.</p>
<p>Click on <a href="https://start.spring.io/#!type=gradle-project&amp;language=groovy&amp;groupId=com.github.geowarin&amp;artifactId=sout-chuck-norris">this link</a> to generate the project!</p>
<p>Unzip it and open it in your favorite IDE.
Since the application is going to loop forever, you can remove the generated test, which
would loop forever too.</p>
<p>Add the following dependency to your <code>build.gradle</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>compile <span style="color:#5af78e">&#39;org.codehaus.groovy.modules.http-builder:http-builder:0.7.1&#39;</span>
</span></span></code></pre></div><p>Since we will use the JSONSlurper, the idiomatic way to parse JSON in groovy, we will need
to the change the groovy dependency to <code>groovy-all</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>compile <span style="color:#5af78e">&#39;org.codehaus.groovy:groovy-all&#39;</span>
</span></span></code></pre></div><h2 id="the-code">The code</h2>
<p>The code is really simple:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span><span style="color:#ff6ac1">package</span> com<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">github</span><span style="color:#ff6ac1">.</span><span style="color:#57c7ff">geowarin</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> groovy.util.logging.Log4j
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> groovyx.net.http.RESTClient
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> org.apache.log4j.Level
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> org.springframework.boot.CommandLineRunner
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> org.springframework.stereotype.Component
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Log4j</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MainRunner</span> <span style="color:#ff5c57">implements</span> CommandLineRunner <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Random random <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Random<span style="color:#ff6ac1">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">run</span><span style="color:#ff6ac1">(</span>String<span style="color:#ff6ac1">...</span> args<span style="color:#ff6ac1">)</span> <span style="color:#ff5c57">throws</span> Exception <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">while</span> <span style="color:#ff6ac1">(</span><span style="color:#ff6ac1">true</span><span style="color:#ff6ac1">)</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>            log<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">log</span><span style="color:#ff6ac1">(</span>randomLevel<span style="color:#ff6ac1">(),</span> randomMessage<span style="color:#ff6ac1">())</span>
</span></span><span style="display:flex;"><span>            sleep <span style="color:#ff9f43">3000</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> Level <span style="color:#57c7ff">randomLevel</span><span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">switch</span> <span style="color:#ff6ac1">(</span>random<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">nextInt</span><span style="color:#ff6ac1">(</span><span style="color:#ff9f43">3</span><span style="color:#ff6ac1">))</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">case</span> <span style="color:#ff9f43">0</span><span style="color:#ff6ac1">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">return</span> Level<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">DEBUG</span><span style="color:#ff6ac1">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">case</span> <span style="color:#ff9f43">1</span><span style="color:#ff6ac1">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">return</span> Level<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">INFO</span><span style="color:#ff6ac1">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">case</span> <span style="color:#ff9f43">2</span><span style="color:#ff6ac1">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">return</span> Level<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">ERROR</span><span style="color:#ff6ac1">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">default</span><span style="color:#ff6ac1">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ff6ac1">return</span> Level<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">INFO</span><span style="color:#ff6ac1">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> String <span style="color:#57c7ff">randomMessage</span><span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#9aedfe">def</span> client <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> RESTClient<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;http://api.icndb.com/jokes/&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#9aedfe">def</span> response <span style="color:#ff6ac1">=</span> client<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">get</span><span style="color:#ff6ac1">(</span><span style="color:#ff5c57">path:</span> <span style="color:#5af78e">&#39;random&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>        response<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">data</span><span style="color:#ff6ac1">.</span><span style="color:#57c7ff">value</span><span style="color:#ff6ac1">.</span><span style="color:#57c7ff">joke</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span></code></pre></div><h2 id="build-the-docker-image">Build the docker image</h2>
<p>Add the plugin repository to find the Docker plugin:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>buildscript <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>  ext <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    springBootVersion <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#39;1.3.0.RELEASE&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>  repositories <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    mavenCentral<span style="color:#ff6ac1">()</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>  dependencies <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    classpath<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#34;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&#34;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>    classpath <span style="color:#5af78e">&#34;se.transmode.gradle:gradle-docker:1.2&#34;</span> <span style="color:#78787e">// &lt;- Here
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span>  <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span></code></pre></div><p>Apply the Docker plugin:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>apply <span style="color:#ff5c57">plugin:</span> <span style="color:#5af78e">&#39;docker&#39;</span>
</span></span></code></pre></div><p>Finally, add the buildDocker task:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>task <span style="color:#57c7ff">buildDocker</span><span style="color:#ff6ac1">(</span><span style="color:#ff5c57">type:</span> Docker<span style="color:#ff6ac1">)</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>  baseImage <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#39;develar/java:latest&#39;</span>
</span></span><span style="display:flex;"><span>  push <span style="color:#ff6ac1">=</span> project<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">hasProperty</span><span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;push&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>  tag <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#39;geowarin/sout-chuck-norris&#39;</span>
</span></span><span style="display:flex;"><span>  addFile <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    from jar
</span></span><span style="display:flex;"><span>    rename <span style="color:#ff6ac1">{</span><span style="color:#5af78e">&#39;app.jar&#39;</span><span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>  entryPoint<span style="color:#ff6ac1">([</span><span style="color:#5af78e">&#39;java&#39;</span><span style="color:#ff6ac1">,</span> <span style="color:#5af78e">&#39;-Djava.security.egd=file:/dev/./urandom&#39;</span><span style="color:#ff6ac1">,</span> <span style="color:#5af78e">&#39;-jar&#39;</span><span style="color:#ff6ac1">,</span> <span style="color:#5af78e">&#39;/app.jar&#39;</span><span style="color:#ff6ac1">])</span>
</span></span><span style="display:flex;"><span>  <span style="color:#78787e">// exposePort(8080)
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"></span><span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>buildDocker<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">dependsOn</span><span style="color:#ff6ac1">(</span>build<span style="color:#ff6ac1">)</span>
</span></span></code></pre></div><p>With this Docker plugin, every Docker instruction is available in the Gradle build
so you don&rsquo;t even have to write a Dockerfile.</p>
<p>In this task, we create an image called <code>geowarin/sout-chuck-norris</code> (change geowarin to
your user name).
It will contain only the jar produced by our build, which will be renamed to <code>app.jar</code>.
Then, the entry point of the container is simply <code>java -jar app.jar</code>.</p>
<p>The advantage of using an entry point instead of a <code>CMD</code> is that we can append command
line arguments to the <code>docker run ...</code> command and those will be passed to our application.</p>
<p>The downside is you cannot use <code>docker exec ... bash</code> to attach to the container.</p>
<p>We use Develar&rsquo;s java 8 image. It is built on top of Alpine and weights less than
120MB.</p>
<p>You can now run <code>./gradlew buildDocker</code> to create the docker image containing
our project.</p>
<pre tabindex="0"><code>REPOSITORY                   TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
geowarin/sout-chuck-norris   latest              85ff1a728670        4 seconds ago       135.9 MB
</code></pre><h2 id="publish-the-image-to-the-docker-hub">Publish the image to the Docker hub</h2>
<p>Create an account on <a href="https://hub.docker.com/">the docker hub</a> then use
<code>docker login</code> to authenticate your client.</p>
<p>You can now run <code>./gradlew buildDocker -Ppush</code> to publish your image to docker
hub.</p>
<p>Once it is published, anyone can run you application.
If the image is not available on their machine, it will be pulled from the docker hub.</p>
<pre tabindex="0"><code>$&gt; docker run geowarin/sout-chuck-norris
Unable to find image &#39;geowarin/sout-chuck-norris:latest&#39; locally
latest: Pulling from geowarin/sout-chuck-norris
09ef480f93cc: Verifying Checksum
a6fb0a3c9260: Download complete
Pulling repository docker.io/geowarin/sout-chuck-norris
914b85281644: Pulling dependent layers
914b85281644: Download complete
Status: Downloaded newer image for geowarin/sout-chuck-norris:latest

  .   ____          _            __ _ _
 /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  &#39;  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.3.1.RELEASE)

2016-01-12 16:54:19.089  INFO 1 --- [           main] c.g.geowarin.SoutChuckNorrisApplication  : Starting SoutChuckNorrisApplication on 05d1fedaba4d with PID 1 (/app.jar started by root in /)
2016-01-12 16:54:19.093  INFO 1 --- [           main] c.g.geowarin.SoutChuckNorrisApplication  : No active profile set, falling back to default profiles: default
2016-01-12 16:54:19.205  INFO 1 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@4533542a: startup date [Tue Jan 12 16:54:19 GMT 2016]; root of context hierarchy
2016-01-12 16:54:20.609  INFO 1 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
2016-01-12 16:54:21.456  INFO 1 --- [           main] com.github.geowarin.MainRunner           : Chuck Norris can download emails with his pick-up.
</code></pre><h2 id="conclusion">Conclusion</h2>
<p>Spring boot producing runnable jars, it is fairly easy to embed them inside
of a container.</p>
<p>As usual, do not hesitate to give me your feedback and to checkout the code
<a href="https://github.com/geowarin/sout-chuck-norris">on github</a>!</p>
]]></content:encoded></item></channel></rss>