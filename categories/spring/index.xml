<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring on Geowarin</title><link>https://geowarin.github.io/categories/spring/</link><description>Recent content in spring on Geowarin</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 23 Dec 2019 01:20:59 +0100</lastBuildDate><atom:link href="https://geowarin.github.io/categories/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Run your frontend alongside spring boot</title><link>https://geowarin.github.io/run-your-frontend-alongside-spring-boot/</link><pubDate>Mon, 23 Dec 2019 01:20:59 +0100</pubDate><guid>https://geowarin.github.io/run-your-frontend-alongside-spring-boot/</guid><description>Assumptions:
Your backend serves the API (REST, graphQL) You build your javascript with a separate bundler (parcel, webpack) Your frontend uses a push state (HTML 5 history) router You want hot module reloading (HMR) for the best developer experience TLDR; The github repository shows four different solutions.
1. CORS The most obvious solution is to set up the backend to allow Cross-Origin Resource Sharing (CORS) with the frontend, which runs on the development web server.</description></item><item><title>Social login with Spring</title><link>https://geowarin.github.io/social-login-with-spring/</link><pubDate>Fri, 12 Feb 2016 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/social-login-with-spring/</guid><description>Nowadays, it&amp;rsquo;s getting rare and even a bit annoying when a service rolls up its own authentication mechanism instead of relying on a OAuth sign-on with our social networks.
Login via social networks means fewer passwords to remember, and stronger guarantees in terms of security because you can check and control the authorizations of the applications you use.
In this article, I will show you how to allow users to log into your application via Twitter from a rich Javascript client (React).</description></item><item><title>Spring Boot and React hot loader</title><link>https://geowarin.github.io/spring-boot-and-react-hot-loader/</link><pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/spring-boot-and-react-hot-loader/</guid><description>When I develop web applications, I love using React. I&amp;rsquo;m also a Spring and groovy addict.
Those two stacks make me more productive. Can we have the best of both worlds?
I will show you step by step how I created this project. Feel free to fiddle with it and give me your feedback.
Goal My perfect stack on the backend is to use Spring boot and groovy. With the latest version of Spring boot, there is a new tool called dev-tools that will automatically reload the embedded server when you recompile your project.</description></item><item><title>Completable futures with Spring async</title><link>https://geowarin.github.io/completable-futures-with-spring-async/</link><pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/completable-futures-with-spring-async/</guid><description>Since version 8, java has a way better abstraction than java.util.Future called CompletableFuture. This new API along with the lambdas enables new ways of reasoning with futures by composing, listening and joining them.
Futures are traditionally created by submitting tasks to an Executor. Spring allows declaring one or multiple executors and will submit any method annotated with @Async as tasks for those executors.
The big problem is that executors still return Futures and not CompletableFutures.</description></item><item><title>Understanding Spring Boot</title><link>https://geowarin.github.io/understanding-spring-boot/</link><pubDate>Fri, 06 Mar 2015 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/understanding-spring-boot/</guid><description>Spring boot is an opinionated library that allows to create executable Spring applications with a convention over configuration approach.
The magic behind this framework lies in the @EnableAutoConfiguration annotation, which will automatically load all the beans the application requires depending on what Spring Boot finds in the classpath.
The @Enable* annotations The @Enable... annotations are not new, they were first introduced in Spring 3 when the idea of replacing the XML files with java annotated classes is born.</description></item><item><title>A simple Spring Boot and Jersey Application</title><link>https://geowarin.github.io/a-simple-spring-boot-and-jersey-application/</link><pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/a-simple-spring-boot-and-jersey-application/</guid><description>Spring boot RC1 is available.
Update : RC3 released I updated the project.
It takes spring development and fast prototyping to a whole new level by taking care of all the dependencies for you, auto-detecting your configuration, providing an executable jar (great for deploying in the cloud), and much more.
In this post we&amp;rsquo;ll see how to integrate spring-boot with jersey, including testing of Jersey controllers with jersey-test.
Of course, the source code is available on my github.</description></item><item><title>Complete example of a Spring MVC 3.2 project</title><link>https://geowarin.github.io/complete-example-of-a-spring-mvc-3.2-project/</link><pubDate>Wed, 23 Jan 2013 00:00:00 +0000</pubDate><guid>https://geowarin.github.io/complete-example-of-a-spring-mvc-3.2-project/</guid><description>You want to get started with Spring MVC 3.2 with a complete XML-less configuration? Have a cool simple project with a lot of the nice-to-have features?
A templating framework (we will use SiteMesh for this example - I think it is one of the simplest, most powerful frameworks out there) Localized and custom text and validation messages with reloadable bundles in development UTF-8 encoding filter for your user inputs Use the twitter boostrap for a responsive, slick design Unit tests of your controllers using spring-test-mvc Be able to run it with embedded tomcat or jetty maven plugins?</description></item><item><title>Using spring in a Java SE environment and implementing the chain of responsibility pattern</title><link>https://geowarin.github.io/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/</link><pubDate>Sun, 20 Jan 2013 19:31:56 +0000</pubDate><guid>https://geowarin.github.io/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/</guid><description>In this post I will show you how to use spring 3.0 Java based configuration in a Java SE environment, taking advantage of spring autowiring to implement the chain of responsibility design pattern with components and services in a simple project. We will also use spring&amp;rsquo;s PropertySourcesPlaceholderConfigurer to inject custom properties into our beans with the @Value annotation and test our application with spring-test.
Some fun in perspective ! Tag along.</description></item></channel></rss>