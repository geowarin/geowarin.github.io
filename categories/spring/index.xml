<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Spring on Geowarin</title><link>https://geowarin.com/categories/spring/</link><description>Recent content in Spring on Geowarin</description><generator>Hugo -- 0.138.0</generator><language>en</language><lastBuildDate>Mon, 23 Dec 2019 01:20:59 +0100</lastBuildDate><atom:link href="https://geowarin.com/categories/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Run your frontend alongside spring boot</title><link>https://geowarin.com/run-your-frontend-alongside-spring-boot/</link><pubDate>Mon, 23 Dec 2019 01:20:59 +0100</pubDate><guid>https://geowarin.com/run-your-frontend-alongside-spring-boot/</guid><description>Running a javascript application alongside your spring boot backend can be bit of a conundrum. Here are several ways to tackle this problem.</description><content:encoded><![CDATA[<p>Assumptions:</p>
<ul>
<li>Your backend serves the API (REST, graphQL)</li>
<li>You build your javascript with a separate bundler (parcel, webpack)</li>
<li>Your frontend uses a push state (HTML 5 history) router</li>
<li>You want hot module reloading (HMR) for the best developer experience</li>
</ul>
<h2 id="tldr">TLDR;</h2>
<p>The <a href="https://github.com/geowarin/boot-js">github repository</a> shows four different solutions.</p>
<h2 id="1-cors">1. CORS</h2>
<p>The most obvious solution is to set up the backend to allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">Cross-Origin Resource Sharing</a> (CORS)
with the frontend, which runs on the development web server.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ConditionalOnProperty</span>(name = [<span style="color:#5af78e">&#34;com.geowarin.cors.allowedOrigin&#34;</span>])
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">fun</span> <span style="color:#57c7ff">corsFilter</span>(corsProperties: CorsProperties): CorsWebFilter {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">val</span> source = UrlBasedCorsConfigurationSource().apply {
</span></span><span style="display:flex;"><span>      registerCorsConfiguration(<span style="color:#5af78e">&#34;/api/**&#34;</span>, CorsConfiguration().apply {
</span></span><span style="display:flex;"><span>        addAllowedOrigin(corsProperties.allowedOrigin<span style="color:#ff6ac1">!!</span>)
</span></span><span style="display:flex;"><span>        addAllowedHeader(<span style="color:#5af78e">&#34;*&#34;</span>)
</span></span><span style="display:flex;"><span>        addAllowedMethod(<span style="color:#5af78e">&#34;*&#34;</span>)
</span></span><span style="display:flex;"><span>      })
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> CorsWebFilter(source)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We run the frontend with its included web server on <code>localhost:1234</code>.
The spring backend runs on <code>localhost:8080</code>.</p>
<p>Navigating on <code>localhost:1234</code>, you will see that the frontend is able to call web services because the backend allows
CORS from that origin.</p>
<p>Pros:</p>
<ul>
<li>Close to a production environment</li>
<li>Simple enough</li>
</ul>
<p>Cons:</p>
<ul>
<li>CORS?</li>
</ul>
<h2 id="2-embed-javascript-into-the-backend">2. Embed javascript into the backend</h2>
<p>Another solution is to embed the frontend resources directly inside the spring server, as static resources.
The advantage is that we have only one web server and everything is on the same host.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#ff6ac1">val</span> acceptsHtmlOnly: RequestPredicate = RequestPredicate { request <span style="color:#ff6ac1">-&gt;</span>
</span></span><span style="display:flex;"><span>  request.headers().accept().contains(<span style="color:#f3f99d">MediaType</span>.TEXT_HTML) <span style="color:#ff6ac1">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>      !request.headers().accept().contains(<span style="color:#f3f99d">MediaType</span>.ALL)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">class</span> <span style="color:#f3f99d">RouterConfig</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">fun</span> <span style="color:#57c7ff">indexRoutes</span>(props: EmbeddedProperties) = router {
</span></span><span style="display:flex;"><span>    (GET(<span style="color:#5af78e">&#34;*&#34;</span>) and acceptsHtmlOnly) {
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">val</span> indexHtml = DefaultResourceLoader().getResource(props.frontendDirectory)
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">val</span> indexHtml = frontendDirectory.createRelative(<span style="color:#5af78e">&#34;index.html&#34;</span>)
</span></span><span style="display:flex;"><span>      <span style="color:#f3f99d">ServerResponse</span>.ok().contentType(<span style="color:#f3f99d">MediaType</span>.TEXT_HTML).bodyValue(indexHtml)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableWebFlux</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">class</span> <span style="color:#f3f99d">WebConfig</span>(<span style="color:#ff6ac1">val</span> props: EmbeddedProperties) : WebFluxConfigurer {
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">override</span> <span style="color:#ff6ac1">fun</span> <span style="color:#57c7ff">addResourceHandlers</span>(registry: ResourceHandlerRegistry) {
</span></span><span style="display:flex;"><span>    registry.addResourceHandler(<span style="color:#5af78e">&#34;/**&#34;</span>)
</span></span><span style="display:flex;"><span>      .addResourceLocations(props.frontendDirectory)
</span></span><span style="display:flex;"><span>      .setCacheControl(props.cacheControl)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Navigating on <code>locahost:8080</code> you will see that the react application is able to call web services because they
both run on the same host.</p>
<p>This configuration might have some occasional problems with HMR not fully reloaded so it&rsquo;s not my favourite.</p>
<p><img alt="Oups" loading="lazy" src="/assets/images/articles/2019-12-23-javascript-framework-with-spring-backend/hmr-errors.png"></p>
<p>However, by generating the result of the frontend build in <code>src/main/resources/static</code> we both have a very simple
way to distribute the full web application, as well as a dev environment that is very similar to the production environment.</p>
<p>Pros:</p>
<ul>
<li>Simple to distribute</li>
<li>No CORS</li>
</ul>
<p>Cons:</p>
<ul>
<li>A bit of code to handle frontend routing on the backend</li>
<li>Clunky hot reloading</li>
<li>We cannot scale the backend and the frontend independently</li>
</ul>
<h2 id="3-javascript-proxy">3. Javascript proxy</h2>
<p>You might do the opposite, run an express web server which includes your bundler and proxies requests to <code>localhost:8080</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> Bundler <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;parcel&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> express <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;express&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> proxy <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;http-proxy-middleware&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> history <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;connect-history-api-fallback&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> bundler <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> Bundler(<span style="color:#5af78e">&#39;src/index.html&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> app <span style="color:#ff6ac1">=</span> express();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>app.use(history());
</span></span><span style="display:flex;"><span>app.use(proxy(<span style="color:#5af78e">&#39;/api&#39;</span>, {target<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;http://localhost:8080&#39;</span>, changeOrigin<span style="color:#ff6ac1">:</span> <span style="color:#ff6ac1">true</span>}));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>app.use(bundler.middleware());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>app.listen(<span style="color:#ff9f43">3000</span>, <span style="color:#5af78e">&#39;localhost&#39;</span>, (err) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">if</span> (err) {
</span></span><span style="display:flex;"><span>        console.log(err);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    console.log(<span style="color:#5af78e">&#39;Listening at http://localhost:3000&#39;</span>);
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>So going to <code>localhost:3000</code> we can see that the frontend is able to make web requests as if it is running on the
same host as the backend.</p>
<p>Pros:</p>
<ul>
<li>No CORS</li>
</ul>
<p>Cons:</p>
<ul>
<li>Not a production solution (needs to be complemented with another solution)</li>
</ul>
<h2 id="4-reverse-proxy">4. Reverse proxy</h2>
<p>We can run a third web server that routes both to our frontend and backend.
This is simple enough thanks to <code>docker-compose</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ff6ac1">version</span>: <span style="color:#5af78e">&#34;3&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">nginx</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">image</span>: nginx:latest
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">container_name</span>: brginx
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">volumes</span>:
</span></span><span style="display:flex;"><span>      - ./server.conf:/etc/nginx/conf.d/default.conf
</span></span><span style="display:flex;"><span>      - ../frontend/dist:/usr/share/nginx/html
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ff9f43">8081</span>:<span style="color:#ff9f43">8081</span>
</span></span></code></pre></div><p>Here is the nginx configuration:</p>
<pre tabindex="0"><code>server {
    listen       8081;
    server_name  localhost;

    location /api {
        proxy_pass   http://host.docker.internal:8080;
    }

    location / {
        root /usr/share/nginx/html;
        set $fallback_file /index.html;
        if ($http_accept !~ text/html) {
            set $fallback_file /null;
        }
        try_files $uri $fallback_file;
    }
}
</code></pre><p>So navigating to the nginx server on <code>localhost:8081</code>, we can see that the backend and the frontend appear to be on the
same host.</p>
<p>Pros:</p>
<ul>
<li>Close to a production environment</li>
<li>Flexible</li>
<li>Can scale with a load balancer</li>
</ul>
<p>Cons:</p>
<ul>
<li>3 processes</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Depending on how you wish to deploy your application, you might choose one of the approaches above or even mix them to
reach developer nirvana.</p>
<p>What about you? How do you develop your full stack application?</p>
<p>I&rsquo;d love to have your input!</p>
<p>Sources:</p>
<ul>
<li><a href="https://github.com/geowarin/boot-js">Github repository</a></li>
</ul>
]]></content:encoded></item><item><title>Social login with Spring</title><link>https://geowarin.com/social-login-with-spring/</link><pubDate>Fri, 12 Feb 2016 00:00:00 +0000</pubDate><guid>https://geowarin.com/social-login-with-spring/</guid><description>Log-in with your social account in your Spring application</description><content:encoded><![CDATA[<p>Nowadays, it&rsquo;s getting rare and even a bit annoying when a service rolls up its own
authentication mechanism instead of relying on a OAuth sign-on with our social
networks.</p>
<p>Login via social networks means fewer passwords to remember, and stronger guarantees
in terms of security because you can check and control the authorizations of the applications
you use.</p>
<p>In this article, I will show you how to allow users to log into your application
via Twitter from a rich Javascript client (React).</p>
<p>We will also persist our users connections in database.</p>
<p>The code is available <a href="https://github.com/geowarin/boot-social-api">on github</a>.</p>
<h2 id="setting-up-your-app-on-twitter">Setting up your app on Twitter</h2>
<p>Before coding anything, you will need to create a new Twitter application
in <a href="https://apps.twitter.com/">your twitter apps page</a>.</p>
<p><img alt="Creating a Twitter app" loading="lazy" src="/assets/images/articles/2016-02-twitter-app.png" title="Creating a Twitter app"></p>
<p>Then go to the &ldquo;Keys and access tokens&rdquo; tab and note your API key and API secret
ids.</p>
<p><img alt="Twitter app keys" loading="lazy" src="/assets/images/articles/2016-02-twitter-app-keys.png" title="Twitter app keys"></p>
<h2 id="creating-a-spring-boot-app">Creating a Spring Boot app</h2>
<p>Use the <a href="http://start.spring.io">Spring initializer</a> to create a new Spring Boot
application. You will need the following dependencies:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>dependencies <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>	compile<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;org.springframework.boot:spring-boot-devtools&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>	compile<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;org.springframework.boot:spring-boot-starter-security&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>	compile<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;org.springframework.boot:spring-boot-starter-social-twitter&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>	compile<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>	compile<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;org.springframework.boot:spring-boot-starter-jdbc&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>	compile<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;com.h2database:h2&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span></code></pre></div><p>Please copy your <code>appId</code> and <code>appSecret</code> in the <code>application.properties</code> file and
configure a few things:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#57c7ff">spring.social.twitter.appId</span><span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&lt;Consumer Key&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">spring.social.twitter.appSecret</span><span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&lt;Consumer Secret&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># Disable auto views, we are making an API</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">spring.social.auto-connection-views</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">false</span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># Disable basic security</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">security.basic.enabled</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">false</span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># Persist H2 data to disk to keep connection info between reboots</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">spring.datasource.url</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">jdbc:h2:~/social-test</span>
</span></span></code></pre></div><h2 id="sign-in-and-sign-up-flows">Sign-in and Sign-up flows</h2>
<p>Spring social has two different flows when someone logs into your app via social
networks.</p>
<p>The first time someone logs into your application, they will go through the sign-up flow.
If their ID already registered in Spring Social, they will go through the sign-in
flow instead.</p>
<p>You job is to create a <code>SignInAdapter</code> that will handle the sign-in process and
a controller that will decide what to do during the sign-up process (you will receive a
request on the <code>/signup</code> URL by default).</p>
<p>Here is an overview of the authentication flow in Spring Social:</p>
<p><img alt="Spring Social flow" loading="lazy" src="/assets/images/articles/2016-02-social-flow.png" title="Spring Social flow"></p>
<ul>
<li>Your application produces a POST request to <code>/signin/{providerId}</code></li>
<li>The <code>ProviderSigninController</code> then redirects the user to the identification provider&rsquo;s sign-in screen</li>
<li>The user logs in</li>
<li>The identification provider will send the OAuth token with GET request to <code>/signin/{providerId}</code></li>
<li>If the user is not found in the <code>UsersConnectionRepository</code>, the controller will use a <code>SessionStrategy</code> to store the pending login request and will then redirect to the signupUrl page</li>
<li>If the user is found, your <code>SignInAdapter</code> interface is called</li>
</ul>
<p>If you want to know more details about Spring social inner workings, check the <code>SocialWebAutoConfiguration</code> class of Spring Boot and the <code>ProviderSignInController</code> class
of Spring Social.</p>
<p>In the above diagram, we can see that we have two more extensions points:</p>
<ul>
<li>The <code>SessionStrategy</code>. By default, it stores temporary information about the connection
in the HTTP session</li>
<li>The <code>UsersConnectionRepository</code>. By default, Spring boot provides an <code>InMemoryUsersConnectionRepository</code>. Connections will be lost when your application
reboots.</li>
</ul>
<h2 id="spring-security-config">Spring Security Config</h2>
<p>We need to enable security in our application. Let&rsquo;s create a classic security
configuration.
It will make sure that users using our REST api are authenticated but will let calls
to <code>/api/session</code>, our authentication end point, go through:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Order</span>(SecurityProperties.<span style="color:#57c7ff">ACCESS_OVERRIDE_ORDER</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SecurityConfiguration</span> <span style="color:#ff5c57">extends</span> WebSecurityConfigurerAdapter {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">configure</span>(HttpSecurity http) <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>        http
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">authorizeRequests</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">antMatchers</span>(<span style="color:#5af78e">&#34;/api/session&#34;</span>).<span style="color:#57c7ff">permitAll</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">antMatchers</span>(<span style="color:#5af78e">&#34;/h2-console/**&#34;</span>).<span style="color:#57c7ff">permitAll</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">antMatchers</span>(<span style="color:#5af78e">&#34;/api/**&#34;</span>).<span style="color:#57c7ff">authenticated</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">and</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">headers</span>().<span style="color:#57c7ff">frameOptions</span>().<span style="color:#57c7ff">disable</span>() <span style="color:#78787e">// for h2</span>
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">and</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">requestCache</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">requestCache</span>(<span style="color:#ff6ac1">new</span> NullRequestCache())
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">and</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">sessionManagement</span>().<span style="color:#57c7ff">sessionCreationPolicy</span>(SessionCreationPolicy.<span style="color:#57c7ff">IF_REQUIRED</span>)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">and</span>().<span style="color:#57c7ff">csrf</span>().<span style="color:#57c7ff">disable</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The authentication end point is very simple. It provides a way to <code>GET</code> the
current session and to <code>DELETE</code> it to logout:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@RestController</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@RequestMapping</span>(<span style="color:#5af78e">&#34;/api/session&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">AuthenticationResource</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    AuthenticationManager authenticationManager;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@RequestMapping</span>(method <span style="color:#ff6ac1">=</span> RequestMethod.<span style="color:#57c7ff">GET</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> User <span style="color:#57c7ff">session</span>(Principal user) {
</span></span><span style="display:flex;"><span>        String name <span style="color:#ff6ac1">=</span> user <span style="color:#ff6ac1">==</span> <span style="color:#ff6ac1">null</span> <span style="color:#ff6ac1">?</span> <span style="color:#ff6ac1">null</span> : user.<span style="color:#57c7ff">getName</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> User(name);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@RequestMapping</span>(method <span style="color:#ff6ac1">=</span> RequestMethod.<span style="color:#57c7ff">DELETE</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">logout</span>(HttpSession session) {
</span></span><span style="display:flex;"><span>        session.<span style="color:#57c7ff">invalidate</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="sign-in">Sign-in</h2>
<p>To handle the sign-in, we need to provide a <code>SignInAdapter</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SocialConfiguration</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> SignInAdapter <span style="color:#57c7ff">authSignInAdapter</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> (userId, connection, request) <span style="color:#ff6ac1">-&gt;</span> {
</span></span><span style="display:flex;"><span>            AuthUtil.<span style="color:#57c7ff">authenticate</span>(connection);
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">null</span>;
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can create a simple <code>authenticate</code> method that will take a Social <code>Connection</code>
and authenticate the user using Spring Security&rsquo;s context:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">AuthUtil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(AuthUtil.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">authenticate</span>(Connection<span style="color:#ff6ac1">&lt;?&gt;</span> connection) {
</span></span><span style="display:flex;"><span>        UserProfile userProfile <span style="color:#ff6ac1">=</span> connection.<span style="color:#57c7ff">fetchUserProfile</span>();
</span></span><span style="display:flex;"><span>        String username <span style="color:#ff6ac1">=</span> userProfile.<span style="color:#57c7ff">getUsername</span>();
</span></span><span style="display:flex;"><span>        UsernamePasswordAuthenticationToken authentication <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> UsernamePasswordAuthenticationToken(username, <span style="color:#ff6ac1">null</span>, <span style="color:#ff6ac1">null</span>);
</span></span><span style="display:flex;"><span>        SecurityContextHolder.<span style="color:#57c7ff">getContext</span>().<span style="color:#57c7ff">setAuthentication</span>(authentication);
</span></span><span style="display:flex;"><span>        log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;User {} {} connected.&#34;</span>, userProfile.<span style="color:#57c7ff">getFirstName</span>(), userProfile.<span style="color:#57c7ff">getLastName</span>());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Note that we have access to our user&rsquo;s profile with the <code>Connection</code>
object.</p>
<h2 id="sign-up">Sign-up</h2>
<p>Here is a simple implementation of a signup controller:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Controller</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SignupController</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> ProviderSignInUtils signInUtils;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">SignupController</span>(ConnectionFactoryLocator connectionFactoryLocator, UsersConnectionRepository connectionRepository) {
</span></span><span style="display:flex;"><span>        signInUtils <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ProviderSignInUtils(connectionFactoryLocator, connectionRepository);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@RequestMapping</span>(value <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;/signup&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">signup</span>(WebRequest request) {
</span></span><span style="display:flex;"><span>        Connection<span style="color:#ff6ac1">&lt;?&gt;</span> connection <span style="color:#ff6ac1">=</span> signInUtils.<span style="color:#57c7ff">getConnectionFromSession</span>(request);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">if</span> (connection <span style="color:#ff6ac1">!=</span> <span style="color:#ff6ac1">null</span>) {
</span></span><span style="display:flex;"><span>            AuthUtil.<span style="color:#57c7ff">authenticate</span>(connection);
</span></span><span style="display:flex;"><span>            signInUtils.<span style="color:#57c7ff">doPostSignUp</span>(connection.<span style="color:#57c7ff">getDisplayName</span>(), request);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;redirect:/&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There are two things to note here:</p>
<ul>
<li>Spring lets us decide what to do the first time we register a user. In this
example, we just authenticate him</li>
<li>The <code>SignInUtils</code> class is very handy to handle this scenario. Its constructor
optionally takes a <code>SessionStrategy</code> that will be used to retrieve the connection info.
You can customize the strategy here.</li>
</ul>
<p>A this point, your authentication process should work.
It will use the HTTP Session to store connection data and an in-memory user
repository.</p>
<h2 id="the-client">The client</h2>
<p>We can create a very simple client with any web framework.
It will need to:</p>
<ul>
<li>Issue a <code>GET /api/session</code> request to check if the user is logged</li>
<li>Display a login form that will <code>POST</code> to <code>/login/twitter</code> if not</li>
<li>Display a logout button if the user is connected. The logout button will
send a <code>DELETE /api/session</code> request.</li>
</ul>
<p>I chose to use React because of its very simple and declarative API.</p>
<p>We can use ES2015 features and JSX without a pre-compilation step thanks to
<a href="http://www.jimsproch.com/react/">this script</a>.</p>
<p>It is a bit slower because it lets the browser do the compilation but it&rsquo;s
perfect for prototyping.</p>
<p>Here is the client code:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> LoginForm <span style="color:#ff6ac1">=</span> () =&gt; (
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">form</span> <span style="color:#57c7ff">action</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;/signin/twitter&#34;</span> <span style="color:#57c7ff">method</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;post&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#ff6ac1">h1</span>&gt;Please login&lt;/<span style="color:#ff6ac1">h1</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#ff6ac1">button</span> <span style="color:#57c7ff">type</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;submit&#34;</span>&gt;Login&lt;/<span style="color:#ff6ac1">button</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#ff6ac1">form</span>&gt;
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">const</span> LogoutComponent <span style="color:#ff6ac1">=</span> (props) =&gt; (
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#ff6ac1">h2</span>&gt;Your name is {props.name}&lt;/<span style="color:#ff6ac1">h2</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#ff6ac1">button</span> <span style="color:#57c7ff">onClick</span><span style="color:#ff6ac1">=</span>{props.logout}&gt;Logout&lt;/<span style="color:#ff6ac1">button</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">class</span> Main <span style="color:#ff6ac1">extends</span> React.Component {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    constructor(...args) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">super</span>(...args);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">this</span>.state <span style="color:#ff6ac1">=</span> {name<span style="color:#ff6ac1">:</span> <span style="color:#ff6ac1">null</span>};
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    componentDidMount() {
</span></span><span style="display:flex;"><span>        fetch(<span style="color:#5af78e">&#39;/api/session&#39;</span>, {credentials<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;same-origin&#39;</span>})
</span></span><span style="display:flex;"><span>            .then(res =&gt; res.json())
</span></span><span style="display:flex;"><span>            .then(session =&gt; <span style="color:#ff6ac1">this</span>.setState({name<span style="color:#ff6ac1">:</span> session.name}));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    logout() {
</span></span><span style="display:flex;"><span>        console.log(<span style="color:#5af78e">&#34;logout&#34;</span>);
</span></span><span style="display:flex;"><span>        fetch(<span style="color:#5af78e">&#39;/api/session&#39;</span>, {method<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;delete&#39;</span>, credentials<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;same-origin&#39;</span>})
</span></span><span style="display:flex;"><span>            .then(res =&gt; <span style="color:#ff6ac1">this</span>.setState({name<span style="color:#ff6ac1">:</span> <span style="color:#ff6ac1">null</span>}));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    render() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">const</span> profile <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">this</span>.state.name <span style="color:#ff6ac1">?</span>
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#ff6ac1">LogoutComponent</span> <span style="color:#57c7ff">name</span><span style="color:#ff6ac1">=</span>{<span style="color:#ff6ac1">this</span>.state.name} <span style="color:#57c7ff">logout</span><span style="color:#ff6ac1">=</span>{() =&gt; <span style="color:#ff6ac1">this</span>.logout()}/&gt; <span style="color:#ff6ac1">:</span>
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#ff6ac1">LoginForm</span> /&gt;;
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> (
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>                {profile}
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ReactDOM.render(&lt;<span style="color:#ff6ac1">Main</span> /&gt;, <span style="color:#ff5c57">document</span>.getElementById(<span style="color:#5af78e">&#39;container&#39;</span>));
</span></span></code></pre></div><p>We use the <a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch">fetch API</a> (a modern replacement for XMLHttpRequest) to make ajax
calls so the code will only work in <a href="http://caniuse.com/#feat=fetch">FF and Chrome</a>.
You can find various polyfills in the wild.</p>
<p>Notice that we need to pass <code>{credentials: 'same-origin'}</code> to the REST API calls
to make sure we send the cookies along with the requests.</p>
<h2 id="store-the-connections-in-database">Store the connections in database</h2>
<p>In most applications, we want to store the user already known in a database.</p>
<p>Spring social provides a default JDBC implementation of the <code>UsersConnectionRepository</code>.
Take a look <a href="http://docs.spring.io/spring-social/docs/current/reference/htmlsingle/#section_jdbcConnectionFactory">the documentation</a>
to know more about the table in which it will store users&rsquo; connections data.</p>
<p>We can initialize the database with the script contained in Spring Social&rsquo;s jar:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DbInitializer</span> <span style="color:#ff5c57">implements</span> InitializingBean {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> DataSource dataSource;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">DbInitializer</span>(DataSource dataSource) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">dataSource</span> <span style="color:#ff6ac1">=</span> dataSource;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">afterPropertiesSet</span>() <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>        ClassPathResource resource <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ClassPathResource(<span style="color:#5af78e">&#34;org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.sql&#34;</span>);
</span></span><span style="display:flex;"><span>        runScript(resource);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">runScript</span>(Resource resource) {
</span></span><span style="display:flex;"><span>        ResourceDatabasePopulator populator <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ResourceDatabasePopulator();
</span></span><span style="display:flex;"><span>        populator.<span style="color:#57c7ff">setContinueOnError</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>        populator.<span style="color:#57c7ff">addScript</span>(resource);
</span></span><span style="display:flex;"><span>        DatabasePopulatorUtils.<span style="color:#57c7ff">execute</span>(populator, dataSource);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now, we need to create a <code>SocialAdapater</code> that will use Spring Social&rsquo;s
<code>JdbcUsersConnectionRepository</code> as a user repository:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DatabaseSocialConfigurer</span> <span style="color:#ff5c57">extends</span> SocialConfigurerAdapter {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> DataSource dataSource;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">DatabaseSocialConfigurer</span>(DataSource dataSource) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">dataSource</span> <span style="color:#ff6ac1">=</span> dataSource;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> UsersConnectionRepository <span style="color:#57c7ff">getUsersConnectionRepository</span>(ConnectionFactoryLocator connectionFactoryLocator) {
</span></span><span style="display:flex;"><span>        TextEncryptor textEncryptor <span style="color:#ff6ac1">=</span> Encryptors.<span style="color:#57c7ff">noOpText</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator, textEncryptor);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Don&rsquo;t forget to declare our <code>DatabaseSocialConfigurer</code> as a Spring bean and we are
good to go!</p>
<p>Please note that this works because of an &ldquo;interesting&rdquo; design decision of
Spring Social.
You can see <a href="https://github.com/spring-projects/spring-social/blob/master/spring-social-config/src/main/java/org/springframework/social/config/annotation/SocialConfiguration.java#L87">here</a>
that Spring Social will take the first <code>SocialConfigurer</code> that declares a non-null
<code>UsersConnectionRepository</code>.</p>
<p>Ours come before the <code>SocialConfigurer</code>s auto-configured by Spring Boot but
if you are wary of this implementation, consider disabling Spring boot auto-configuration.</p>
<p>We can use the h2 console Spring boot auto-configured for us to check the database.</p>
<p><img alt="The data in our database" loading="lazy" src="/assets/images/articles/2016-02-social-db.png" title="The data in our database"></p>
<h2 id="conclusion">Conclusion</h2>
<p>Social login with Spring is a bit tricky but definitely worth the investment!</p>
<p>Spring Boot provides default configuration for LinkedIn and Facebook as well
but there are <a href="http://projects.spring.io/spring-social/">many more connectors</a> like Github and Tripit that you can include by replicating Spring Boot&rsquo;s configuration.</p>
<p>Don&rsquo;t forget to <a href="https://github.com/geowarin/boot-social-api">check out the code</a>
and give your opinion in the comments.</p>
]]></content:encoded></item><item><title>Spring Boot and React hot loader</title><link>https://geowarin.com/spring-boot-and-react-hot-loader/</link><pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/spring-boot-and-react-hot-loader/</guid><description>The perfect setup for Spring boot and React hot loader</description><content:encoded><![CDATA[<p>When I develop web applications, I love using React.
I&rsquo;m also a Spring and groovy addict.</p>
<p>Those two stacks make me more productive.
Can we have the best of both worlds?</p>
<p>I will show you step by step how I created
<a href="https://github.com/geowarin/boot-react">this project</a>.
Feel free to fiddle with it and give me your feedback.</p>
<h2 id="goal">Goal</h2>
<p>My perfect stack on the backend is to use Spring boot and groovy.
With the latest version of Spring boot, there is a new tool called
<a href="https://spring.io/blog/2015/06/17/devtools-in-spring-boot-1-3">dev-tools</a> that
will automatically reload the embedded server when you recompile your project.</p>
<p>On the frontend, most React developers use <a href="http://webpack.github.io/">webpack</a>.
React has awesome support for hot reloading with <a href="https://github.com/gaearon/react-hot-loader">react-hot-loader</a>.
It will magically update your views without requiring you to refresh your browser.
Because React encourages your to have a unidirectional data flow, your whole
application can use hot reloading every time you save.
For this to work, we have to launch a <a href="http://webpack.github.io/docs/webpack-dev-server.html">webpack dev server</a>.</p>
<p>The problem when you launch your Spring boot server on the port 8080 and the
dev server on the port 3000 is that you will get cross origin requests preventing
the two servers from interacting.</p>
<p>We also want to isolate the two projects and make separate gradle modules.</p>
<p>This blog post will show a solution to this problem and will provide an
enjoyable dev environment.</p>
<p>This might not be the perfect solution and I&rsquo;d love any feedback from
both communities to help me improve it.</p>
<h2 id="the-backend">The backend</h2>
<p>We will generate the backend. To do that, you can go on <a href="http://start.spring.io/">http://start.spring.io/</a>
and create a <strong>gradle project</strong> using <strong>groovy</strong>, <strong>java 8</strong> and the latest Spring boot
(<strong>1.3.0 M2</strong> at the time of writing).</p>
<p>For the dependencies tick <strong>DevTools</strong> and <strong>Web</strong>.</p>
<p>If you want to do it command line style just type the following in your console:</p>
<pre tabindex="0"><code>curl https://start.spring.io/starter.tgz \
-d name=boot-react  \
-d bootVersion=1.3.0.M2 \
-d dependencies=devtools,web \
-d language=groovy \
-d JavaVersion=1.8 \
-d type=gradle-project \
-d packageName=react \
-d packaging=jar \
-d artifactId=boot-react \
-d baseDir=boot-react | tar -xzvf -
</code></pre><p>This will create a base project with the latest spring boot, the devtools, groovy
and gradle.</p>
<p>Don&rsquo;t forget to generate the gradle wrapper:</p>
<pre tabindex="0"><code>gradle wrapper
</code></pre><p>See the <a href="https://github.com/geowarin/boot-react/commit/c290269a9e105688b38dcc6cc0b3293ec85199e6">commit</a></p>
<p>Great so now we have tomcat embedded, hot reloading and supernatural groovy
strength. The usual.</p>
<p>We will create a simple REST resource that we would like our frontend to consume:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span><span style="color:#ff9f43">@RestController</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SimpleResource</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@RequestMapping</span><span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;/api/simple&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>    Map <span style="color:#57c7ff">resource</span><span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">[</span><span style="color:#ff5c57">simple:</span> <span style="color:#5af78e">&#39;resource&#39;</span><span style="color:#ff6ac1">]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span></code></pre></div><h2 id="the-frontend">The frontend</h2>
<p>As mentioned before, we want the frontend to be a separated project.
We will create a gradle module for that.</p>
<p>At the root of your project add a <code>settings.gradle</code> file with the following
content:</p>
<pre tabindex="0"><code>include &#39;frontend&#39;
</code></pre><p>Now, create a <code>frontend</code> directory under the project root and add a build.gradle
file in it:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>plugins <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    id <span style="color:#5af78e">&#34;com.moowork.node&#34;</span> version <span style="color:#5af78e">&#34;0.10&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>version <span style="color:#5af78e">&#39;0.0.1&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>task <span style="color:#57c7ff">bundle</span><span style="color:#ff6ac1">(</span><span style="color:#ff5c57">type:</span> NpmTask<span style="color:#ff6ac1">)</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    args <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">[</span><span style="color:#5af78e">&#39;run&#39;</span><span style="color:#ff6ac1">,</span> <span style="color:#5af78e">&#39;bundle&#39;</span><span style="color:#ff6ac1">]</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>task <span style="color:#57c7ff">start</span><span style="color:#ff6ac1">(</span><span style="color:#ff5c57">type:</span> NpmTask<span style="color:#ff6ac1">)</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    args <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">[</span><span style="color:#5af78e">&#39;start&#39;</span><span style="color:#ff6ac1">]</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>start<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">dependsOn</span><span style="color:#ff6ac1">(</span>npm_install<span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>bundle<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">dependsOn</span><span style="color:#ff6ac1">(</span>npm_install<span style="color:#ff6ac1">)</span>
</span></span></code></pre></div><p>See the <a href="https://github.com/geowarin/boot-react/commit/6788e068c9071d0368879bee8188b7aeb194388e">commit</a></p>
<p>We will use the <a href="https://github.com/srs/gradle-node-plugin">gradle node plugin</a>
to call the two main tasks in our application:</p>
<ul>
<li><code>npm run bundle</code> will create the minified app in the <code>dist</code> directory</li>
<li><code>npm start</code> will start our dev server</li>
</ul>
<p>We can call them from the gradle build with <code>./gradlew frontend:start</code> and
<code>./gradlew frontend:bundle</code></p>
<p>The content of the project will basically be the same as
<a href="https://github.com/gaearon/react-hot-boilerplate">react-hot-boilerplate</a></p>
<p>Let&rsquo;s get the sources of this project as a zip file from github and unzip them into the
frontend directory.
With bash, type the following command at the root of your project:</p>
<pre tabindex="0"><code>wget -qO- -O tmp.zip https://github.com/gaearon/react-hot-boilerplate/archive/master.zip &amp;&amp; unzip tmp.zip &amp;&amp; mv react-hot-boilerplate-master/* frontend &amp;&amp; rm -rf react-hot-boilerplate-master &amp;&amp; rm tmp.zip
</code></pre><p>See the <a href="https://github.com/geowarin/boot-react/commit/a3de637d0d94f48d1cdd0379038115e5b98b79d3">commit</a></p>
<p>If everything goes well, typing <code>./gradlew fronted:start</code>, will start the react
application at <code>http://localhost:3000</code>.</p>
<p>The first problem arises when you <code>ctrl+c</code> out of the gradle build,
the server will still hang. You can kill it with <code>killall node</code>.
This is a problem I&rsquo;d like help solving, if you have a solution, please tell me.</p>
<p>In the rest of the article I will use <code>npm start</code> directly, which presupposes that
you have <code>npm</code> available on your development machine.
The whole build will only require Java.</p>
<p>We will use the <a href="https://github.com/ampedandwired/html-webpack-plugin">webpack-html-plugin</a>
to automatically generate the index.html page.</p>
<pre tabindex="0"><code>npm install --save-dev html-webpack-plugin
</code></pre><p>Since using the document body as a root for our application is a bad practice,
we need to tweak the default html template.</p>
<p>I created a file called <code>index-template.html</code> in a newly created <code>assets</code> directory.
It will serve as a template to generate our <code>index.html</code> file:</p>
<script src="https://gist.github.com/geowarin/4e6089bc670d753f2453.js"></script>

<p>As you can see, it contains a div with the id <code>root</code>.</p>
<p>Let&rsquo;s tweak the dev server a little bit to <a href="http://webpack.github.io/docs/webpack-dev-server.html#combining-with-an-existing-server">combine it with another server</a>.</p>
<p>Let&rsquo;s change <code>webpack.config.js</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#ff5c57">var</span> path <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;path&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">var</span> webpack <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;webpack&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">var</span> HtmlWebpackPlugin <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;html-webpack-plugin&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>module.exports <span style="color:#ff6ac1">=</span> {
</span></span><span style="display:flex;"><span>  devtool<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;eval&#39;</span>,
</span></span><span style="display:flex;"><span>  entry<span style="color:#ff6ac1">:</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#5af78e">&#39;webpack-dev-server/client?http://localhost:3000&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#5af78e">&#39;webpack/hot/only-dev-server&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#5af78e">&#39;./src/index&#39;</span>
</span></span><span style="display:flex;"><span>  ],
</span></span><span style="display:flex;"><span>  output<span style="color:#ff6ac1">:</span> {
</span></span><span style="display:flex;"><span>    path<span style="color:#ff6ac1">:</span> path.join(__dirname, <span style="color:#5af78e">&#39;dist&#39;</span>),
</span></span><span style="display:flex;"><span>    filename<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;bundle.js&#39;</span>,
</span></span><span style="display:flex;"><span>    publicPath<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;http://localhost:3000/&#39;</span>
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  plugins<span style="color:#ff6ac1">:</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">new</span> webpack.HotModuleReplacementPlugin(),
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">new</span> webpack.NoErrorsPlugin(),
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">new</span> HtmlWebpackPlugin({
</span></span><span style="display:flex;"><span>      title<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;Boot React&#39;</span>,
</span></span><span style="display:flex;"><span>      template<span style="color:#ff6ac1">:</span> path.join(__dirname, <span style="color:#5af78e">&#39;assets/index-template.html&#39;</span>)
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>  ],
</span></span><span style="display:flex;"><span>  resolve<span style="color:#ff6ac1">:</span> {
</span></span><span style="display:flex;"><span>    extensions<span style="color:#ff6ac1">:</span> [<span style="color:#5af78e">&#39;&#39;</span>, <span style="color:#5af78e">&#39;.js&#39;</span>]
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  module<span style="color:#ff6ac1">:</span> {
</span></span><span style="display:flex;"><span>    loaders<span style="color:#ff6ac1">:</span> [{
</span></span><span style="display:flex;"><span>      test<span style="color:#ff6ac1">:</span> <span style="color:#5af78e">/\.js$/</span>,
</span></span><span style="display:flex;"><span>      loaders<span style="color:#ff6ac1">:</span> [<span style="color:#5af78e">&#39;react-hot&#39;</span>, <span style="color:#5af78e">&#39;babel&#39;</span>],
</span></span><span style="display:flex;"><span>      include<span style="color:#ff6ac1">:</span> path.join(__dirname, <span style="color:#5af78e">&#39;src&#39;</span>)
</span></span><span style="display:flex;"><span>    }]
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>We changed the <code>publicPath</code> to point directly at our dev server and included the
<code>HtmlWebpackPlugin</code>.</p>
<p>Now we can get rid of the old index.html and start our dev server with <code>npm start</code>.
The index will be automatically generated for us.</p>
<p>See the <a href="https://github.com/geowarin/boot-react/commit/10e3fdae8ac53bea40c585076363a4cc54ed9d9e">commit</a></p>
<h2 id="include-the-frontend-in-the-boot-jar">Include the frontend in the boot jar</h2>
<p>We have to create the npm <code>bundle</code> task, which will generate an optimized
web application in the <code>dist</code> directory.</p>
<p>In the <code>package.json</code> file, update the <code>scripts</code>:</p>
<pre tabindex="0"><code>&#34;scripts&#34;: {
  &#34;start&#34;: &#34;node server.js&#34;,
  &#34;bundle&#34;: &#34;webpack --optimize-minimize --optimize-dedupe --output-public-path &#39;&#39;&#34;
}
</code></pre><p>Now if you launch <code>./gradlew frontend:bundle</code>, it will generate an optimized
<code>bundle.js</code> file and the <code>index.html</code> in the <code>dist</code> directory.</p>
<p>The last step is to include this <code>dist</code> directory in our application&rsquo;s jar as
static assets.
Add the following task to our main gradle build:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span>jar <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>  from<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;frontend/dist&#39;</span><span style="color:#ff6ac1">)</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    into <span style="color:#5af78e">&#39;static&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>processResources<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">dependsOn</span><span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;frontend:bundle&#39;</span><span style="color:#ff6ac1">)</span>
</span></span></code></pre></div><p>If you generate your jar with <code>./gradlew assemble</code>, you will see that the
built jar includes the frontend resources.</p>
<p>If you run the jar (<code>java -jar build/libs/boot-react-0.0.1-SNAPSHOT.jar</code>), you should
see the React hello world on <code>localhost:8080</code></p>
<p>See the <a href="https://github.com/geowarin/boot-react/commit/99b89a19200fe847bc0740346a0c4e5668b4e3c2">commit</a></p>
<h2 id="launch-it-in-dev">Launch it in dev</h2>
<p>When working on our application, it would be nice if:</p>
<ol>
<li>Launching the spring boot server in dev launched the webpack dev server</li>
<li>Our dev-server proxied the request to <code>localhost:8080</code> so we can access
the application on <code>localhost:3000</code> and not get cross-origin requests</li>
</ol>
<p>Add the following <code>WebpackLauncher</code> to the project:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Profile</span><span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;dev&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">class</span> <span style="color:#f3f99d">WebpackLauncher</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>  WebpackRunner <span style="color:#57c7ff">frontRunner</span><span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">new</span> <span style="color:#57c7ff">WebpackRunner</span><span style="color:#ff6ac1">()</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">WebpackRunner</span> <span style="color:#ff5c57">implements</span> InitializingBean <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> String WEBPACK_SERVER_PROPERTY <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#39;webpack-server-loaded&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">boolean</span> <span style="color:#57c7ff">isWindows</span><span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>      System<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">getProperty</span><span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;os.name&#39;</span><span style="color:#ff6ac1">).</span><span style="color:#57c7ff">toLowerCase</span><span style="color:#ff6ac1">().</span><span style="color:#57c7ff">contains</span><span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;windows&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">afterPropertiesSet</span><span style="color:#ff6ac1">()</span> <span style="color:#ff5c57">throws</span> Exception <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">if</span> <span style="color:#ff6ac1">(!</span>System<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">getProperty</span><span style="color:#ff6ac1">(</span>WEBPACK_SERVER_PROPERTY<span style="color:#ff6ac1">))</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>        startWebpackDevServer<span style="color:#ff6ac1">()</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">startWebpackDevServer</span><span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">{</span>
</span></span><span style="display:flex;"><span>      String cmd <span style="color:#ff6ac1">=</span> isWindows<span style="color:#ff6ac1">()</span> <span style="color:#ff6ac1">?</span> <span style="color:#5af78e">&#39;cmd /c npm start&#39;</span> <span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#39;npm start&#39;</span>
</span></span><span style="display:flex;"><span>      cmd<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">execute</span><span style="color:#ff6ac1">(</span><span style="color:#ff6ac1">null</span><span style="color:#ff6ac1">,</span> <span style="color:#ff6ac1">new</span> File<span style="color:#ff6ac1">(</span><span style="color:#5af78e">&#39;frontend&#39;</span><span style="color:#ff6ac1">)).</span><span style="color:#57c7ff">consumeProcessOutput</span><span style="color:#ff6ac1">(</span>System<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">out</span><span style="color:#ff6ac1">,</span> System<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">err</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>      System<span style="color:#ff6ac1">.</span><span style="color:#57c7ff">setProperty</span><span style="color:#ff6ac1">(</span>WEBPACK_SERVER_PROPERTY<span style="color:#ff6ac1">,</span> <span style="color:#5af78e">&#39;true&#39;</span><span style="color:#ff6ac1">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">}</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">}</span>
</span></span></code></pre></div><p>This will take care of the first task by launching <code>npm start</code> when our server starts.
I used a system property to make sure the dev-tools will not reload the frontend
when we make a change in the backend code.
This class will be available when we start the application with the <code>dev</code>
<a href="http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html">profile</a></p>
<p>We can make a simple proxy with webpack-dev-server.
Change the <code>server.js</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#ff5c57">var</span> webpack <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;webpack&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">var</span> WebpackDevServer <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;webpack-dev-server&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">var</span> config <span style="color:#ff6ac1">=</span> require(<span style="color:#5af78e">&#39;./webpack.dev.config&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">new</span> WebpackDevServer(webpack(config), {
</span></span><span style="display:flex;"><span>  publicPath<span style="color:#ff6ac1">:</span> config.output.publicPath,
</span></span><span style="display:flex;"><span>  hot<span style="color:#ff6ac1">:</span> <span style="color:#ff6ac1">true</span>,
</span></span><span style="display:flex;"><span>  historyApiFallback<span style="color:#ff6ac1">:</span> <span style="color:#ff6ac1">true</span>,
</span></span><span style="display:flex;"><span>  proxy<span style="color:#ff6ac1">:</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#5af78e">&#34;*&#34;</span><span style="color:#ff6ac1">:</span> <span style="color:#5af78e">&#34;http://localhost:8080&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}).listen(<span style="color:#ff9f43">3000</span>, <span style="color:#5af78e">&#39;localhost&#39;</span>, <span style="color:#ff5c57">function</span> (err, result) {
</span></span><span style="display:flex;"><span>  <span style="color:#ff6ac1">if</span> (err) {
</span></span><span style="display:flex;"><span>    console.log(err);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  console.log(<span style="color:#5af78e">&#39;Listening at localhost:3000&#39;</span>);
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>Launch your application with the <code>--spring.profiles.active=dev</code> flag.</p>
<p>You should be able see the react hello world on <a href="http://localhost:3000">http://localhost:3000</a>. If you make some changes to it,
it will automatically reload.</p>
<p>See the old commit <a href="https://github.com/geowarin/boot-react/commit/af66c4b2f9798ad50f4e6be30ba5fb6c5f56f79f">commit</a></p>
<p>And the new <a href="https://github.com/geowarin/boot-react/commit/2eb6460812c2f2022b49e04f8ed4034dda402c2c">commit</a></p>
<h2 id="fetch-the-resource">Fetch the resource</h2>
<p>We can check that we do not get cross-origin errors using <a href="https://github.com/mzabriskie/axios">axios</a>,
a simple library to do http requests. It supports promises and automatically
handles json.</p>
<pre tabindex="0"><code>npm i -S axios
</code></pre><p>Let&rsquo;s amend our <code>App.js</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> React, { Component } from <span style="color:#5af78e">&#39;react&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import</span> axios from <span style="color:#5af78e">&#39;axios&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">export</span> <span style="color:#ff6ac1">default</span> <span style="color:#ff6ac1">class</span> App <span style="color:#ff6ac1">extends</span> Component {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  componentDidMount() {
</span></span><span style="display:flex;"><span>    axios.get(<span style="color:#5af78e">&#39;/api/simple&#39;</span>)
</span></span><span style="display:flex;"><span>      .then(res =&gt; console.log(res.data))
</span></span><span style="display:flex;"><span>      .<span style="color:#ff6ac1">catch</span>(err =&gt; console.error(err))
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  render() {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> (
</span></span><span style="display:flex;"><span>      <span style="color:#ff6ac1">&lt;</span>h1<span style="color:#ff6ac1">&gt;</span>Hello, guys.<span style="color:#ff6ac1">&lt;</span><span style="color:#ff5c57">/h1&gt;</span>
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>See the <a href="https://github.com/geowarin/boot-react/blob/079f0c8afcd8266355b77a094941c8cdbe1349fd/frontend/src/App.js">commit</a></p>
<h2 id="better-optimization-of-the-javascript-assets">Better optimization of the javascript assets</h2>
<p>We can further improve the compression of the javascript assets by separating our dev
webpack configuration from our production configuration.</p>
<p>In the production configuration, we can use the DefinePlugin to set the NODE_ENV
variable to production. This will allow webpack to automatically remove all the
code intended for development purposes in our libraries:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#ff6ac1">new</span> webpack.DefinePlugin({
</span></span><span style="display:flex;"><span>  <span style="color:#5af78e">&#34;process.env&#34;</span><span style="color:#ff6ac1">:</span> {
</span></span><span style="display:flex;"><span>    NODE_ENV<span style="color:#ff6ac1">:</span> JSON.stringify(<span style="color:#5af78e">&#34;production&#34;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>See the <a href="https://github.com/geowarin/boot-react/commit/a095ebca7672d2f12bb559e37e01784984a6abc1">commit</a></p>
<h2 id="feedback-needed">Feedback needed</h2>
<p>Well, this works pretty well!</p>
<p><img alt="Hot hot reload" loading="lazy" src="/assets/images/articles/2015-08-hot-reload.gif" title="Hot reload"></p>
<p>What do you think? Care to comment and help me make something better?
Your feedback is welcome!</p>
<p>The project is available <a href="https://github.com/geowarin/boot-react">on github</a>.
Pull requests and issues are gladly accepted.</p>
]]></content:encoded></item><item><title>Completable futures with Spring async</title><link>https://geowarin.com/completable-futures-with-spring-async/</link><pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/completable-futures-with-spring-async/</guid><description>Use Java 8 new CompletableFuture with Spring async</description><content:encoded><![CDATA[<p>Since version 8, java has a way better abstraction than <code>java.util.Future</code>
called <code>CompletableFuture</code>.
This new API along with the lambdas enables new ways of reasoning with futures
by composing, listening and joining them.</p>
<p>Futures are traditionally created by submitting tasks to an <code>Executor</code>.
Spring allows declaring one or multiple executors and will submit any method
annotated with <code>@Async</code> as tasks for those executors.</p>
<p>The big problem is that executors still return <code>Future</code>s and not <code>CompletableFuture</code>s.</p>
<p>We are going to create our own Executor to solve this problem.
Then we will study a solution to handle timeouts with those futures and
as a bonus, do a little bit of AOP to debug our threads.</p>
<p>You can see the resulting application <a href="https://github.com/geowarin/spring-completable">on my gihtub</a>.</p>
<h2 id="creating-an-executor-for-completablefutures">Creating an Executor for CompletableFutures</h2>
<p>If you try to return a <code>CompletableFuture</code> from an Async method in Spring,
you will get the following error:</p>
<pre tabindex="0"><code>Caused by: java.lang.ClassCastException: java.util.concurrent.FutureTask cannot be cast to java.util.concurrent.CompletableFuture
</code></pre><p>The idea is to use delegation to decorate an existing instance of <code>ExecutorService</code>.
We will implement the <code>ExecutorService</code> and use type covariance to return
<code>CompletableFuture</code>s instead of <code>Future</code>.</p>
<p>The following code has been greatly inspired by this <a href="http://binkley.blogspot.fr/2014/12/completablefuture-and-executorservice.html">blog post</a>. Many thanks to Brian Oxley!</p>
<p>So the first thing we need to do is to create a decorator for an executor service
and delegate every method to that service:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">static</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DelegatingExecutorService</span> <span style="color:#ff5c57">implements</span> ExecutorService {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> ExecutorService delegate;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">DelegatingExecutorService</span>(ExecutorService executorService) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">delegate</span> <span style="color:#ff6ac1">=</span> executorService;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> Future<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Callable<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> task) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> delegate.<span style="color:#57c7ff">submit</span>(task);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> Future<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Runnable task, T result) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> delegate.<span style="color:#57c7ff">submit</span>(task, result);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">// Override and delegate everything</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can create an interface that will extends <code>ExecutorService</code> and return
<code>CompletableFuture</code>s instead of <code>Future</code>s:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * DelegatingCompletableExecutorService {@code ExecutorService} to covariantly return {@code
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> * CompletableFuture} in place of {@code Future}.
</span></span></span><span style="display:flex;"><span><span style="color:#78787e"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">interface</span> <span style="color:#f3f99d">CompletableExecutorService</span> <span style="color:#ff5c57">extends</span> ExecutorService {
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * @return a completable future representing pending completion of the
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * task, never missing
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Callable<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> task);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * @return a completable future representing pending completion of the
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * task, never missing
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Runnable task, T result);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * @return a completable future representing pending completion of the
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * task, never missing
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> CompletableFuture<span style="color:#ff6ac1">&lt;?&gt;</span> submit(Runnable task);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can then implement this new interface using our decorator as a base:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">static</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DelegatingCompletableExecutorService</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">extends</span> DelegatingExecutorService
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">implements</span> CompletableExecutorService {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     DelegatingCompletableExecutorService(ExecutorService threads) {
</span></span><span style="display:flex;"><span>         <span style="color:#ff5c57">super</span>(threads);
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Callable<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> task) {
</span></span><span style="display:flex;"><span>         <span style="color:#ff5c57">final</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> cf <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> CompletableFuture<span style="color:#ff6ac1">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>         delegate.<span style="color:#57c7ff">submit</span>(() <span style="color:#ff6ac1">-&gt;</span> {
</span></span><span style="display:flex;"><span>             <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>                 cf.<span style="color:#57c7ff">complete</span>(task.<span style="color:#57c7ff">call</span>());
</span></span><span style="display:flex;"><span>             } <span style="color:#ff6ac1">catch</span> (CancellationException e) {
</span></span><span style="display:flex;"><span>                 cf.<span style="color:#57c7ff">cancel</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>             } <span style="color:#ff6ac1">catch</span> (Exception e) {
</span></span><span style="display:flex;"><span>                 cf.<span style="color:#57c7ff">completeExceptionally</span>(e);
</span></span><span style="display:flex;"><span>             }
</span></span><span style="display:flex;"><span>         });
</span></span><span style="display:flex;"><span>         <span style="color:#ff6ac1">return</span> cf;
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Runnable task, T result) {
</span></span><span style="display:flex;"><span>         <span style="color:#ff6ac1">return</span> submit(callable(task, result));
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> CompletableFuture<span style="color:#ff6ac1">&lt;?&gt;</span> submit(Runnable task) {
</span></span><span style="display:flex;"><span>         <span style="color:#ff6ac1">return</span> submit(callable(task));
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We also need to create an utility method to create a <code>CompletableExecutorService</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> CompletableExecutorService <span style="color:#57c7ff">completable</span>(ExecutorService delegate) {
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> DelegatingCompletableExecutorService(delegate);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>See <a href="https://gist.github.com/geowarin/bc40acd46791aa114c30">this gist</a> for the final result.</p>
<h2 id="creating-an-async-service">Creating an async service</h2>
<p>To enable asynchronous methods in Spring, you will need this kind of configuration
class:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableAsync</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SpringAsyncConfig</span> <span style="color:#ff5c57">implements</span> AsyncConfigurer {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> <span style="color:#ff5c57">final</span> Log logger <span style="color:#ff6ac1">=</span> LogFactory.<span style="color:#57c7ff">getLog</span>(getClass());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> Executor <span style="color:#57c7ff">getAsyncExecutor</span>() {
</span></span><span style="display:flex;"><span>        ThreadFactory threadFactory <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ThreadFactoryBuilder().<span style="color:#57c7ff">setNameFormat</span>(<span style="color:#5af78e">&#34;async-%d&#34;</span>).<span style="color:#57c7ff">build</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> CompletableExecutors.<span style="color:#57c7ff">completable</span>(Executors.<span style="color:#57c7ff">newFixedThreadPool</span>(10, threadFactory));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> AsyncUncaughtExceptionHandler <span style="color:#57c7ff">getAsyncUncaughtExceptionHandler</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> (ex, method, params) <span style="color:#ff6ac1">-&gt;</span> logger.<span style="color:#57c7ff">error</span>(<span style="color:#5af78e">&#34;Uncaught async error&#34;</span>, ex);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>As you can see, we can specify which executor will handle our <code>@Async</code> methods.</p>
<p>We can now return <code>CompletableFuture</code>s from our services!</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">AsyncService</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> String<span style="color:#ff6ac1">[]</span> greetings <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> String<span style="color:#ff6ac1">[]</span>{
</span></span><span style="display:flex;"><span>            <span style="color:#5af78e">&#34;hallo&#34;</span>, <span style="color:#5af78e">&#34;hallo&#34;</span>, <span style="color:#5af78e">&#34;hej&#34;</span>, <span style="color:#5af78e">&#34;hej&#34;</span>, <span style="color:#5af78e">&#34;bonjour&#34;</span>, <span style="color:#5af78e">&#34;hola&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#5af78e">&#34;ciao&#34;</span>, <span style="color:#5af78e">&#34;shalom&#34;</span>, <span style="color:#5af78e">&#34;fáilte&#34;</span>, <span style="color:#5af78e">&#34;kaixo&#34;</span>, <span style="color:#5af78e">&#34;konnichiwa&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#5af78e">&#34;saluton&#34;</span>, <span style="color:#5af78e">&#34;päivää&#34;</span>, <span style="color:#5af78e">&#34;selamat pagi&#34;</span>, <span style="color:#5af78e">&#34;gut de&#34;</span>, <span style="color:#5af78e">&#34;olá&#34;</span>
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Async</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>String<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">asyncGreeting</span>() {
</span></span><span style="display:flex;"><span>        AsyncUtil.<span style="color:#57c7ff">randomSleep</span>(3000, TimeUnit.<span style="color:#57c7ff">MILLISECONDS</span>);
</span></span><span style="display:flex;"><span>        String result <span style="color:#ff6ac1">=</span> AsyncUtil.<span style="color:#57c7ff">getThreadName</span>() <span style="color:#ff6ac1">+</span> <span style="color:#5af78e">&#34; - &#34;</span> <span style="color:#ff6ac1">+</span> random(greetings);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> CompletableFuture.<span style="color:#57c7ff">completedFuture</span>(result);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@SafeVarargs</span> <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">final</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> T <span style="color:#57c7ff">random</span>(T... elements) {
</span></span><span style="display:flex;"><span>        LinkedList<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> greetings <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> LinkedList<span style="color:#ff6ac1">&lt;&gt;</span>(Arrays.<span style="color:#57c7ff">asList</span>(elements));
</span></span><span style="display:flex;"><span>        Collections.<span style="color:#57c7ff">shuffle</span>(greetings, ThreadLocalRandom.<span style="color:#57c7ff">current</span>());
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> greetings.<span style="color:#57c7ff">getFirst</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here is the <code>AsyncUtil</code> class in case you are wondering what&rsquo;s going on:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">AsyncUtil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">randomSleep</span>(<span style="color:#9aedfe">int</span> duration, TimeUnit timeUnit) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>            timeUnit.<span style="color:#57c7ff">sleep</span>(ThreadLocalRandom.<span style="color:#57c7ff">current</span>().<span style="color:#57c7ff">nextInt</span>(duration));
</span></span><span style="display:flex;"><span>        } <span style="color:#ff6ac1">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>            Throwables.<span style="color:#57c7ff">propagate</span>(e);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> String <span style="color:#57c7ff">getThreadName</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> Thread.<span style="color:#57c7ff">currentThread</span>().<span style="color:#57c7ff">getName</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Our service will say hello in a random language within 3 seconds of time.
How do we handle the result?</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">Runner</span> <span style="color:#ff5c57">implements</span> CommandLineRunner {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> AsyncService asyncService;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">run</span>(String... args) <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        IntStream.<span style="color:#57c7ff">rangeClosed</span>(1, 10)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">mapToObj</span>(__ <span style="color:#ff6ac1">-&gt;</span> asyncService.<span style="color:#57c7ff">asyncGreeting</span>().<span style="color:#57c7ff">exceptionally</span>(Throwable::getMessage))
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">forEach</span>(<span style="color:#ff6ac1">this</span>::printResult);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">printResult</span>(CompletableFuture<span style="color:#ff6ac1">&lt;</span>String<span style="color:#ff6ac1">&gt;</span> future) {
</span></span><span style="display:flex;"><span>        future.<span style="color:#57c7ff">thenRun</span>(() <span style="color:#ff6ac1">-&gt;</span> System.<span style="color:#57c7ff">out</span>.<span style="color:#57c7ff">println</span>(future.<span style="color:#57c7ff">join</span>()));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>My what a beauty! In the above class, we create a stream of ten elements
to call our async service ten times, make sure that we handle exceptions and
print each result on the console.</p>
<p>Please, notice that <strong>nothing is blocking</strong> in the above code.
The <code>join()</code> method will wait for a result but since we are calling it in a
callback after completion, we get a fully asynchronous code.</p>
<p>This code will produce the following output, printing each lines at different
timings:</p>
<pre tabindex="0"><code>async-7 - gut de
async-5 - konnichiwa
async-4 - hallo
async-2 - hallo
async-6 - saluton
async-1 - fáilte
async-9 - päivää
async-0 - hej
async-8 - hallo
async-3 - saluton
</code></pre><h2 id="handling-timeouts">Handling timeouts</h2>
<p>An interesting question with future is how to set a timeout and cancel them
if they run late.</p>
<p>My solution is to create another executor like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">static</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">TimeOutExecutorService</span> <span style="color:#ff5c57">extends</span> CompletableExecutors.<span style="color:#57c7ff">DelegatingCompletableExecutorService</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> Duration timeout;
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> ScheduledExecutorService schedulerExecutor;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    TimeOutExecutorService(ExecutorService delegate, Duration timeout) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">super</span>(delegate);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">timeout</span> <span style="color:#ff6ac1">=</span> timeout;
</span></span><span style="display:flex;"><span>        schedulerExecutor <span style="color:#ff6ac1">=</span> Executors.<span style="color:#57c7ff">newScheduledThreadPool</span>(1);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span> <span style="color:#ff5c57">public</span> <span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">submit</span>(Callable<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> task) {
</span></span><span style="display:flex;"><span>        CompletableFuture<span style="color:#ff6ac1">&lt;</span>T<span style="color:#ff6ac1">&gt;</span> cf <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> CompletableFuture<span style="color:#ff6ac1">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>        Future<span style="color:#ff6ac1">&lt;?&gt;</span> future <span style="color:#ff6ac1">=</span> delegate.<span style="color:#57c7ff">submit</span>(() <span style="color:#ff6ac1">-&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">try</span> {
</span></span><span style="display:flex;"><span>                cf.<span style="color:#57c7ff">complete</span>(task.<span style="color:#57c7ff">call</span>());
</span></span><span style="display:flex;"><span>            } <span style="color:#ff6ac1">catch</span> (CancellationException e) {
</span></span><span style="display:flex;"><span>                cf.<span style="color:#57c7ff">cancel</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>            } <span style="color:#ff6ac1">catch</span> (Throwable ex) {
</span></span><span style="display:flex;"><span>                cf.<span style="color:#57c7ff">completeExceptionally</span>(ex);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        schedulerExecutor.<span style="color:#57c7ff">schedule</span>(() <span style="color:#ff6ac1">-&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">if</span> (<span style="color:#ff6ac1">!</span>cf.<span style="color:#57c7ff">isDone</span>()) {
</span></span><span style="display:flex;"><span>                cf.<span style="color:#57c7ff">completeExceptionally</span>(<span style="color:#ff6ac1">new</span> TimeoutException(<span style="color:#5af78e">&#34;Timeout after &#34;</span> <span style="color:#ff6ac1">+</span> timeout));
</span></span><span style="display:flex;"><span>                future.<span style="color:#57c7ff">cancel</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }, timeout.<span style="color:#57c7ff">toMillis</span>(), TimeUnit.<span style="color:#57c7ff">MILLISECONDS</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> cf;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This implementation was inspired by <a href="http://stackoverflow.com/questions/23575067/timeout-with-default-value-in-java-8-completablefuture/24457111#24457111">a discussion</a> on stackoverflow.</p>
<p>We can now create a new executor as a Spring bean:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Bean</span>(name <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;timed&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> Executor <span style="color:#57c7ff">timeoutExecutor</span>() {
</span></span><span style="display:flex;"><span>    ThreadFactory threadFactory <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ThreadFactoryBuilder().<span style="color:#57c7ff">setNameFormat</span>(<span style="color:#5af78e">&#34;timed-%d&#34;</span>).<span style="color:#57c7ff">build</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> TimedCompletables.<span style="color:#57c7ff">timed</span>(Executors.<span style="color:#57c7ff">newFixedThreadPool</span>(10, threadFactory), Duration.<span style="color:#57c7ff">ofSeconds</span>(2));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>An use it like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Async</span>(<span style="color:#5af78e">&#34;timed&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> CompletableFuture<span style="color:#ff6ac1">&lt;</span>String<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">asyncTimeoutGreeting</span>() {
</span></span><span style="display:flex;"><span>    AsyncUtil.<span style="color:#57c7ff">randomSleep</span>(3000, TimeUnit.<span style="color:#57c7ff">MILLISECONDS</span>);
</span></span><span style="display:flex;"><span>    String result <span style="color:#ff6ac1">=</span> AsyncUtil.<span style="color:#57c7ff">getThreadName</span>() <span style="color:#ff6ac1">+</span> <span style="color:#5af78e">&#34; - &#34;</span> <span style="color:#ff6ac1">+</span> random(greetings);
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> CompletableFuture.<span style="color:#57c7ff">completedFuture</span>(result);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now if we run the application again, about one third of the tasks will time out:</p>
<pre tabindex="0"><code>timed-4 - saluton
timed-3 - hallo
timed-7 - saluton
timed-8 - fáilte
timed-1 - saluton
timed-5 - hallo
Timeout after PT2S
Timeout after PT2S
Timeout after PT2S
Timeout after PT2S
</code></pre><h2 id="profiling-threads-with-aop">Profiling threads with AOP</h2>
<p>Let&rsquo;s add a dependency to <code>spring-boot-starter-aop</code> to automatically profile the
execution of our async methods:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Aspect</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">ServiceProfiler</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#ff9f43">@Pointcut</span>(<span style="color:#5af78e">&#34;execution(java.util.concurrent.CompletableFuture completable.service.*.*(..))&#34;</span>)
</span></span><span style="display:flex;"><span>   <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">serviceMethods</span>() {
</span></span><span style="display:flex;"><span>   }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#ff9f43">@Around</span>(<span style="color:#5af78e">&#34;serviceMethods()&#34;</span>)
</span></span><span style="display:flex;"><span>   <span style="color:#ff5c57">public</span> Object <span style="color:#57c7ff">profile</span>(ProceedingJoinPoint pjp) <span style="color:#ff5c57">throws</span> Throwable {
</span></span><span style="display:flex;"><span>       StopWatch stopWatch <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> StopWatch();
</span></span><span style="display:flex;"><span>       stopWatch.<span style="color:#57c7ff">start</span>();
</span></span><span style="display:flex;"><span>       Object output <span style="color:#ff6ac1">=</span> pjp.<span style="color:#57c7ff">proceed</span>();
</span></span><span style="display:flex;"><span>       stopWatch.<span style="color:#57c7ff">stop</span>();
</span></span><span style="display:flex;"><span>       <span style="color:#ff6ac1">if</span> (output <span style="color:#ff6ac1">instanceof</span> CompletableFuture) {
</span></span><span style="display:flex;"><span>           CompletableFuture future <span style="color:#ff6ac1">=</span> (CompletableFuture) output;
</span></span><span style="display:flex;"><span>           String debug <span style="color:#ff6ac1">=</span> String.<span style="color:#57c7ff">format</span>(<span style="color:#5af78e">&#34;(%d ms)&#34;</span>, stopWatch.<span style="color:#57c7ff">getTotalTimeMillis</span>());
</span></span><span style="display:flex;"><span>           future.<span style="color:#57c7ff">thenAccept</span>(o <span style="color:#ff6ac1">-&gt;</span> System.<span style="color:#57c7ff">out</span>.<span style="color:#57c7ff">println</span>(o <span style="color:#ff6ac1">+</span> <span style="color:#5af78e">&#34; - &#34;</span> <span style="color:#ff6ac1">+</span> debug));
</span></span><span style="display:flex;"><span>       }
</span></span><span style="display:flex;"><span>       <span style="color:#ff6ac1">return</span> output;
</span></span><span style="display:flex;"><span>   }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is a bit unnecessary but I used one of the callbacks of <code>CompletableFuture</code>
to display the profiling message :)</p>
<h2 id="conclusion">Conclusion</h2>
<p>Java 8 <code>CompletableFuture</code>s provide an awesome API to deal with async
tasks. Too bad that no Executor is able to create them without a bit of code
on our part.</p>
<p>I&rsquo;m not a concurrency expert so please tell me what you think of this solution
in the comments.</p>
]]></content:encoded></item><item><title>Understanding Spring Boot</title><link>https://geowarin.com/understanding-spring-boot/</link><pubDate>Fri, 06 Mar 2015 00:00:00 +0000</pubDate><guid>https://geowarin.com/understanding-spring-boot/</guid><description>Wonder how spring boot&amp;rsquo;s magic operates behind the scenes? You&amp;rsquo;ve come to the right place!</description><content:encoded><![CDATA[<p>Spring boot is an opinionated library that allows to create executable Spring applications with a convention over configuration approach.</p>
<p>The magic behind this framework lies in the <code>@EnableAutoConfiguration</code> annotation,
which will automatically load all the beans the application requires depending
on what Spring Boot finds in the classpath.</p>
<h2 id="the-enable-annotations">The <code>@Enable*</code> annotations</h2>
<p>The <code>@Enable...</code> annotations are not new, they were first introduced in Spring 3 when the idea of replacing the XML files with java annotated classes is born.</p>
<p>A lot of Spring users already know <code>@EnableTransactionManagement</code>, which will enable declarative transaction management,
<code>@EnableWebMvc</code>, which enables Spring MVC, or <code>@EnableScheduling</code>, which will initialize a scheduler.</p>
<p>These annotations are in fact a simple configuration import with the <code>@Import</code> annotation.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Target</span>(ElementType.<span style="color:#57c7ff">TYPE</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Retention</span>(RetentionPolicy.<span style="color:#57c7ff">RUNTIME</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Documented</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Import</span>({ EnableAutoConfigurationImportSelector.<span style="color:#57c7ff">class</span>,
</span></span><span style="display:flex;"><span>        AutoConfigurationPackages.<span style="color:#57c7ff">Registrar</span>.<span style="color:#57c7ff">class</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff9f43">@interface</span> EnableAutoConfiguration {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * Exclude specific auto-configuration classes such that they will never be applied.
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     */</span>
</span></span><span style="display:flex;"><span>    Class<span style="color:#ff6ac1">&lt;?&gt;[]</span> exclude() <span style="color:#ff6ac1">default</span> {};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>EnableAutoConfigurationImportSelector</code> uses <code>SpringFactoriesLoader#loadFactoryNames</code> of Spring core.
SpringFactoriesLoader will look for jars containing a file with the path <code>META-INF/spring.factories</code>.</p>
<p>When it finds such a file, the <code>SpringFactoriesLoader</code> will look for the property named after our configuration file.
In our case, <code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>.</p>
<p>Let&rsquo;s take a look at the <code>spring-boot-autoconfigure</code> jar, which indeed contains a <code>spring.factories</code> file copied below:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-properties" data-lang="properties"><span style="display:flex;"><span><span style="color:#78787e"># Initializers</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">org.springframework.context.ApplicationContextInitializer</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># Auto Configure</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.data.JpaRepositoriesAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.data.MongoRepositoriesAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.jms.JmsTemplateAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.mongo.MongoTemplateAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\
</span></span></span><span style="display:flex;"><span><span style="color:#5af78e">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration</span>
</span></span></code></pre></div><p>In this file, we can see a list of the Spring Boot auto-configurations.
Let&rsquo;s take a closer look at one of those configurations, <code>MongoAutoConfiguration</code> for instance:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ConditionalOnClass</span>(Mongo.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableConfigurationProperties</span>(MongoProperties.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MongoAutoConfiguration</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> MongoProperties properties;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> Mongo mongo;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@PreDestroy</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">close</span>() <span style="color:#ff5c57">throws</span> UnknownHostException {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">if</span> (<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mongo</span> <span style="color:#ff6ac1">!=</span> <span style="color:#ff6ac1">null</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mongo</span>.<span style="color:#57c7ff">close</span>();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@ConditionalOnMissingBean</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> Mongo <span style="color:#57c7ff">mongo</span>() <span style="color:#ff5c57">throws</span> UnknownHostException {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mongo</span> <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">properties</span>.<span style="color:#57c7ff">createMongoClient</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mongo</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This simple Spring configuration class declares typical beans needed to use mongoDb.</p>
<p>This classes, like a lot of others in Spring Boot relies heavily on Spring annotations:</p>
<ul>
<li><code>@ConditionOnClass</code> activates a configuration only if one or several classes are present on the classpath</li>
<li><code>@EnableConfigurationProperties</code> automatically maps a POJO to a set of properties in the Spring Boot configuration file
(by default <code>application.properties</code>)</li>
<li><code>@ConditionalOnMissingBean</code> enables a bean definition only if the bean wasn&rsquo;t previously defined</li>
</ul>
<p>You can also refine the order in which those configuration classes load with <code>@AutoConfigureBefore</code> et <code>@AutoConfigureAfter</code>.</p>
<h2 id="properties-mapping">Properties Mapping</h2>
<p>Let&rsquo;s look at <code>MongoProperties</code>, which is a classic example of Spring Boot properties mapping:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@ConfigurationProperties</span>(prefix <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;spring.data.mongodb&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MongoProperties</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> String host;
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> <span style="color:#9aedfe">int</span> port <span style="color:#ff6ac1">=</span> DBPort.<span style="color:#57c7ff">PORT</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> String uri <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;mongodb://localhost/test&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> String database;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">// ... getters/ setters omitted</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>@ConfigurationProperties</code> will associate every properties with a particular prefix to the POJO.
For instance, the property <code>spring.data.mongodb.port</code> will be mapped to the port attribute of this class.</p>
<p>If you&rsquo;re a Spring Boot user, I strongly encourage you to use those capabilities to remove the boiler plate code
associated with configuration properties.</p>
<h2 id="the-conditional-annotations">The <code>@Conditional</code> annotations</h2>
<p>The power of Spring Boot lies in one of Spring 4 new features: the <code>@Conditional</code> annotations,
which will enable some configuration only if a specific condition is met.</p>
<p>A sneak peek in the <code>org.springframework.boot.autoconfigure.condition</code> package in Spring Boot will give us an overview of what
we can do with those annotations:</p>
<ul>
<li><code>@ConditionalOnBean</code></li>
<li><code>@ConditionalOnClass</code></li>
<li><code>@ConditionalOnExpression</code></li>
<li><code>@ConditionalOnMissingBean</code></li>
<li><code>@ConditionalOnMissingClass</code></li>
<li><code>@ConditionalOnNotWebApplication</code></li>
<li><code>@ConditionalOnResource</code></li>
<li><code>@ConditionalOnWebApplication</code></li>
</ul>
<p>Let&rsquo;s take a closer look at <code>@ConditionalOnExpression</code>, which allows you to write a condition in the <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html">Spring Expression language</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Conditional</span>(OnExpressionCondition.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Retention</span>(RetentionPolicy.<span style="color:#57c7ff">RUNTIME</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Target</span>({ ElementType.<span style="color:#57c7ff">TYPE</span>, ElementType.<span style="color:#57c7ff">METHOD</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff9f43">@interface</span> ConditionalOnExpression {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * The SpEL expression to evaluate. Expression should return {@code true} if the
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     * condition passes or {@code false} if it fails.
</span></span></span><span style="display:flex;"><span><span style="color:#78787e">     */</span>
</span></span><span style="display:flex;"><span>    String <span style="color:#57c7ff">value</span>() <span style="color:#ff6ac1">default</span> <span style="color:#5af78e">&#34;true&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this class, we indeed make use of the <code>@Conditional</code> annotation. The condition is defined in the <code>OnExpressionCondition</code> class:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">OnExpressionCondition</span> <span style="color:#ff5c57">extends</span> SpringBootCondition {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> ConditionOutcome <span style="color:#57c7ff">getMatchOutcome</span>(ConditionContext context, AnnotatedTypeMetadata metadata) {
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// ...</span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// we first get a handle on the EL context via the ConditionContext</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#9aedfe">boolean</span> result <span style="color:#ff6ac1">=</span> (Boolean) resolver.<span style="color:#57c7ff">evaluate</span>(expression, expressionContext);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// ...</span>
</span></span><span style="display:flex;"><span>        <span style="color:#78787e">// here we create a message the user will see when debugging</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> ConditionOutcome(result, message.<span style="color:#57c7ff">toString</span>());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the end, the <code>@Conditional</code> are resolved to simple booleans, via the <code>ConditionOutcome.isMatch</code> method.</p>
<h2 id="the-applicationcontextinitializers">The <code>ApplicationContextInitializer</code>s</h2>
<p>The second possibility that the <code>spring.factories</code> file offers, is to define application initializers.
They allow us to manipulate Spring&rsquo;s <code>applicationContext</code> before the application is loaded.</p>
<p>In particular, they can create listeners on the context thanks to the <code>ConfigurableApplicationContext#addApplicationListener</code>
method.</p>
<p>Spring Boot does that in the <code>AutoConfigurationReportLoggingInitializer</code> which listens to system events, like context refresh or the application&rsquo;s failure to start.
This will help create the auto-configuration report when you start your application
in debug mode.</p>
<p>You can start your application in debug mode with either the <code>-Ddebug</code> flag or add the property <code>debug=true</code> to <code>application.properties</code>.</p>
<h2 id="debug-spring-boot-auto-configuration">Debug Spring Boot Auto-Configuration</h2>
<p>The documentation gives us <a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-troubleshoot-auto-configuration">some advice</a> to
understand what happened during the auto-configuration.</p>
<p>When launched in debug mode, Spring Boot will generate a report that looks like this one:</p>
<pre tabindex="0"><code>Positive matches:
-----------------

   MessageSourceAutoConfiguration
      - @ConditionalOnMissingBean (types: org.springframework.context.MessageSource; SearchStrategy: all) found no beans (OnBeanCondition)

   JmxAutoConfiguration
      - @ConditionalOnClass classes found: org.springframework.jmx.export.MBeanExporter (OnClassCondition)
      - SpEL expression on org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration: ${spring.jmx.enabled:true} (OnExpressionCondition)
      - @ConditionalOnMissingBean (types: org.springframework.jmx.export.MBeanExporter; SearchStrategy: all) found no beans (OnBeanCondition)

   DispatcherServletAutoConfiguration
      - found web application StandardServletEnvironment (OnWebApplicationCondition)
      - @ConditionalOnClass classes found: org.springframework.web.servlet.DispatcherServlet (OnClassCondition)


Negative matches:
-----------------

   DataSourceAutoConfiguration
      - required @ConditionalOnClass classes not found: org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType (OnClassCondition)

   DataSourceTransactionManagerAutoConfiguration
      - required @ConditionalOnClass classes not found: org.springframework.jdbc.core.JdbcTemplate,org.springframework.transaction.PlatformTransactionManager (OnClassCondition)

   MongoAutoConfiguration
      - required @ConditionalOnClass classes not found: com.mongodb.Mongo (OnClassCondition)

   FallbackWebSecurityAutoConfiguration
      - SpEL expression on org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration: !${security.basic.enabled:true} (OnExpressionCondition)

   SecurityAutoConfiguration
      - required @ConditionalOnClass classes not found: org.springframework.security.authentication.AuthenticationManager (OnClassCondition)

   EmbeddedServletContainerAutoConfiguration.EmbeddedJetty
      - required @ConditionalOnClass classes not found: org.eclipse.jetty.server.Server,org.eclipse.jetty.util.Loader (OnClassCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#localeResolver
      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.LocaleResolver; SearchStrategy: all) found no beans (OnBeanCondition)
      - SpEL expression: &#39;${spring.mvc.locale:}&#39; != &#39;&#39; (OnExpressionCondition)

   WebSocketAutoConfiguration
      - required @ConditionalOnClass classes not found: org.springframework.web.socket.WebSocketHandler,org.apache.tomcat.websocket.server.WsSci (OnClassCondition)
</code></pre><p>For each auto-configuration, we can see why it was initiated or why it failed.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Spring Boot&rsquo;s approach leverages the possibilities of Spring 4 and allows to create an auto-configured
<a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-first-application-executable-jar">executable jar</a>.</p>
<p>Don&rsquo;t forget that, as <a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-replacing-auto-configuration">the documentation states</a>, you can gradually replace the auto-configuration by declaring your own beans.</p>
<p>What I love about Spring Boot is that it allows you to prototype an application very quickly but also to learn with its
source. Auto-configurations are neat pieces of code that can teach you a thing or two about Spring.</p>
<p>As Josh Long, developer advocate at Pivotal, said:</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://twitter.com/springcentral?ref_src=twsrc%5Etfw">@springcentral</a> <a href="https://twitter.com/david_syer?ref_src=twsrc%5Etfw">@david_syer</a> that&#39;s really the point of <a href="https://twitter.com/springboot?ref_src=twsrc%5Etfw">@springboot</a> imho. Boot lets you pair-program w/ the Spring team <a href="http://t.co/WNUJfxOwoY">http://t.co/WNUJfxOwoY</a></p>&mdash; Josh Long (@starbuxman) <a href="https://twitter.com/starbuxman/status/458266170861158401?ref_src=twsrc%5Etfw">April 21, 2014</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


]]></content:encoded></item><item><title>A simple Spring Boot and Jersey Application</title><link>https://geowarin.com/a-simple-spring-boot-and-jersey-application/</link><pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate><guid>https://geowarin.com/a-simple-spring-boot-and-jersey-application/</guid><description>How to setup a simple spring-boot and jersey application</description><content:encoded><![CDATA[<p>Spring boot RC1 <a href="https://spring.io/blog/2014/01/22/spring-boot-1-0-0-rc1-released">is available</a>.</p>
<p><em>Update</em> : <a href="https://spring.io/blog/2014/02/12/spring-boot-1-0-0-rc2-released">RC3 released</a> I updated the project.</p>
<p>It takes spring development and fast prototyping to a whole new level by taking care of all the dependencies for you, auto-detecting your configuration, providing an executable jar (great for deploying in the cloud), and much more.</p>
<p>In this post we&rsquo;ll see how to integrate spring-boot with jersey, including testing of Jersey controllers with <a href="https://jersey.java.net/documentation/latest/test-framework.html">jersey-test</a>.</p>
<p>Of course, the source code is available <a href="https://github.com/geowarin/springboot-jersey">on my github</a>.</p>
<h2 id="setting-up-spring-boot">Setting up spring-boot</h2>
<p><a href="http://projects.spring.io/spring-boot/">Spring boot</a> aims towards simplicity and convention over configuration. First step is to include the necessary configuration in your pom.xml :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;parent&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;artifactId&gt;</span>spring-boot-starter-parent<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;version&gt;</span>1.0.0.RC3<span style="color:#ff6ac1">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/parent&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;dependencies&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;artifactId&gt;</span>spring-boot-starter-web<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/dependencies&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;repositories&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;repository&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;id&gt;</span>spring-milestones<span style="color:#ff6ac1">&lt;/id&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;name&gt;</span>Spring Milestones<span style="color:#ff6ac1">&lt;/name&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;url&gt;</span>http://repo.spring.io/milestone<span style="color:#ff6ac1">&lt;/url&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;snapshots&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;enabled&gt;</span>false<span style="color:#ff6ac1">&lt;/enabled&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;/snapshots&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/repository&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/repositories&gt;</span>
</span></span></code></pre></div><p>One of the good ideas of spring boot is to provide all the &lsquo;boilerplate&rsquo; configuration for you by letting you inherit their parent configuration.</p>
<p>Then, you&rsquo;ll select a starter, in this case, we are going to develop a web application, so starter-web is fine.</p>
<p>Now, we&rsquo;ll create a main function for our application :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@EnableAutoConfiguration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">Application</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">main</span>(String<span style="color:#ff6ac1">[]</span> args) <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">new</span> SpringApplicationBuilder(Application.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">showBanner</span>(<span style="color:#ff6ac1">false</span>)
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">run</span>(args);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We will just add an index.html file in the webapp directory and we should be ok.
With this configuration, you can run the main function and you&rsquo;ll see your index file.</p>
<p>Awesome.</p>
<h2 id="runnable-jar">Runnable jar</h2>
<p>Spring boot allows you to package your application as a runnable jar. Include the following in your <code>pom.xml</code> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;build&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;plugins&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;plugin&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#ff6ac1">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff6ac1">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span style="color:#ff6ac1">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;/plugin&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/plugins&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/build&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;pluginRepositories&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;pluginRepository&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;id&gt;</span>spring-milestones<span style="color:#ff6ac1">&lt;/id&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">&lt;url&gt;</span>http://repo.spring.io/milestone<span style="color:#ff6ac1">&lt;/url&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">&lt;/pluginRepository&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">&lt;/pluginRepositories&gt;</span>
</span></span></code></pre></div><p>With this, when running <code>mvn package</code>, you will generate the runnable jar.
Just <code>java -jar</code> it to launch an embedded Tomcat containing your webapp!</p>
<h2 id="integrating-jersey">Integrating jersey</h2>
<p>Jersey has a spring support project <a href="https://jersey.java.net/documentation/latest/spring.html">jersey-spring-3</a>. Despite what its name suggests, the project is (still?) compatible with spring 4.0 so we&rsquo;ll use it.</p>
<p>It basically allows you to inject spring beans in your jersey controllers.</p>
<p>To complete our configuration we&rsquo;ll add the jersey servlet to our application together with a small class to configure it.</p>
<p>In the Application :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> ServletRegistrationBean <span style="color:#57c7ff">jerseyServlet</span>() {
</span></span><span style="display:flex;"><span>    ServletRegistrationBean registration <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ServletRegistrationBean(<span style="color:#ff6ac1">new</span> ServletContainer(), <span style="color:#5af78e">&#34;/rest/*&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#78787e">// our rest resources will be available in the path /rest/*</span>
</span></span><span style="display:flex;"><span>    registration.<span style="color:#57c7ff">addInitParameter</span>(ServletProperties.<span style="color:#57c7ff">JAXRS_APPLICATION_CLASS</span>, JerseyConfig.<span style="color:#57c7ff">class</span>.<span style="color:#57c7ff">getName</span>());
</span></span><span style="display:flex;"><span>    <span style="color:#ff6ac1">return</span> registration;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We also need to add the <code>@ComponentScan</code> annotation to find our spring services and components (including jersey)</p>
<p>Next, we&rsquo;ll create the JerseyConfig class :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">JerseyConfig</span> <span style="color:#ff5c57">extends</span> ResourceConfig {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#57c7ff">JerseyConfig</span>() {
</span></span><span style="display:flex;"><span>        register(RequestContextFilter.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>        packages(<span style="color:#5af78e">&#34;com.geowarin.rest&#34;</span>);
</span></span><span style="display:flex;"><span>        register(LoggingFilter.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here we are providing the package(s) in which our rest resources are.</p>
<p>Speaking about our rest resources, we&rsquo;ll create a simple one :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Path</span>(<span style="color:#5af78e">&#34;/&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RestResource</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@GET</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Produces</span>(MediaType.<span style="color:#57c7ff">APPLICATION_JSON</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Path</span>(<span style="color:#5af78e">&#34;/hello&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">hello</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;Hello World&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There you have it : the dreadful hello world !</p>
<p>In the <a href="https://github.com/geowarin/springboot-jersey">complete example</a>, I show you how to generate JSON from a domain class.</p>
<p>Basically all you have to do is provide classes with the <code>@XmlRootElement</code> annotation, add the getters and setters for the properties you want serialized and don&rsquo;t forget to provide a default constructor (see <a href="https://github.com/geowarin/springboot-jersey/blob/master/src/main/java/com/geowarin/domain/Message.java">here</a>).</p>
<p>To show that dependency injection works, we&rsquo;ll add a simple service :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Singleton</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MessageService</span> {
</span></span><span style="display:flex;"><span>    List<span style="color:#ff6ac1">&lt;</span>Message<span style="color:#ff6ac1">&gt;</span> messages <span style="color:#ff6ac1">=</span> Collections.<span style="color:#57c7ff">synchronizedList</span>(<span style="color:#ff6ac1">new</span> ArrayList<span style="color:#ff6ac1">&lt;</span>Message<span style="color:#ff6ac1">&gt;</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@PostConstruct</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">init</span>() {
</span></span><span style="display:flex;"><span>        messages.<span style="color:#57c7ff">add</span>(<span style="color:#ff6ac1">new</span> Message(<span style="color:#5af78e">&#34;Joe&#34;</span>, <span style="color:#5af78e">&#34;Hello&#34;</span>));
</span></span><span style="display:flex;"><span>        messages.<span style="color:#57c7ff">add</span>(<span style="color:#ff6ac1">new</span> Message(<span style="color:#5af78e">&#34;Jane&#34;</span>, <span style="color:#5af78e">&#34;Spring boot is cool !&#34;</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> List<span style="color:#ff6ac1">&lt;</span>Message<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">getMessages</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> messages;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can now autowire it to our Jersey controller!</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Path</span>(<span style="color:#5af78e">&#34;/&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RestResource</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">private</span> MessageService messageService;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@GET</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Produces</span>(MediaType.<span style="color:#57c7ff">APPLICATION_JSON</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Path</span>(<span style="color:#5af78e">&#34;/messages&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> List<span style="color:#ff6ac1">&lt;</span>Message<span style="color:#ff6ac1">&gt;</span> <span style="color:#57c7ff">message</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> messageService.<span style="color:#57c7ff">getMessages</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><a href="http://www.eclipse.org/eclipselink/moxy.php">Moxy</a> will automatically convert
the returned result to JSON.</p>
<h2 id="testing">Testing</h2>
<p>Real programmers do tests. We want to test our controller right? There is a framework for that: <a href="https://jersey.java.net/documentation/latest/test-framework.html">jersey-test</a>.</p>
<p><em>The Problem?</em> it does not (yet) support annotated configuration.</p>
<p><del>I&rsquo;m providing a little hack of my own to override the <code>SpringComponentProvider</code> class of <em>jersey-spring3</em> and allow this configuration. See the class on github. It is important to place it in the same package as the original one.</del></p>
<p><em>Update</em> : I submitted a <a href="https://github.com/jersey/jersey/pull/59">pull request</a> which has been accepted by Jersey. I updated the project to use the 2.6 snapshot release of jersey which includes the modified <code>SpringComponentProvider</code>.</p>
<p>Now the test :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">RestResourceTest</span> <span style="color:#ff5c57">extends</span> JerseyTest {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">protected</span> Application <span style="color:#57c7ff">configure</span>() {
</span></span><span style="display:flex;"><span>        ApplicationContext context <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> AnnotationConfigApplicationContext(TestConfig.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> JerseyConfig()
</span></span><span style="display:flex;"><span>                .<span style="color:#57c7ff">property</span>(<span style="color:#5af78e">&#34;contextConfig&#34;</span>, context);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testHello</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">final</span> String hello <span style="color:#ff6ac1">=</span> target(<span style="color:#5af78e">&#34;hello&#34;</span>).<span style="color:#57c7ff">request</span>().<span style="color:#57c7ff">get</span>(String.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>        assertThat(hello).<span style="color:#57c7ff">isEqualTo</span>(<span style="color:#5af78e">&#34;Hello World&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testMessages</span>() <span style="color:#ff5c57">throws</span> JSONException {
</span></span><span style="display:flex;"><span>        <span style="color:#ff5c57">final</span> String messages <span style="color:#ff6ac1">=</span> target(<span style="color:#5af78e">&#34;messages&#34;</span>).<span style="color:#57c7ff">request</span>().<span style="color:#57c7ff">get</span>(String.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>        String expected <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;[ &#34;</span> <span style="color:#ff6ac1">+</span>
</span></span><span style="display:flex;"><span>                <span style="color:#5af78e">&#34;{ &#39;author&#39;: &#39;Joe&#39;, &#39;contents&#39;: &#39;Hello&#39;},&#34;</span> <span style="color:#ff6ac1">+</span>
</span></span><span style="display:flex;"><span>                <span style="color:#5af78e">&#34;{ &#39;author&#39;: &#39;Jane&#39;, &#39;contents&#39;: &#39;Spring boot is cool !&#39;}&#34;</span> <span style="color:#ff6ac1">+</span>
</span></span><span style="display:flex;"><span>                <span style="color:#5af78e">&#34;]&#34;</span>;
</span></span><span style="display:flex;"><span>        JSONAssert.<span style="color:#57c7ff">assertEquals</span>(expected, messages, JSONCompareMode.<span style="color:#57c7ff">LENIENT</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Jersey Test will automatically select a provider from your classpath, in the example I&rsquo;m using the in memory provider which I believe to be the fastest but you can also use <a href="https://grizzly.java.net/">grizzly</a> and others instead.</p>
<p>I&rsquo;m using <a href="https://github.com/skyscreamer/JSONassert">JSONassert</a> to test json results.</p>
<p>In the example, we are providing a simple, lighter <code>TestConfig</code> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ComponentScan</span>(basePackageClasses <span style="color:#ff6ac1">=</span> RestResource.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">TestConfig</span> {
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Testing with Jersey Test is fast and intuitive.</p>
<p>Spring boot is a nice addition to the spring ecosystem. Now that everything should be accessible from the cloud, so should be spring webapps !</p>
]]></content:encoded></item><item><title>Complete example of a Spring MVC 3.2 project</title><link>https://geowarin.com/complete-example-of-a-spring-mvc-3.2-project/</link><pubDate>Wed, 23 Jan 2013 00:00:00 +0000</pubDate><guid>https://geowarin.com/complete-example-of-a-spring-mvc-3.2-project/</guid><description>Awesome spring mvc 3.2 starter with sitemesh, localization, UTF-8, boostrap and spring test mvc</description><content:encoded><![CDATA[<p>You want to get started with Spring MVC 3.2 with a complete XML-less configuration? Have a cool simple project with a lot of the nice-to-have features?</p>
<ol>
<li>A templating framework (we will use <a href="http://wiki.sitemesh.org/display/sitemesh/Home">SiteMesh</a> for this example - I think it is one of the simplest, most powerful frameworks out there)</li>
<li>Localized and custom text and validation messages with reloadable bundles in development</li>
<li>UTF-8 encoding filter for your user inputs</li>
<li>Use the <a href="http://twitter.github.com/bootstrap/">twitter boostrap</a> for a responsive, slick design</li>
<li>Unit tests of your controllers using <a href="https://github.com/SpringSource/spring-test-mvc">spring-test-mvc</a></li>
<li>Be able to run it with embedded tomcat or jetty maven plugins?</li>
</ol>
<p>Then you can directly git clone this project : <a href="https://github.com/geowarin/spring-mvc-examples/tree/master/mvc-base">https://github.com/geowarin/spring-mvc-examples/tree/master/mvc-base</a></p>
<p>This article will explain how this can be done with 5 classes and 1 jsp.</p>
<h2 id="the-configuration-with-spring-32-and-servlet-30">The configuration with spring 3.2 and servlet 3.0</h2>
<p>Since spring 3.1, it is possible to run spring MVC without a web.xml if you are in a servlet 3.0 environment. But spring 3.2 takes things a little bit further by providing a set of abstract classes to enable a <a href="http://static.springsource.org/spring-framework/docs/3.2.0.RELEASE/spring-framework-reference/html/mvc.html#mvc-container-config">very easy configuration</a>. Check this :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">WebInitializer</span> <span style="color:#ff5c57">extends</span> AbstractAnnotationConfigDispatcherServletInitializer {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">protected</span> Class<span style="color:#ff6ac1">&lt;?&gt;[]</span> getRootConfigClasses() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">null</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">protected</span> Class<span style="color:#ff6ac1">&lt;?&gt;[]</span> getServletConfigClasses() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> Class<span style="color:#ff6ac1">&lt;?&gt;[]</span> { WebConfig.<span style="color:#57c7ff">class</span> };
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">protected</span> String<span style="color:#ff6ac1">[]</span> <span style="color:#57c7ff">getServletMappings</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> String<span style="color:#ff6ac1">[]</span> { <span style="color:#5af78e">&#34;/&#34;</span> };
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">protected</span> Filter<span style="color:#ff6ac1">[]</span> <span style="color:#57c7ff">getServletFilters</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		CharacterEncodingFilter characterEncodingFilter <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> CharacterEncodingFilter();
</span></span><span style="display:flex;"><span>		characterEncodingFilter.<span style="color:#57c7ff">setEncoding</span>(<span style="color:#5af78e">&#34;UTF-8&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> Filter<span style="color:#ff6ac1">[]</span> { characterEncodingFilter, <span style="color:#ff6ac1">new</span> SiteMeshFilter()};
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The filters are not mandatory, it just demonstrates how to add them to this configuration (site mesh requires a small xml file to point to a template - it won&rsquo;t be covered by this article but check out the <a href="http://wiki.sitemesh.org/display/sitemesh/Start+Using+SiteMesh+in+10+Minutes">documentation</a> or have a look at this project on <a href="https://github.com/geowarin/spring-mvc-examples/tree/master/mvc-base">github</a>).</p>
<p>The UTF-8 filter will prevent encoding problems with your user inputs.</p>
<p>Spring MVC also requires a <strong>WebConfig</strong> class. This is the minimal one :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableWebMvc</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ComponentScan</span>(basePackages <span style="color:#ff6ac1">=</span> { <span style="color:#5af78e">&#34;com.geowarin.mvc.base.controller&#34;</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">WebConfig</span> <span style="color:#ff5c57">extends</span> WebMvcConfigurerAdapter {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">addResourceHandlers</span>(ResourceHandlerRegistry registry) {
</span></span><span style="display:flex;"><span>		registry.<span style="color:#57c7ff">addResourceHandler</span>(<span style="color:#5af78e">&#34;/resources/**&#34;</span>).<span style="color:#57c7ff">addResourceLocations</span>(<span style="color:#5af78e">&#34;/resources/&#34;</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> ViewResolver <span style="color:#57c7ff">viewResolver</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		InternalResourceViewResolver viewResolver <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> InternalResourceViewResolver();
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setViewClass</span>(JstlView.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setPrefix</span>(<span style="color:#5af78e">&#34;/WEB-INF/views&#34;</span>);
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setSuffix</span>(<span style="color:#5af78e">&#34;.jsp&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> viewResolver;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <strong>@ComponentScan</strong> annotation will indicate the package in which our controllers are found.
The <strong>ViewResolver</strong> bean will indicate both where our views can be found and what their extension is.</p>
<p>In this example for instance we will just have a simple view in <strong>/WEB-INF/views/home.jsp</strong>. The <strong>ResourceHandler</strong> indicates where our static resources can be found (css, js, images, etc.).</p>
<p>Here is our controller :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Controller</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">HomeController</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@RequestMapping</span>(value <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;/&#34;</span>, method <span style="color:#ff6ac1">=</span> RequestMethod.<span style="color:#57c7ff">GET</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">displayHome</span>(Model model) {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;/home&#34;</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>At this point, you can write &ldquo;hello&rdquo; in your home.jsp, launch a tomcat and enjoy our 3 classes spring MVC hello world. No web.xml, nothing else.</p>
<h2 id="interceptors-locales-messages">Interceptors, locales, messages</h2>
<p>Let me just show you the full configuration for our project :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@EnableWebMvc</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ComponentScan</span>(basePackages <span style="color:#ff6ac1">=</span> { <span style="color:#5af78e">&#34;com.geowarin.mvc.base.controller&#34;</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">WebConfig</span> <span style="color:#ff5c57">extends</span> WebMvcConfigurerAdapter {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">addResourceHandlers</span>(ResourceHandlerRegistry registry) {
</span></span><span style="display:flex;"><span>		registry.<span style="color:#57c7ff">addResourceHandler</span>(<span style="color:#5af78e">&#34;/resources/**&#34;</span>).<span style="color:#57c7ff">addResourceLocations</span>(<span style="color:#5af78e">&#34;/resources/&#34;</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">addInterceptors</span>(InterceptorRegistry registry) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		LocaleChangeInterceptor localeChangeInterceptor <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> LocaleChangeInterceptor();
</span></span><span style="display:flex;"><span>		localeChangeInterceptor.<span style="color:#57c7ff">setParamName</span>(<span style="color:#5af78e">&#34;lang&#34;</span>);
</span></span><span style="display:flex;"><span>		registry.<span style="color:#57c7ff">addInterceptor</span>(localeChangeInterceptor);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> LocaleResolver <span style="color:#57c7ff">localeResolver</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		CookieLocaleResolver cookieLocaleResolver <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> CookieLocaleResolver();
</span></span><span style="display:flex;"><span>		cookieLocaleResolver.<span style="color:#57c7ff">setDefaultLocale</span>(StringUtils.<span style="color:#57c7ff">parseLocaleString</span>(<span style="color:#5af78e">&#34;en&#34;</span>));
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> cookieLocaleResolver;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> ViewResolver <span style="color:#57c7ff">viewResolver</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		InternalResourceViewResolver viewResolver <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> InternalResourceViewResolver();
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setViewClass</span>(JstlView.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setPrefix</span>(<span style="color:#5af78e">&#34;/WEB-INF/views&#34;</span>);
</span></span><span style="display:flex;"><span>		viewResolver.<span style="color:#57c7ff">setSuffix</span>(<span style="color:#5af78e">&#34;.jsp&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> viewResolver;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> MessageSource <span style="color:#57c7ff">messageSource</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		ReloadableResourceBundleMessageSource messageSource <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ReloadableResourceBundleMessageSource();
</span></span><span style="display:flex;"><span>		messageSource.<span style="color:#57c7ff">setBasenames</span>(<span style="color:#5af78e">&#34;classpath:messages/messages&#34;</span>, <span style="color:#5af78e">&#34;classpath:messages/validation&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// if true, the key of the message will be displayed if the key is not</span>
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// found, instead of throwing a NoSuchMessageException</span>
</span></span><span style="display:flex;"><span>		messageSource.<span style="color:#57c7ff">setUseCodeAsDefaultMessage</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>		messageSource.<span style="color:#57c7ff">setDefaultEncoding</span>(<span style="color:#5af78e">&#34;UTF-8&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#78787e">// # -1 : never reload, 0 always reload</span>
</span></span><span style="display:flex;"><span>		messageSource.<span style="color:#57c7ff">setCacheSeconds</span>(0);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> messageSource;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <strong>localeInterceptor</strong> will provide a way to switch the language in any page just by passing the lang=&lsquo;en&rsquo;, lang=&lsquo;fr&rsquo;, and so on to your url.
The <strong>localeResolver</strong> will work with a simple cookie to memorize the user preference (you don&rsquo;t want to pass the lang argument through your whole site, do you?).</p>
<p>With the messageSource, you will get access to properties bundle usable in your web pages. Here it is configured to be developper friendly (always reload, no error).</p>
<p>These bundled can be localized. You can have as many as you want :</p>
<ul>
<li><strong>messages_en.properties</strong> for english language text</li>
<li><strong>message_fr.properties</strong> for french</li>
<li><strong>message_cn.properties</strong>, etc.</li>
</ul>
<h2 id="a-form-a-dto-some-validation">A form, a DTO, some validation</h2>
<p>Next we will show a very simple usage of a form to demonstrate the localized, custom validation messages.</p>
<p>In your home.jsp, write this code :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#ff6ac1">form:form</span> <span style="color:#57c7ff">id</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;form&#34;</span> <span style="color:#57c7ff">method</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;post&#34;</span> <span style="color:#57c7ff">modelAttribute</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;formDTO&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#ff6ac1">form:input</span> <span style="color:#57c7ff">path</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;messageFromUser&#34;</span> /&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#ff6ac1">form:errors</span> <span style="color:#57c7ff">path</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;messageFromUser&#34;</span> <span style="color:#57c7ff">cssClass</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;errorMessage&#34;</span> <span style="color:#57c7ff">element</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;div&#34;</span> /&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#ff6ac1">c:if</span> <span style="color:#57c7ff">test</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;${not empty message}&#34;</span>&gt;
</span></span><span style="display:flex;"><span>		&lt;<span style="color:#ff6ac1">div</span> <span style="color:#57c7ff">id</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;message&#34;</span> <span style="color:#57c7ff">class</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;alert alert-success&#34;</span>&gt;
</span></span><span style="display:flex;"><span>			&lt;<span style="color:#ff6ac1">spring:message</span> <span style="color:#57c7ff">code</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;message.youWrote&#34;</span> <span style="color:#57c7ff">arguments</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;${message}&#34;</span> <span style="color:#57c7ff">htmlEscape</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;true&#34;</span> /&gt;
</span></span><span style="display:flex;"><span>		&lt;/<span style="color:#ff6ac1">div</span>&gt;
</span></span><span style="display:flex;"><span>	&lt;/<span style="color:#ff6ac1">c:if</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#ff6ac1">button</span> <span style="color:#57c7ff">type</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;submit&#34;</span> <span style="color:#57c7ff">class</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">&#34;btn&#34;</span>&gt;Submit&lt;/<span style="color:#ff6ac1">button</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#ff6ac1">form:form</span>&gt;
</span></span></code></pre></div><p>This will bind your form to a model attribute called <strong>formDTO</strong>, we will see it in the controller shortly. You could also provide an action attribute but we will just map the action to <strong>&quot;/&quot;</strong>, just like our jsp.</p>
<p>Then the input will be bound to the <strong>messageFromUser</strong> attribute of the <strong>formDTO</strong>. You can also see the associated error message if validation fails.</p>
<p>Lastly, if a success message is present in the request (the controller will place it), we will display it with a localized text taking an argument. We also want to escape the text given by the user to prevent XSS injection.</p>
<p>The message bundle for this example would look like this :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-properties" data-lang="properties"><span style="display:flex;"><span><span style="color:#57c7ff">message.youWrote</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">You wrote : {0}</span>
</span></span></code></pre></div><p>Our new controller :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Controller</span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">HomeController</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@RequestMapping</span>(value <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;/&#34;</span>, method <span style="color:#ff6ac1">=</span> RequestMethod.<span style="color:#57c7ff">GET</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">displayHome</span>(Model model) {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;/home&#34;</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@ModelAttribute</span>(<span style="color:#5af78e">&#34;formDTO&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> FormDTO <span style="color:#57c7ff">createFormBean</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> FormDTO();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@RequestMapping</span>(value <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;/&#34;</span>, method<span style="color:#ff6ac1">=</span>RequestMethod.<span style="color:#57c7ff">POST</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> String <span style="color:#57c7ff">submitMessage</span>(<span style="color:#ff9f43">@Valid</span> FormDTO formDTO, BindingResult result,
</span></span><span style="display:flex;"><span>					SessionStatus sessionStatus,
</span></span><span style="display:flex;"><span>					RedirectAttributes redirectAttrs) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">if</span> (result.<span style="color:#57c7ff">hasErrors</span>()) {
</span></span><span style="display:flex;"><span>			<span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;/home&#34;</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		String message <span style="color:#ff6ac1">=</span> formDTO.<span style="color:#57c7ff">toString</span>();
</span></span><span style="display:flex;"><span>		sessionStatus.<span style="color:#57c7ff">setComplete</span>();
</span></span><span style="display:flex;"><span>		redirectAttrs.<span style="color:#57c7ff">addFlashAttribute</span>(<span style="color:#5af78e">&#34;message&#34;</span>, message);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#5af78e">&#34;redirect:/&#34;</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>You can see we expose our <strong>FormDTO</strong> to the Model.
Then we process this action of posting on &ldquo;/&rdquo;. With spring MVC request mapping you can inject whatever is relevant to the context of your page.
Here we will ask Spring MVC to give us the form posted with indication on its correctness as far as validation rules are concerned (we will see that below).</p>
<p>We also want some other small things : access to redirect attributes to display a single time (flash) message, access to the session to dispose our form, etc.</p>
<p>If the user input is correct, we will redirect him (yes with spring MVC you have some <a href="http://en.wikipedia.org/wiki/Post/Redirect/Get">PRG</a> for free) to the home. You can also use the instruction &lsquo;forward:url&rsquo;.</p>
<p>I strongly advise you to check out <a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/mvc.html">the documentation</a> to learn what can be injected in your controllers.</p>
<p>Our <strong>FormDTO</strong> is a simple POJO, annotated with <a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/mvc.html">hibernate-validator</a> annotation :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">FormDTO</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@NotEmpty</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> String messageFromUser;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Getters and setters omitted</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Hibernate validator provides a lot of useful annotations like @Min, @Max, @Email. You can even stack them or create your own rules.</p>
<p>That&rsquo;s it ! To customize validation message, just write properties with the same name as the annotations :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-properties" data-lang="properties"><span style="display:flex;"><span><span style="color:#78787e"># This will override validation messages caused by @NotEmpty annotation</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">NotEmpty</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">This cannot be empty !</span>
</span></span><span style="display:flex;"><span><span style="color:#78787e"># This will override @NotEmpty validation messages with a path of messageFromUser</span>
</span></span><span style="display:flex;"><span><span style="color:#57c7ff">NotEmpty.messageFromUser</span><span style="color:#ff6ac1">=</span><span style="color:#5af78e">Don&#39;t you have anything to say?</span>
</span></span></code></pre></div><h2 id="wait--how-do-we-test-a-controller">Wait ! How do we test a controller?</h2>
<p>With spring mvc test ! Have a look :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff6ac1">import static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import static</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">import static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@RunWith</span>(SpringJUnit4ClassRunner.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@WebAppConfiguration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ContextConfiguration</span>(classes <span style="color:#ff6ac1">=</span> WebConfig.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">HomeControllerTest</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> WebApplicationContext wac;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> MockMvc mockMvc;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Before</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">setup</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mockMvc</span> <span style="color:#ff6ac1">=</span> MockMvcBuilders.<span style="color:#57c7ff">webAppContextSetup</span>(<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">wac</span>).<span style="color:#57c7ff">build</span>();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">getHome</span>() <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mockMvc</span>.<span style="color:#57c7ff">perform</span>(get(<span style="color:#5af78e">&#34;/&#34;</span>))
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andDo</span>(print())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(status().<span style="color:#57c7ff">isOk</span>())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(forwardedUrl(<span style="color:#5af78e">&#34;/WEB-INF/views/home.jsp&#34;</span>));
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">postEmptyData</span>() <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mockMvc</span>.<span style="color:#57c7ff">perform</span>(post(<span style="color:#5af78e">&#34;/&#34;</span>))
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andDo</span>(print())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(status().<span style="color:#57c7ff">isOk</span>())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(model().<span style="color:#57c7ff">attributeHasFieldErrors</span>(<span style="color:#5af78e">&#34;formDTO&#34;</span>, <span style="color:#5af78e">&#34;messageFromUser&#34;</span>))
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(forwardedUrl(<span style="color:#5af78e">&#34;/WEB-INF/views/home.jsp&#34;</span>));
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">postSomething</span>() <span style="color:#ff5c57">throws</span> Exception {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">mockMvc</span>.<span style="color:#57c7ff">perform</span>(post(<span style="color:#5af78e">&#34;/&#34;</span>).<span style="color:#57c7ff">param</span>(<span style="color:#5af78e">&#34;messageFromUser&#34;</span>, <span style="color:#5af78e">&#34;hello&#34;</span>))
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andDo</span>(print())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(status().<span style="color:#57c7ff">isMovedTemporarily</span>()) <span style="color:#78787e">// 302 redirect</span>
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(model().<span style="color:#57c7ff">hasNoErrors</span>())
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(flash().<span style="color:#57c7ff">attributeExists</span>(<span style="color:#5af78e">&#34;message&#34;</span>))
</span></span><span style="display:flex;"><span>			.<span style="color:#57c7ff">andExpect</span>(redirectedUrl(<span style="color:#5af78e">&#34;/&#34;</span>));
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I think the code is pretty understandable as it uses a syntax which is very close to natural language.
But it is quite difficult to get it right the first time. You definitely have to check out <a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/htmlsingle/#unit-testing-spring-mvc">the documentation</a>.</p>
<h2 id="tomcat-and-jetty">Tomcat and jetty</h2>
<p>To add them to your pom.xml, check out my <a href="http://geowarin.wordpress.com/2013/01/22/basic-configuration-for-jetty-and-tomcat-maven-plugins/">previous article</a> or download the <a href="https://github.com/geowarin/spring-mvc-examples/tree/master/mvc-base">github project</a> of this article which also provides a very handsome SiteMesh template featuring twitter bootstrap and responsive design.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Since version 3.2, Spring MVC is now very easy to configure and use. Spring mvc test, now integrated in the framework, is a really unique feature in terms of controller unit testing and is really worth a try.</p>
<p>Its action based request mapping &lsquo;a la rest&rsquo; makes it both versatile, easy to integrate with ajax solutions and a very good replacement for the <a href="http://struts.apache.org/">old-timer</a>.</p>
<p>It also provides easy XML, RSS, plain text or JSON publishing and can almost be used as a replacement for a rest framework !</p>
<p>Of course, be sure to check the <a href="https://github.com/SpringSource/spring-mvc-showcase">spring-mvc-showcase</a>, a real goldmine.</p>
]]></content:encoded></item><item><title>Using spring in a Java SE environment and implementing the chain of responsibility pattern</title><link>https://geowarin.com/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/</link><pubDate>Sun, 20 Jan 2013 19:31:56 +0000</pubDate><guid>https://geowarin.com/using-spring-in-a-java-se-environment-and-implementing-the-chain-of-responsibility-pattern/</guid><description>Demonstration of how to set up spring in java SE and inject several implementations of the same interface</description><content:encoded><![CDATA[<p>In this post I will show you how to use spring 3.0 <a href="http://www.springsource.org/javaconfig">Java based configuration</a> in a Java SE environment, taking advantage of spring autowiring to implement the <a href="http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern">chain of responsibility </a>design pattern with components and services in a simple project. We will also use spring&rsquo;s <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.html">PropertySourcesPlaceholderConfigurer</a> to inject custom properties into our beans with the <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/beans/factory/annotation/Value.html">@Value</a> annotation and test our application with spring-test.</p>
<p>Some fun in perspective ! Tag along.</p>
<p>The source code of this application is available on my github : <a href="https://github.com/geowarin/spring-examples/tree/master/spring-standalone-chain">https://github.com/geowarin/spring-examples/tree/master/spring-standalone-chain</a></p>
<h2 id="java-configuration">Java configuration</h2>
<p>Starting from spring 3.0, it is possible to get rid of any XML configuration by providing a pure Java configuration. This is done by annotating your configuration classes with the <strong>@Configuration</strong> annotation and annotating your beans with <strong>@Bean</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ComponentScan</span>(basePackages <span style="color:#ff6ac1">=</span> {<span style="color:#5af78e">&#34;com.geowarin.spring.service&#34;</span>, <span style="color:#5af78e">&#34;com.geowarin.spring.component&#34;</span>})
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@PropertySource</span>(value <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;classpath:chain.properties&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SpringStandalonChainConfig</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> PropertySourcesPlaceholderConfigurer <span style="color:#57c7ff">propertySourcesPlaceholderConfigurer</span>() {
</span></span><span style="display:flex;"><span>		PropertySourcesPlaceholderConfigurer pspc <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> PropertySourcesPlaceholderConfigurer();
</span></span><span style="display:flex;"><span>		pspc.<span style="color:#57c7ff">setPlaceholderPrefix</span>(<span style="color:#5af78e">&#34;#{&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> pspc;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> MainBean <span style="color:#57c7ff">mainBean</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">new</span> MainBean();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Additional annotation for java configuration include <strong>@ComponentScan</strong> to specify packages in which your <strong>@Component</strong>, <strong>@Service</strong>, etc. beans are included and <strong>@PropertySource</strong> to include property files in your configuration.</p>
<p>Two thing here :</p>
<ol>
<li>I declare a <strong>MainBean</strong> which will act as an entry point for our application. This bean will benefit of spring autowiring</li>
<li>I declare a custom <strong>PropertySourcesPlaceholderConfigurer</strong> to enable the injection of properties annotated with @Value. I am customizing the prefix for usage of <a href="http://static.springsource.org/spring/docs/3.0.x/reference/expressions.html">spring Expression Language</a> to be able to use #{} expressions instead of default ${}</li>
</ol>
<p>Injection with <strong>@Value</strong> property is a very interesting alternative to the use of spring&rsquo;s Environment as it provides natural type inference.</p>
<p>For some people, the use of java configuration can be confusing because one cannot see at first glance where the config is located. What I usually do is keeping my configuration in a separate source folder. This can be achieved with maven and its build-helper plugin :</p>
<script src="https://gist.github.com/geowarin/4581500.js"></script>

<p>This approach is compatible with eclipse if you have m2e installed. In that case when you import a project using this plugin, eclipse will prompt you for the install of the build-helper connector.</p>
<h2 id="our-application-entry-point--the-mainbean">Our application entry point : the MainBean</h2>
<p>Here is the code of our <strong>MainBean</strong> :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">MainBean</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Qualifier</span>(<span style="color:#5af78e">&#34;doChain&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> ChainService service;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Value</span>(<span style="color:#5af78e">&#34;#{chain.compatibleWithFirst}&#34;</span>) <span style="color:#9aedfe">boolean</span> compatibleWithFirst;
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Value</span>(<span style="color:#5af78e">&#34;#{chain.compatibleWithSecond}&#34;</span>) <span style="color:#9aedfe">boolean</span> compatibleWithSecond;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(MainBean.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">start</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;property compatibleWithFirst=&#34;</span> <span style="color:#ff6ac1">+</span> compatibleWithFirst);
</span></span><span style="display:flex;"><span>		log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;property compatibleWithSecond=&#34;</span> <span style="color:#ff6ac1">+</span> compatibleWithSecond);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		ChainContext chainContext <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ChainContext(compatibleWithFirst, compatibleWithSecond);
</span></span><span style="display:flex;"><span>		service.<span style="color:#57c7ff">executeChain</span>(chainContext);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We are injecting our service into the bean with a custom qualifier which will enable us to provide several implementations of our service if we need it.</p>
<p>Note that the <strong>@Value</strong> annotation, our properties will automatically be casted to booleans, which is pretty cool. Here is our chain.properties file :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>chain.compatibleWithFirst<span style="color:#ff6ac1">=</span><span style="color:#ff5c57">false</span>
</span></span><span style="display:flex;"><span>chain.compatibleWithSecond<span style="color:#ff6ac1">=</span><span style="color:#ff5c57">true</span>
</span></span></code></pre></div><h2 id="the-chain--two-components-and-a-service">The Chain : Two components and a service</h2>
<p>The <strong>ChainContext</strong> class is a simple pojo we pass to our service to be handled by the chain of responsibility and enable us to test if our service successfully handled our case :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">ChainContext</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> <span style="color:#9aedfe">boolean</span> compatibleWithFirstElement;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">final</span> <span style="color:#9aedfe">boolean</span> compatibleWithSecondElement;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">boolean</span> handledByFirst;
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#9aedfe">boolean</span> handledBySecond;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#57c7ff">ChainContext</span>(<span style="color:#9aedfe">boolean</span> compatibleWithFirstElement, <span style="color:#9aedfe">boolean</span> compatibleWithSecondElement) {
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">compatibleWithFirstElement</span> <span style="color:#ff6ac1">=</span> compatibleWithFirstElement;
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">this</span>.<span style="color:#57c7ff">compatibleWithSecondElement</span> <span style="color:#ff6ac1">=</span> compatibleWithSecondElement;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#78787e">// Getters and setters ommited</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>ChainElement</strong> is a simple interface which will be implemented by two components : <strong>FirstChainElement</strong> and <strong>SecondChainElement</strong>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">interface</span> <span style="color:#f3f99d">ChainElement</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">boolean</span> <span style="color:#57c7ff">doChain</span>(ChainContext context);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here is the first element, the second one is essentially the same thing :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Component</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Order</span>(1)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">FirstChainElement</span> <span style="color:#ff5c57">implements</span> ChainElement {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> Logger log <span style="color:#ff6ac1">=</span> LoggerFactory.<span style="color:#57c7ff">getLogger</span>(FirstChainElement.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">boolean</span> <span style="color:#57c7ff">doChain</span>(ChainContext context) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">if</span> (context.<span style="color:#57c7ff">isCompatibleWithFirstElement</span>()) {
</span></span><span style="display:flex;"><span>			log.<span style="color:#57c7ff">info</span>(<span style="color:#5af78e">&#34;Handled by first&#34;</span>);
</span></span><span style="display:flex;"><span>			context.<span style="color:#57c7ff">setHandledByFirst</span>(<span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>			<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">true</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">return</span> <span style="color:#ff6ac1">false</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The thing to note here is the use of the spring annotation <a href="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/core/annotation/Order.html">@Order</a> which will enable us to sort our list using spring&rsquo;s <a href="http://static.springsource.org/spring/docs/3.0.x/api/org/springframework/core/annotation/AnnotationAwareOrderComparator.html">AnnotationAwareOrderComparator</a>. Neat :)</p>
<p>And now the service :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@Qualifier</span>(<span style="color:#5af78e">&#34;doChain&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">DoChainService</span> <span style="color:#ff5c57">implements</span> ChainService {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> List<span style="color:#ff6ac1">&lt;</span>ChainElement<span style="color:#ff6ac1">&gt;</span> chain;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@PostConstruct</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">init</span>() {
</span></span><span style="display:flex;"><span>		Collections.<span style="color:#57c7ff">sort</span>(chain, AnnotationAwareOrderComparator.<span style="color:#57c7ff">INSTANCE</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">executeChain</span>(ChainContext context) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">for</span> (ChainElement chainElement : chain) {
</span></span><span style="display:flex;"><span>			<span style="color:#ff6ac1">if</span> (chainElement.<span style="color:#57c7ff">doChain</span>(context))
</span></span><span style="display:flex;"><span>				<span style="color:#ff6ac1">break</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Note that we use the same qualifier as our <strong>MainBean</strong> here. The main trick in this article is the usage of <strong>@Autowired</strong> to inject all the components implementing the <strong>ChainElement</strong> interface into a List.</p>
<h2 id="the-application-main-and-tests">The application main and tests</h2>
<p>That&rsquo;s it ! Now you can run your project with this main class :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">SpringStandaloneChainApp</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> <span style="color:#ff5c57">static</span> <span style="color:#ff5c57">final</span> String CONFIG_PACKAGE <span style="color:#ff6ac1">=</span> <span style="color:#5af78e">&#34;com.geowarin.spring.config&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#ff5c57">static</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">main</span>(String<span style="color:#ff6ac1">[]</span> args) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff6ac1">try</span> (AnnotationConfigApplicationContext ctx <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> AnnotationConfigApplicationContext()) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			ctx.<span style="color:#57c7ff">scan</span>(CONFIG_PACKAGE);
</span></span><span style="display:flex;"><span>			ctx.<span style="color:#57c7ff">refresh</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			MainBean bean <span style="color:#ff6ac1">=</span> ctx.<span style="color:#57c7ff">getBean</span>(MainBean.<span style="color:#57c7ff">class</span>);
</span></span><span style="display:flex;"><span>			bean.<span style="color:#57c7ff">start</span>();
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And unit test the service with spring-test like that :</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#ff9f43">@RunWith</span>(SpringJUnit4ClassRunner.<span style="color:#57c7ff">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff9f43">@ContextConfiguration</span>(classes <span style="color:#ff6ac1">=</span> { SpringStandalonChainConfig.<span style="color:#57c7ff">class</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">public</span> <span style="color:#ff5c57">class</span> <span style="color:#f3f99d">ChainServiceTest</span> <span style="color:#ff5c57">extends</span> TestCase {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Autowired</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">private</span> ChainService chainService;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testHandledByFirst</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		ChainContext chainContext <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ChainContext(<span style="color:#ff6ac1">true</span>, <span style="color:#ff6ac1">false</span>);
</span></span><span style="display:flex;"><span>		chainService.<span style="color:#57c7ff">executeChain</span>(chainContext);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertTrue</span>(chainContext.<span style="color:#57c7ff">isHandledByFirst</span>());
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertFalse</span>(chainContext.<span style="color:#57c7ff">isHandledBySecond</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff9f43">@Test</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff5c57">public</span> <span style="color:#9aedfe">void</span> <span style="color:#57c7ff">testHandledBySecond</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		ChainContext chainContext <span style="color:#ff6ac1">=</span> <span style="color:#ff6ac1">new</span> ChainContext(<span style="color:#ff6ac1">false</span>, <span style="color:#ff6ac1">true</span>);
</span></span><span style="display:flex;"><span>		chainService.<span style="color:#57c7ff">executeChain</span>(chainContext);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertFalse</span>(chainContext.<span style="color:#57c7ff">isHandledByFirst</span>());
</span></span><span style="display:flex;"><span>		Assert.<span style="color:#57c7ff">assertTrue</span>(chainContext.<span style="color:#57c7ff">isHandledBySecond</span>());
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Spring is perfectly suitable for a Java SE Environment. Its new java configuration is very handy and powerful as long as you keep things tidy and make sure the configuration is not spread across the whole project.
Finally, let&rsquo;s note it is possible to inject all components or services implementing a given interface into a list with the `@Autowired annotation.</p>
]]></content:encoded></item></channel></rss>